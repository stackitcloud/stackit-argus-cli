/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// V1ClustersCreateRequest struct for V1ClustersCreateRequest
type V1ClustersCreateRequest struct {
	// Encoded base64 string of a valid kubeconfig
	Kubeconfig string `json:"kubeconfig"`
	// Concrete name of the cluster. If you leave the field blank, the cluster name is clusterId{len(clusterId)}. So in a cluster category defined by clusterId many concrete clusters can exist.
	ClusterName *string `json:"clusterName,omitempty"`
}

// NewV1ClustersCreateRequest instantiates a new V1ClustersCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ClustersCreateRequest(kubeconfig string) *V1ClustersCreateRequest {
	this := V1ClustersCreateRequest{}
	this.Kubeconfig = kubeconfig
	return &this
}

// NewV1ClustersCreateRequestWithDefaults instantiates a new V1ClustersCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ClustersCreateRequestWithDefaults() *V1ClustersCreateRequest {
	this := V1ClustersCreateRequest{}
	return &this
}

// GetKubeconfig returns the Kubeconfig field value
func (o *V1ClustersCreateRequest) GetKubeconfig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kubeconfig
}

// GetKubeconfigOk returns a tuple with the Kubeconfig field value
// and a boolean to check if the value has been set.
func (o *V1ClustersCreateRequest) GetKubeconfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kubeconfig, true
}

// SetKubeconfig sets field value
func (o *V1ClustersCreateRequest) SetKubeconfig(v string) {
	o.Kubeconfig = v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *V1ClustersCreateRequest) GetClusterName() string {
	if o == nil || o.ClusterName == nil {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClustersCreateRequest) GetClusterNameOk() (*string, bool) {
	if o == nil || o.ClusterName == nil {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *V1ClustersCreateRequest) HasClusterName() bool {
	if o != nil && o.ClusterName != nil {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *V1ClustersCreateRequest) SetClusterName(v string) {
	o.ClusterName = &v
}

func (o V1ClustersCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kubeconfig"] = o.Kubeconfig
	}
	if o.ClusterName != nil {
		toSerialize["clusterName"] = o.ClusterName
	}
	return json.Marshal(toSerialize)
}

type NullableV1ClustersCreateRequest struct {
	value *V1ClustersCreateRequest
	isSet bool
}

func (v NullableV1ClustersCreateRequest) Get() *V1ClustersCreateRequest {
	return v.value
}

func (v *NullableV1ClustersCreateRequest) Set(val *V1ClustersCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ClustersCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ClustersCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ClustersCreateRequest(val *V1ClustersCreateRequest) *NullableV1ClustersCreateRequest {
	return &NullableV1ClustersCreateRequest{value: val, isSet: true}
}

func (v NullableV1ClustersCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ClustersCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


