/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig Configures the scrape request's TLS settings.
type V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig struct {
	// Disable validation of the server certificate.
	InsecureSkipVerify *bool `json:"insecureSkipVerify,omitempty"`
}

// NewV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig instantiates a new V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig() *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig {
	this := V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig{}
	var insecureSkipVerify bool = false
	this.InsecureSkipVerify = &insecureSkipVerify
	return &this
}

// NewV1InstancesScrapeconfigsCreateRequestOauth2TlsConfigWithDefaults instantiates a new V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InstancesScrapeconfigsCreateRequestOauth2TlsConfigWithDefaults() *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig {
	this := V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig{}
	var insecureSkipVerify bool = false
	this.InsecureSkipVerify = &insecureSkipVerify
	return &this
}

// GetInsecureSkipVerify returns the InsecureSkipVerify field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) GetInsecureSkipVerify() bool {
	if o == nil || o.InsecureSkipVerify == nil {
		var ret bool
		return ret
	}
	return *o.InsecureSkipVerify
}

// GetInsecureSkipVerifyOk returns a tuple with the InsecureSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) GetInsecureSkipVerifyOk() (*bool, bool) {
	if o == nil || o.InsecureSkipVerify == nil {
		return nil, false
	}
	return o.InsecureSkipVerify, true
}

// HasInsecureSkipVerify returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) HasInsecureSkipVerify() bool {
	if o != nil && o.InsecureSkipVerify != nil {
		return true
	}

	return false
}

// SetInsecureSkipVerify gets a reference to the given bool and assigns it to the InsecureSkipVerify field.
func (o *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) SetInsecureSkipVerify(v bool) {
	o.InsecureSkipVerify = &v
}

func (o V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InsecureSkipVerify != nil {
		toSerialize["insecureSkipVerify"] = o.InsecureSkipVerify
	}
	return json.Marshal(toSerialize)
}

type NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig struct {
	value *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig
	isSet bool
}

func (v NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) Get() *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig {
	return v.value
}

func (v *NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) Set(val *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig(val *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) *NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig {
	return &NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig{value: val, isSet: true}
}

func (v NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


