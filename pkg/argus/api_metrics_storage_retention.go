/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MetricsStorageRetentionApiService MetricsStorageRetentionApi service
type MetricsStorageRetentionApiService service

type ApiV1InstancesMetricsStorageRetentionsListRequest struct {
	ctx context.Context
	ApiService *MetricsStorageRetentionApiService
	instanceId string
	authorization *string
}

// Accepts technical credentials and api gateway access.
func (r ApiV1InstancesMetricsStorageRetentionsListRequest) Authorization(authorization string) ApiV1InstancesMetricsStorageRetentionsListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesMetricsStorageRetentionsListRequest) Execute() (*BucketRetentionTimeRespond, *http.Response, error) {
	return r.ApiService.V1InstancesMetricsStorageRetentionsListExecute(r)
}

/*
V1InstancesMetricsStorageRetentionsList Method for V1InstancesMetricsStorageRetentionsList

Get metric storage retention time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiV1InstancesMetricsStorageRetentionsListRequest
*/
func (a *MetricsStorageRetentionApiService) V1InstancesMetricsStorageRetentionsList(ctx context.Context, instanceId string) ApiV1InstancesMetricsStorageRetentionsListRequest {
	return ApiV1InstancesMetricsStorageRetentionsListRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return BucketRetentionTimeRespond
func (a *MetricsStorageRetentionApiService) V1InstancesMetricsStorageRetentionsListExecute(r ApiV1InstancesMetricsStorageRetentionsListRequest) (*BucketRetentionTimeRespond, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BucketRetentionTimeRespond
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsStorageRetentionApiService.V1InstancesMetricsStorageRetentionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/metrics-storage-retentions"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesMetricsStorageRetentionsUpdateRequest struct {
	ctx context.Context
	ApiService *MetricsStorageRetentionApiService
	instanceId string
	authorization *string
	data *V1InstancesMetricsStorageRetentionsUpdateRequest
}

// Accepts technical credentials and api gateway access.
func (r ApiV1InstancesMetricsStorageRetentionsUpdateRequest) Authorization(authorization string) ApiV1InstancesMetricsStorageRetentionsUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesMetricsStorageRetentionsUpdateRequest) Data(data V1InstancesMetricsStorageRetentionsUpdateRequest) ApiV1InstancesMetricsStorageRetentionsUpdateRequest {
	r.data = &data
	return r
}

func (r ApiV1InstancesMetricsStorageRetentionsUpdateRequest) Execute() (*Message, *http.Response, error) {
	return r.ApiService.V1InstancesMetricsStorageRetentionsUpdateExecute(r)
}

/*
V1InstancesMetricsStorageRetentionsUpdate Method for V1InstancesMetricsStorageRetentionsUpdate

Update metric update retention time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiV1InstancesMetricsStorageRetentionsUpdateRequest
*/
func (a *MetricsStorageRetentionApiService) V1InstancesMetricsStorageRetentionsUpdate(ctx context.Context, instanceId string) ApiV1InstancesMetricsStorageRetentionsUpdateRequest {
	return ApiV1InstancesMetricsStorageRetentionsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return Message
func (a *MetricsStorageRetentionApiService) V1InstancesMetricsStorageRetentionsUpdateExecute(r ApiV1InstancesMetricsStorageRetentionsUpdateRequest) (*Message, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Message
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsStorageRetentionApiService.V1InstancesMetricsStorageRetentionsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/metrics-storage-retentions"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest struct {
	ctx context.Context
	ApiService *MetricsStorageRetentionApiService
	instanceId string
	projectId string
	authorization *string
}

// Accepts technical credentials and api gateway access.
func (r ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest) Authorization(authorization string) ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest) Execute() (*BucketRetentionTimeRespond, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesMetricsStorageRetentionsListExecute(r)
}

/*
V1ProjectsInstancesMetricsStorageRetentionsList Method for V1ProjectsInstancesMetricsStorageRetentionsList

Get metric storage retention time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param projectId
 @return ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest
*/
func (a *MetricsStorageRetentionApiService) V1ProjectsInstancesMetricsStorageRetentionsList(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest {
	return ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return BucketRetentionTimeRespond
func (a *MetricsStorageRetentionApiService) V1ProjectsInstancesMetricsStorageRetentionsListExecute(r ApiV1ProjectsInstancesMetricsStorageRetentionsListRequest) (*BucketRetentionTimeRespond, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BucketRetentionTimeRespond
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsStorageRetentionApiService.V1ProjectsInstancesMetricsStorageRetentionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/metrics-storage-retentions"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest struct {
	ctx context.Context
	ApiService *MetricsStorageRetentionApiService
	instanceId string
	projectId string
	authorization *string
	data *V1InstancesMetricsStorageRetentionsUpdateRequest
}

// Accepts technical credentials and api gateway access.
func (r ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest) Authorization(authorization string) ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest) Data(data V1InstancesMetricsStorageRetentionsUpdateRequest) ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest {
	r.data = &data
	return r
}

func (r ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest) Execute() (*Message, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesMetricsStorageRetentionsUpdateExecute(r)
}

/*
V1ProjectsInstancesMetricsStorageRetentionsUpdate Method for V1ProjectsInstancesMetricsStorageRetentionsUpdate

Update metric update retention time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param projectId
 @return ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest
*/
func (a *MetricsStorageRetentionApiService) V1ProjectsInstancesMetricsStorageRetentionsUpdate(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest {
	return ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		instanceId: instanceId,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return Message
func (a *MetricsStorageRetentionApiService) V1ProjectsInstancesMetricsStorageRetentionsUpdateExecute(r ApiV1ProjectsInstancesMetricsStorageRetentionsUpdateRequest) (*Message, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Message
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsStorageRetentionApiService.V1ProjectsInstancesMetricsStorageRetentionsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/metrics-storage-retentions"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.data == nil {
		return localVarReturnValue, nil, reportError("data is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
