/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// Status struct for Status
type Status struct {
	State            string `json:"state"`
	Description      string `json:"description"`
	InstanceUsable   string `json:"instanceUsable"`
	UpdateRepeatable string `json:"updateRepeatable"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus(state string, description string, instanceUsable string, updateRepeatable string) *Status {
	this := Status{}
	this.State = state
	this.Description = description
	this.InstanceUsable = instanceUsable
	this.UpdateRepeatable = updateRepeatable
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetState returns the State field value
func (o *Status) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Status) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Status) SetState(v string) {
	o.State = v
}

// GetDescription returns the Description field value
func (o *Status) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Status) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Status) SetDescription(v string) {
	o.Description = v
}

// GetInstanceUsable returns the InstanceUsable field value
func (o *Status) GetInstanceUsable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceUsable
}

// GetInstanceUsableOk returns a tuple with the InstanceUsable field value
// and a boolean to check if the value has been set.
func (o *Status) GetInstanceUsableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceUsable, true
}

// SetInstanceUsable sets field value
func (o *Status) SetInstanceUsable(v string) {
	o.InstanceUsable = v
}

// GetUpdateRepeatable returns the UpdateRepeatable field value
func (o *Status) GetUpdateRepeatable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateRepeatable
}

// GetUpdateRepeatableOk returns a tuple with the UpdateRepeatable field value
// and a boolean to check if the value has been set.
func (o *Status) GetUpdateRepeatableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateRepeatable, true
}

// SetUpdateRepeatable sets field value
func (o *Status) SetUpdateRepeatable(v string) {
	o.UpdateRepeatable = v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["instanceUsable"] = o.InstanceUsable
	}
	if true {
		toSerialize["updateRepeatable"] = o.UpdateRepeatable
	}
	return json.Marshal(toSerialize)
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
