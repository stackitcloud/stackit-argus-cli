/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// RouteResponse struct for RouteResponse
type RouteResponse struct {
	Message string `json:"message"`
	Data Route `json:"data"`
}

// NewRouteResponse instantiates a new RouteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteResponse(message string, data Route) *RouteResponse {
	this := RouteResponse{}
	this.Message = message
	this.Data = data
	return &this
}

// NewRouteResponseWithDefaults instantiates a new RouteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteResponseWithDefaults() *RouteResponse {
	this := RouteResponse{}
	return &this
}

// GetMessage returns the Message field value
func (o *RouteResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RouteResponse) SetMessage(v string) {
	o.Message = v
}

// GetData returns the Data field value
func (o *RouteResponse) GetData() Route {
	if o == nil {
		var ret Route
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetDataOk() (*Route, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *RouteResponse) SetData(v Route) {
	o.Data = v
}

func (o RouteResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRouteResponse struct {
	value *RouteResponse
	isSet bool
}

func (v NullableRouteResponse) Get() *RouteResponse {
	return v.value
}

func (v *NullableRouteResponse) Set(val *RouteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteResponse(val *RouteResponse) *NullableRouteResponse {
	return &NullableRouteResponse{value: val, isSet: true}
}

func (v NullableRouteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


