/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// HttpConfig struct for HttpConfig
type HttpConfig struct {
	ProxyUrl *string `json:"proxyUrl,omitempty"`
}

// NewHttpConfig instantiates a new HttpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpConfig() *HttpConfig {
	this := HttpConfig{}
	return &this
}

// NewHttpConfigWithDefaults instantiates a new HttpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpConfigWithDefaults() *HttpConfig {
	this := HttpConfig{}
	return &this
}

// GetProxyUrl returns the ProxyUrl field value if set, zero value otherwise.
func (o *HttpConfig) GetProxyUrl() string {
	if o == nil || o.ProxyUrl == nil {
		var ret string
		return ret
	}
	return *o.ProxyUrl
}

// GetProxyUrlOk returns a tuple with the ProxyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpConfig) GetProxyUrlOk() (*string, bool) {
	if o == nil || o.ProxyUrl == nil {
		return nil, false
	}
	return o.ProxyUrl, true
}

// HasProxyUrl returns a boolean if a field has been set.
func (o *HttpConfig) HasProxyUrl() bool {
	if o != nil && o.ProxyUrl != nil {
		return true
	}

	return false
}

// SetProxyUrl gets a reference to the given string and assigns it to the ProxyUrl field.
func (o *HttpConfig) SetProxyUrl(v string) {
	o.ProxyUrl = &v
}

func (o HttpConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProxyUrl != nil {
		toSerialize["proxyUrl"] = o.ProxyUrl
	}
	return json.Marshal(toSerialize)
}

type NullableHttpConfig struct {
	value *HttpConfig
	isSet bool
}

func (v NullableHttpConfig) Get() *HttpConfig {
	return v.value
}

func (v *NullableHttpConfig) Set(val *HttpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpConfig(val *HttpConfig) *NullableHttpConfig {
	return &NullableHttpConfig{value: val, isSet: true}
}

func (v NullableHttpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
