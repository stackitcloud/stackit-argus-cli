/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// InhibitRules struct for InhibitRules
type InhibitRules struct {
	SourceMatch   *map[string]string `json:"sourceMatch,omitempty"`
	SourceMatchRe *map[string]string `json:"sourceMatchRe,omitempty"`
	TargetMatch   *map[string]string `json:"targetMatch,omitempty"`
	TargetMatchRe *map[string]string `json:"targetMatchRe,omitempty"`
	Equal         []string           `json:"equal,omitempty"`
}

// NewInhibitRules instantiates a new InhibitRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInhibitRules() *InhibitRules {
	this := InhibitRules{}
	return &this
}

// NewInhibitRulesWithDefaults instantiates a new InhibitRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInhibitRulesWithDefaults() *InhibitRules {
	this := InhibitRules{}
	return &this
}

// GetSourceMatch returns the SourceMatch field value if set, zero value otherwise.
func (o *InhibitRules) GetSourceMatch() map[string]string {
	if o == nil || o.SourceMatch == nil {
		var ret map[string]string
		return ret
	}
	return *o.SourceMatch
}

// GetSourceMatchOk returns a tuple with the SourceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetSourceMatchOk() (*map[string]string, bool) {
	if o == nil || o.SourceMatch == nil {
		return nil, false
	}
	return o.SourceMatch, true
}

// HasSourceMatch returns a boolean if a field has been set.
func (o *InhibitRules) HasSourceMatch() bool {
	if o != nil && o.SourceMatch != nil {
		return true
	}

	return false
}

// SetSourceMatch gets a reference to the given map[string]string and assigns it to the SourceMatch field.
func (o *InhibitRules) SetSourceMatch(v map[string]string) {
	o.SourceMatch = &v
}

// GetSourceMatchRe returns the SourceMatchRe field value if set, zero value otherwise.
func (o *InhibitRules) GetSourceMatchRe() map[string]string {
	if o == nil || o.SourceMatchRe == nil {
		var ret map[string]string
		return ret
	}
	return *o.SourceMatchRe
}

// GetSourceMatchReOk returns a tuple with the SourceMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetSourceMatchReOk() (*map[string]string, bool) {
	if o == nil || o.SourceMatchRe == nil {
		return nil, false
	}
	return o.SourceMatchRe, true
}

// HasSourceMatchRe returns a boolean if a field has been set.
func (o *InhibitRules) HasSourceMatchRe() bool {
	if o != nil && o.SourceMatchRe != nil {
		return true
	}

	return false
}

// SetSourceMatchRe gets a reference to the given map[string]string and assigns it to the SourceMatchRe field.
func (o *InhibitRules) SetSourceMatchRe(v map[string]string) {
	o.SourceMatchRe = &v
}

// GetTargetMatch returns the TargetMatch field value if set, zero value otherwise.
func (o *InhibitRules) GetTargetMatch() map[string]string {
	if o == nil || o.TargetMatch == nil {
		var ret map[string]string
		return ret
	}
	return *o.TargetMatch
}

// GetTargetMatchOk returns a tuple with the TargetMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetTargetMatchOk() (*map[string]string, bool) {
	if o == nil || o.TargetMatch == nil {
		return nil, false
	}
	return o.TargetMatch, true
}

// HasTargetMatch returns a boolean if a field has been set.
func (o *InhibitRules) HasTargetMatch() bool {
	if o != nil && o.TargetMatch != nil {
		return true
	}

	return false
}

// SetTargetMatch gets a reference to the given map[string]string and assigns it to the TargetMatch field.
func (o *InhibitRules) SetTargetMatch(v map[string]string) {
	o.TargetMatch = &v
}

// GetTargetMatchRe returns the TargetMatchRe field value if set, zero value otherwise.
func (o *InhibitRules) GetTargetMatchRe() map[string]string {
	if o == nil || o.TargetMatchRe == nil {
		var ret map[string]string
		return ret
	}
	return *o.TargetMatchRe
}

// GetTargetMatchReOk returns a tuple with the TargetMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetTargetMatchReOk() (*map[string]string, bool) {
	if o == nil || o.TargetMatchRe == nil {
		return nil, false
	}
	return o.TargetMatchRe, true
}

// HasTargetMatchRe returns a boolean if a field has been set.
func (o *InhibitRules) HasTargetMatchRe() bool {
	if o != nil && o.TargetMatchRe != nil {
		return true
	}

	return false
}

// SetTargetMatchRe gets a reference to the given map[string]string and assigns it to the TargetMatchRe field.
func (o *InhibitRules) SetTargetMatchRe(v map[string]string) {
	o.TargetMatchRe = &v
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *InhibitRules) GetEqual() []string {
	if o == nil || o.Equal == nil {
		var ret []string
		return ret
	}
	return o.Equal
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InhibitRules) GetEqualOk() ([]string, bool) {
	if o == nil || o.Equal == nil {
		return nil, false
	}
	return o.Equal, true
}

// HasEqual returns a boolean if a field has been set.
func (o *InhibitRules) HasEqual() bool {
	if o != nil && o.Equal != nil {
		return true
	}

	return false
}

// SetEqual gets a reference to the given []string and assigns it to the Equal field.
func (o *InhibitRules) SetEqual(v []string) {
	o.Equal = v
}

func (o InhibitRules) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceMatch != nil {
		toSerialize["sourceMatch"] = o.SourceMatch
	}
	if o.SourceMatchRe != nil {
		toSerialize["sourceMatchRe"] = o.SourceMatchRe
	}
	if o.TargetMatch != nil {
		toSerialize["targetMatch"] = o.TargetMatch
	}
	if o.TargetMatchRe != nil {
		toSerialize["targetMatchRe"] = o.TargetMatchRe
	}
	if o.Equal != nil {
		toSerialize["equal"] = o.Equal
	}
	return json.Marshal(toSerialize)
}

type NullableInhibitRules struct {
	value *InhibitRules
	isSet bool
}

func (v NullableInhibitRules) Get() *InhibitRules {
	return v.value
}

func (v *NullableInhibitRules) Set(val *InhibitRules) {
	v.value = val
	v.isSet = true
}

func (v NullableInhibitRules) IsSet() bool {
	return v.isSet
}

func (v *NullableInhibitRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInhibitRules(val *InhibitRules) *NullableInhibitRules {
	return &NullableInhibitRules{value: val, isSet: true}
}

func (v NullableInhibitRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInhibitRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
