/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// AlertGroupsApiService AlertGroupsApi service
type AlertGroupsApiService service

type ApiV1InstancesAlertgroupsAllDeleteRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	instanceId    string
	authorization *string
	groupName     *[]string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesAlertgroupsAllDeleteRequest) Authorization(authorization string) ApiV1InstancesAlertgroupsAllDeleteRequest {
	r.authorization = &authorization
	return r
}

// Name of the groups that should be deleted
func (r ApiV1InstancesAlertgroupsAllDeleteRequest) GroupName(groupName []string) ApiV1InstancesAlertgroupsAllDeleteRequest {
	r.groupName = &groupName
	return r
}

func (r ApiV1InstancesAlertgroupsAllDeleteRequest) Execute() (*PostAlertGroup, *http.Response, error) {
	return r.ApiService.V1InstancesAlertgroupsAllDeleteExecute(r)
}

/*
V1InstancesAlertgroupsAllDelete Method for V1InstancesAlertgroupsAllDelete

delete alert groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@return ApiV1InstancesAlertgroupsAllDeleteRequest
*/
func (a *AlertGroupsApiService) V1InstancesAlertgroupsAllDelete(ctx context.Context, instanceId string) ApiV1InstancesAlertgroupsAllDeleteRequest {
	return ApiV1InstancesAlertgroupsAllDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return PostAlertGroup
func (a *AlertGroupsApiService) V1InstancesAlertgroupsAllDeleteExecute(r ApiV1InstancesAlertgroupsAllDeleteRequest) (*PostAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1InstancesAlertgroupsAllDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.groupName == nil {
		return localVarReturnValue, nil, reportError("groupName is required and must be specified")
	}

	{
		t := *r.groupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("groupName", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("groupName", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesAlertgroupsCreateRequest struct {
	ctx                                 context.Context
	ApiService                          *AlertGroupsApiService
	instanceId                          string
	authorization                       *string
	v1InstancesAlertgroupsCreateRequest *V1InstancesAlertgroupsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesAlertgroupsCreateRequest) Authorization(authorization string) ApiV1InstancesAlertgroupsCreateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesAlertgroupsCreateRequest) V1InstancesAlertgroupsCreateRequest(v1InstancesAlertgroupsCreateRequest V1InstancesAlertgroupsCreateRequest) ApiV1InstancesAlertgroupsCreateRequest {
	r.v1InstancesAlertgroupsCreateRequest = &v1InstancesAlertgroupsCreateRequest
	return r
}

func (r ApiV1InstancesAlertgroupsCreateRequest) Execute() (*PostAlertGroup, *http.Response, error) {
	return r.ApiService.V1InstancesAlertgroupsCreateExecute(r)
}

/*
V1InstancesAlertgroupsCreate Method for V1InstancesAlertgroupsCreate

create alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@return ApiV1InstancesAlertgroupsCreateRequest
*/
func (a *AlertGroupsApiService) V1InstancesAlertgroupsCreate(ctx context.Context, instanceId string) ApiV1InstancesAlertgroupsCreateRequest {
	return ApiV1InstancesAlertgroupsCreateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return PostAlertGroup
func (a *AlertGroupsApiService) V1InstancesAlertgroupsCreateExecute(r ApiV1InstancesAlertgroupsCreateRequest) (*PostAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1InstancesAlertgroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesAlertgroupsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesAlertgroupsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesAlertgroupsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesAlertgroupsDeleteRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	groupName     string
	instanceId    string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesAlertgroupsDeleteRequest) Authorization(authorization string) ApiV1InstancesAlertgroupsDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesAlertgroupsDeleteRequest) Execute() (*DeleteAlertGroup, *http.Response, error) {
	return r.ApiService.V1InstancesAlertgroupsDeleteExecute(r)
}

/*
V1InstancesAlertgroupsDelete Method for V1InstancesAlertgroupsDelete

delete alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupName
	@param instanceId
	@return ApiV1InstancesAlertgroupsDeleteRequest
*/
func (a *AlertGroupsApiService) V1InstancesAlertgroupsDelete(ctx context.Context, groupName string, instanceId string) ApiV1InstancesAlertgroupsDeleteRequest {
	return ApiV1InstancesAlertgroupsDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		groupName:  groupName,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return DeleteAlertGroup
func (a *AlertGroupsApiService) V1InstancesAlertgroupsDeleteExecute(r ApiV1InstancesAlertgroupsDeleteRequest) (*DeleteAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1InstancesAlertgroupsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/alertgroups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterToString(r.groupName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesAlertgroupsListRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	instanceId    string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesAlertgroupsListRequest) Authorization(authorization string) ApiV1InstancesAlertgroupsListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesAlertgroupsListRequest) Execute() (*GetAllAlertGroups, *http.Response, error) {
	return r.ApiService.V1InstancesAlertgroupsListExecute(r)
}

/*
V1InstancesAlertgroupsList Method for V1InstancesAlertgroupsList

get alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@return ApiV1InstancesAlertgroupsListRequest
*/
func (a *AlertGroupsApiService) V1InstancesAlertgroupsList(ctx context.Context, instanceId string) ApiV1InstancesAlertgroupsListRequest {
	return ApiV1InstancesAlertgroupsListRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return GetAllAlertGroups
func (a *AlertGroupsApiService) V1InstancesAlertgroupsListExecute(r ApiV1InstancesAlertgroupsListRequest) (*GetAllAlertGroups, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAllAlertGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1InstancesAlertgroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesAlertgroupsPartialUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *AlertGroupsApiService
	instanceId                          string
	authorization                       *string
	v1InstancesAlertgroupsCreateRequest *[]V1InstancesAlertgroupsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesAlertgroupsPartialUpdateRequest) Authorization(authorization string) ApiV1InstancesAlertgroupsPartialUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesAlertgroupsPartialUpdateRequest) V1InstancesAlertgroupsCreateRequest(v1InstancesAlertgroupsCreateRequest []V1InstancesAlertgroupsCreateRequest) ApiV1InstancesAlertgroupsPartialUpdateRequest {
	r.v1InstancesAlertgroupsCreateRequest = &v1InstancesAlertgroupsCreateRequest
	return r
}

func (r ApiV1InstancesAlertgroupsPartialUpdateRequest) Execute() (*PostAlertGroup, *http.Response, error) {
	return r.ApiService.V1InstancesAlertgroupsPartialUpdateExecute(r)
}

/*
V1InstancesAlertgroupsPartialUpdate Method for V1InstancesAlertgroupsPartialUpdate

patches alert groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@return ApiV1InstancesAlertgroupsPartialUpdateRequest
*/
func (a *AlertGroupsApiService) V1InstancesAlertgroupsPartialUpdate(ctx context.Context, instanceId string) ApiV1InstancesAlertgroupsPartialUpdateRequest {
	return ApiV1InstancesAlertgroupsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return PostAlertGroup
func (a *AlertGroupsApiService) V1InstancesAlertgroupsPartialUpdateExecute(r ApiV1InstancesAlertgroupsPartialUpdateRequest) (*PostAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1InstancesAlertgroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesAlertgroupsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesAlertgroupsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesAlertgroupsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesAlertgroupsReadRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	groupName     string
	instanceId    string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesAlertgroupsReadRequest) Authorization(authorization string) ApiV1InstancesAlertgroupsReadRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesAlertgroupsReadRequest) Execute() (*GetAlertGroup, *http.Response, error) {
	return r.ApiService.V1InstancesAlertgroupsReadExecute(r)
}

/*
V1InstancesAlertgroupsRead Method for V1InstancesAlertgroupsRead

get alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupName
	@param instanceId
	@return ApiV1InstancesAlertgroupsReadRequest
*/
func (a *AlertGroupsApiService) V1InstancesAlertgroupsRead(ctx context.Context, groupName string, instanceId string) ApiV1InstancesAlertgroupsReadRequest {
	return ApiV1InstancesAlertgroupsReadRequest{
		ApiService: a,
		ctx:        ctx,
		groupName:  groupName,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return GetAlertGroup
func (a *AlertGroupsApiService) V1InstancesAlertgroupsReadExecute(r ApiV1InstancesAlertgroupsReadRequest) (*GetAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1InstancesAlertgroupsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/alertgroups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterToString(r.groupName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesAlertgroupsUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *AlertGroupsApiService
	groupName                           string
	instanceId                          string
	authorization                       *string
	v1InstancesAlertgroupsCreateRequest *V1InstancesAlertgroupsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesAlertgroupsUpdateRequest) Authorization(authorization string) ApiV1InstancesAlertgroupsUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesAlertgroupsUpdateRequest) V1InstancesAlertgroupsCreateRequest(v1InstancesAlertgroupsCreateRequest V1InstancesAlertgroupsCreateRequest) ApiV1InstancesAlertgroupsUpdateRequest {
	r.v1InstancesAlertgroupsCreateRequest = &v1InstancesAlertgroupsCreateRequest
	return r
}

func (r ApiV1InstancesAlertgroupsUpdateRequest) Execute() (*PutAlertGroup, *http.Response, error) {
	return r.ApiService.V1InstancesAlertgroupsUpdateExecute(r)
}

/*
V1InstancesAlertgroupsUpdate Method for V1InstancesAlertgroupsUpdate

update alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupName
	@param instanceId
	@return ApiV1InstancesAlertgroupsUpdateRequest
*/
func (a *AlertGroupsApiService) V1InstancesAlertgroupsUpdate(ctx context.Context, groupName string, instanceId string) ApiV1InstancesAlertgroupsUpdateRequest {
	return ApiV1InstancesAlertgroupsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		groupName:  groupName,
		instanceId: instanceId,
	}
}

// Execute executes the request
//
//	@return PutAlertGroup
func (a *AlertGroupsApiService) V1InstancesAlertgroupsUpdateExecute(r ApiV1InstancesAlertgroupsUpdateRequest) (*PutAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PutAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1InstancesAlertgroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/alertgroups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterToString(r.groupName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesAlertgroupsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesAlertgroupsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesAlertgroupsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	instanceId    string
	projectId     string
	authorization *string
	groupName     *[]string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest) Authorization(authorization string) ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest {
	r.authorization = &authorization
	return r
}

// Name of the groups that should be deleted
func (r ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest) GroupName(groupName []string) ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest {
	r.groupName = &groupName
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest) Execute() (*PostAlertGroup, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesAlertgroupsAllDeleteExecute(r)
}

/*
V1ProjectsInstancesAlertgroupsAllDelete Method for V1ProjectsInstancesAlertgroupsAllDelete

delete alert groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@param projectId
	@return ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest
*/
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsAllDelete(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest {
	return ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return PostAlertGroup
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsAllDeleteExecute(r ApiV1ProjectsInstancesAlertgroupsAllDeleteRequest) (*PostAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1ProjectsInstancesAlertgroupsAllDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.groupName == nil {
		return localVarReturnValue, nil, reportError("groupName is required and must be specified")
	}

	{
		t := *r.groupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("groupName", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("groupName", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesAlertgroupsCreateRequest struct {
	ctx                                 context.Context
	ApiService                          *AlertGroupsApiService
	instanceId                          string
	projectId                           string
	authorization                       *string
	v1InstancesAlertgroupsCreateRequest *V1InstancesAlertgroupsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesAlertgroupsCreateRequest) Authorization(authorization string) ApiV1ProjectsInstancesAlertgroupsCreateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsCreateRequest) V1InstancesAlertgroupsCreateRequest(v1InstancesAlertgroupsCreateRequest V1InstancesAlertgroupsCreateRequest) ApiV1ProjectsInstancesAlertgroupsCreateRequest {
	r.v1InstancesAlertgroupsCreateRequest = &v1InstancesAlertgroupsCreateRequest
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsCreateRequest) Execute() (*PostAlertGroup, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesAlertgroupsCreateExecute(r)
}

/*
V1ProjectsInstancesAlertgroupsCreate Method for V1ProjectsInstancesAlertgroupsCreate

create alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@param projectId
	@return ApiV1ProjectsInstancesAlertgroupsCreateRequest
*/
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsCreate(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesAlertgroupsCreateRequest {
	return ApiV1ProjectsInstancesAlertgroupsCreateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return PostAlertGroup
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsCreateExecute(r ApiV1ProjectsInstancesAlertgroupsCreateRequest) (*PostAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1ProjectsInstancesAlertgroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesAlertgroupsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesAlertgroupsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesAlertgroupsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesAlertgroupsDeleteRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	groupName     string
	instanceId    string
	projectId     string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesAlertgroupsDeleteRequest) Authorization(authorization string) ApiV1ProjectsInstancesAlertgroupsDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsDeleteRequest) Execute() (*DeleteAlertGroup, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesAlertgroupsDeleteExecute(r)
}

/*
V1ProjectsInstancesAlertgroupsDelete Method for V1ProjectsInstancesAlertgroupsDelete

delete alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupName
	@param instanceId
	@param projectId
	@return ApiV1ProjectsInstancesAlertgroupsDeleteRequest
*/
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsDelete(ctx context.Context, groupName string, instanceId string, projectId string) ApiV1ProjectsInstancesAlertgroupsDeleteRequest {
	return ApiV1ProjectsInstancesAlertgroupsDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		groupName:  groupName,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return DeleteAlertGroup
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsDeleteExecute(r ApiV1ProjectsInstancesAlertgroupsDeleteRequest) (*DeleteAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1ProjectsInstancesAlertgroupsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterToString(r.groupName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesAlertgroupsListRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	instanceId    string
	projectId     string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesAlertgroupsListRequest) Authorization(authorization string) ApiV1ProjectsInstancesAlertgroupsListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsListRequest) Execute() (*GetAllAlertGroups, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesAlertgroupsListExecute(r)
}

/*
V1ProjectsInstancesAlertgroupsList Method for V1ProjectsInstancesAlertgroupsList

get alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@param projectId
	@return ApiV1ProjectsInstancesAlertgroupsListRequest
*/
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsList(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesAlertgroupsListRequest {
	return ApiV1ProjectsInstancesAlertgroupsListRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return GetAllAlertGroups
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsListExecute(r ApiV1ProjectsInstancesAlertgroupsListRequest) (*GetAllAlertGroups, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAllAlertGroups
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1ProjectsInstancesAlertgroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *AlertGroupsApiService
	instanceId                          string
	projectId                           string
	authorization                       *string
	v1InstancesAlertgroupsCreateRequest *[]V1InstancesAlertgroupsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest) Authorization(authorization string) ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest) V1InstancesAlertgroupsCreateRequest(v1InstancesAlertgroupsCreateRequest []V1InstancesAlertgroupsCreateRequest) ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest {
	r.v1InstancesAlertgroupsCreateRequest = &v1InstancesAlertgroupsCreateRequest
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest) Execute() (*PostAlertGroup, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesAlertgroupsPartialUpdateExecute(r)
}

/*
V1ProjectsInstancesAlertgroupsPartialUpdate Method for V1ProjectsInstancesAlertgroupsPartialUpdate

patches alert groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceId
	@param projectId
	@return ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest
*/
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsPartialUpdate(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest {
	return ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return PostAlertGroup
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsPartialUpdateExecute(r ApiV1ProjectsInstancesAlertgroupsPartialUpdateRequest) (*PostAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1ProjectsInstancesAlertgroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/alertgroups"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesAlertgroupsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesAlertgroupsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesAlertgroupsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesAlertgroupsReadRequest struct {
	ctx           context.Context
	ApiService    *AlertGroupsApiService
	groupName     string
	instanceId    string
	projectId     string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesAlertgroupsReadRequest) Authorization(authorization string) ApiV1ProjectsInstancesAlertgroupsReadRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsReadRequest) Execute() (*GetAlertGroup, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesAlertgroupsReadExecute(r)
}

/*
V1ProjectsInstancesAlertgroupsRead Method for V1ProjectsInstancesAlertgroupsRead

get alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupName
	@param instanceId
	@param projectId
	@return ApiV1ProjectsInstancesAlertgroupsReadRequest
*/
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsRead(ctx context.Context, groupName string, instanceId string, projectId string) ApiV1ProjectsInstancesAlertgroupsReadRequest {
	return ApiV1ProjectsInstancesAlertgroupsReadRequest{
		ApiService: a,
		ctx:        ctx,
		groupName:  groupName,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return GetAlertGroup
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsReadExecute(r ApiV1ProjectsInstancesAlertgroupsReadRequest) (*GetAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1ProjectsInstancesAlertgroupsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterToString(r.groupName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesAlertgroupsUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *AlertGroupsApiService
	groupName                           string
	instanceId                          string
	projectId                           string
	authorization                       *string
	v1InstancesAlertgroupsCreateRequest *V1InstancesAlertgroupsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesAlertgroupsUpdateRequest) Authorization(authorization string) ApiV1ProjectsInstancesAlertgroupsUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsUpdateRequest) V1InstancesAlertgroupsCreateRequest(v1InstancesAlertgroupsCreateRequest V1InstancesAlertgroupsCreateRequest) ApiV1ProjectsInstancesAlertgroupsUpdateRequest {
	r.v1InstancesAlertgroupsCreateRequest = &v1InstancesAlertgroupsCreateRequest
	return r
}

func (r ApiV1ProjectsInstancesAlertgroupsUpdateRequest) Execute() (*PutAlertGroup, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesAlertgroupsUpdateExecute(r)
}

/*
V1ProjectsInstancesAlertgroupsUpdate Method for V1ProjectsInstancesAlertgroupsUpdate

update alert group config

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupName
	@param instanceId
	@param projectId
	@return ApiV1ProjectsInstancesAlertgroupsUpdateRequest
*/
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsUpdate(ctx context.Context, groupName string, instanceId string, projectId string) ApiV1ProjectsInstancesAlertgroupsUpdateRequest {
	return ApiV1ProjectsInstancesAlertgroupsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		groupName:  groupName,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//
//	@return PutAlertGroup
func (a *AlertGroupsApiService) V1ProjectsInstancesAlertgroupsUpdateExecute(r ApiV1ProjectsInstancesAlertgroupsUpdateRequest) (*PutAlertGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PutAlertGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlertGroupsApiService.V1ProjectsInstancesAlertgroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupName"+"}", url.PathEscape(parameterToString(r.groupName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesAlertgroupsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesAlertgroupsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesAlertgroupsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
