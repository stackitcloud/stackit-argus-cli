/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// V1InstancesAlertconfigsUpdateRequestRouteRoutesInner As in one level above
type V1InstancesAlertconfigsUpdateRequestRouteRoutesInner struct {
	// As in one level above
	Receiver *string `json:"receiver,omitempty"`
	// 
	GroupBy []string `json:"groupBy,omitempty"`
	// As in one level above
	GroupWait *string `json:"groupWait,omitempty"`
	// As in one level above
	GroupInterval *string `json:"groupInterval,omitempty"`
	// As in one level above
	RepeatInterval *string `json:"repeatInterval,omitempty"`
	// As in one level above
	Match map[string]interface{} `json:"match,omitempty"`
	// As in one level above
	MatchRe map[string]interface{} `json:"matchRe,omitempty"`
	// Another child routes
	Routes []map[string]interface{} `json:"routes,omitempty"`
}

// NewV1InstancesAlertconfigsUpdateRequestRouteRoutesInner instantiates a new V1InstancesAlertconfigsUpdateRequestRouteRoutesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1InstancesAlertconfigsUpdateRequestRouteRoutesInner() *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner {
	this := V1InstancesAlertconfigsUpdateRequestRouteRoutesInner{}
	return &this
}

// NewV1InstancesAlertconfigsUpdateRequestRouteRoutesInnerWithDefaults instantiates a new V1InstancesAlertconfigsUpdateRequestRouteRoutesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InstancesAlertconfigsUpdateRequestRouteRoutesInnerWithDefaults() *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner {
	this := V1InstancesAlertconfigsUpdateRequestRouteRoutesInner{}
	return &this
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetReceiver() string {
	if o == nil || o.Receiver == nil {
		var ret string
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetReceiverOk() (*string, bool) {
	if o == nil || o.Receiver == nil {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasReceiver() bool {
	if o != nil && o.Receiver != nil {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given string and assigns it to the Receiver field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetReceiver(v string) {
	o.Receiver = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetGroupBy() []string {
	if o == nil || o.GroupBy == nil {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetGroupByOk() ([]string, bool) {
	if o == nil || o.GroupBy == nil {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasGroupBy() bool {
	if o != nil && o.GroupBy != nil {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetGroupBy(v []string) {
	o.GroupBy = v
}

// GetGroupWait returns the GroupWait field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetGroupWait() string {
	if o == nil || o.GroupWait == nil {
		var ret string
		return ret
	}
	return *o.GroupWait
}

// GetGroupWaitOk returns a tuple with the GroupWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetGroupWaitOk() (*string, bool) {
	if o == nil || o.GroupWait == nil {
		return nil, false
	}
	return o.GroupWait, true
}

// HasGroupWait returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasGroupWait() bool {
	if o != nil && o.GroupWait != nil {
		return true
	}

	return false
}

// SetGroupWait gets a reference to the given string and assigns it to the GroupWait field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetGroupWait(v string) {
	o.GroupWait = &v
}

// GetGroupInterval returns the GroupInterval field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetGroupInterval() string {
	if o == nil || o.GroupInterval == nil {
		var ret string
		return ret
	}
	return *o.GroupInterval
}

// GetGroupIntervalOk returns a tuple with the GroupInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetGroupIntervalOk() (*string, bool) {
	if o == nil || o.GroupInterval == nil {
		return nil, false
	}
	return o.GroupInterval, true
}

// HasGroupInterval returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasGroupInterval() bool {
	if o != nil && o.GroupInterval != nil {
		return true
	}

	return false
}

// SetGroupInterval gets a reference to the given string and assigns it to the GroupInterval field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetGroupInterval(v string) {
	o.GroupInterval = &v
}

// GetRepeatInterval returns the RepeatInterval field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetRepeatInterval() string {
	if o == nil || o.RepeatInterval == nil {
		var ret string
		return ret
	}
	return *o.RepeatInterval
}

// GetRepeatIntervalOk returns a tuple with the RepeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetRepeatIntervalOk() (*string, bool) {
	if o == nil || o.RepeatInterval == nil {
		return nil, false
	}
	return o.RepeatInterval, true
}

// HasRepeatInterval returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasRepeatInterval() bool {
	if o != nil && o.RepeatInterval != nil {
		return true
	}

	return false
}

// SetRepeatInterval gets a reference to the given string and assigns it to the RepeatInterval field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetRepeatInterval(v string) {
	o.RepeatInterval = &v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetMatch() map[string]interface{} {
	if o == nil || o.Match == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetMatchOk() (map[string]interface{}, bool) {
	if o == nil || o.Match == nil {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasMatch() bool {
	if o != nil && o.Match != nil {
		return true
	}

	return false
}

// SetMatch gets a reference to the given map[string]interface{} and assigns it to the Match field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetMatch(v map[string]interface{}) {
	o.Match = v
}

// GetMatchRe returns the MatchRe field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetMatchRe() map[string]interface{} {
	if o == nil || o.MatchRe == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchRe
}

// GetMatchReOk returns a tuple with the MatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetMatchReOk() (map[string]interface{}, bool) {
	if o == nil || o.MatchRe == nil {
		return nil, false
	}
	return o.MatchRe, true
}

// HasMatchRe returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasMatchRe() bool {
	if o != nil && o.MatchRe != nil {
		return true
	}

	return false
}

// SetMatchRe gets a reference to the given map[string]interface{} and assigns it to the MatchRe field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetMatchRe(v map[string]interface{}) {
	o.MatchRe = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetRoutes() []map[string]interface{} {
	if o == nil || o.Routes == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) GetRoutesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Routes == nil {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) HasRoutes() bool {
	if o != nil && o.Routes != nil {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []map[string]interface{} and assigns it to the Routes field.
func (o *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) SetRoutes(v []map[string]interface{}) {
	o.Routes = v
}

func (o V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Receiver != nil {
		toSerialize["receiver"] = o.Receiver
	}
	if o.GroupBy != nil {
		toSerialize["groupBy"] = o.GroupBy
	}
	if o.GroupWait != nil {
		toSerialize["groupWait"] = o.GroupWait
	}
	if o.GroupInterval != nil {
		toSerialize["groupInterval"] = o.GroupInterval
	}
	if o.RepeatInterval != nil {
		toSerialize["repeatInterval"] = o.RepeatInterval
	}
	if o.Match != nil {
		toSerialize["match"] = o.Match
	}
	if o.MatchRe != nil {
		toSerialize["matchRe"] = o.MatchRe
	}
	if o.Routes != nil {
		toSerialize["routes"] = o.Routes
	}
	return json.Marshal(toSerialize)
}

type NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner struct {
	value *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner
	isSet bool
}

func (v NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner) Get() *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner {
	return v.value
}

func (v *NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner) Set(val *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner(val *V1InstancesAlertconfigsUpdateRequestRouteRoutesInner) *NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner {
	return &NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner{value: val, isSet: true}
}

func (v NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InstancesAlertconfigsUpdateRequestRouteRoutesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


