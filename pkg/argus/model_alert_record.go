/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// AlertRecord struct for AlertRecord
type AlertRecord struct {
	Record string `json:"record"`
	Expr string `json:"expr"`
	Labels *map[string]string `json:"labels,omitempty"`
}

// NewAlertRecord instantiates a new AlertRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRecord(record string, expr string) *AlertRecord {
	this := AlertRecord{}
	this.Record = record
	this.Expr = expr
	return &this
}

// NewAlertRecordWithDefaults instantiates a new AlertRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRecordWithDefaults() *AlertRecord {
	this := AlertRecord{}
	return &this
}

// GetRecord returns the Record field value
func (o *AlertRecord) GetRecord() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Record
}

// GetRecordOk returns a tuple with the Record field value
// and a boolean to check if the value has been set.
func (o *AlertRecord) GetRecordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Record, true
}

// SetRecord sets field value
func (o *AlertRecord) SetRecord(v string) {
	o.Record = v
}

// GetExpr returns the Expr field value
func (o *AlertRecord) GetExpr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expr
}

// GetExprOk returns a tuple with the Expr field value
// and a boolean to check if the value has been set.
func (o *AlertRecord) GetExprOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expr, true
}

// SetExpr sets field value
func (o *AlertRecord) SetExpr(v string) {
	o.Expr = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AlertRecord) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRecord) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AlertRecord) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *AlertRecord) SetLabels(v map[string]string) {
	o.Labels = &v
}

func (o AlertRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["record"] = o.Record
	}
	if true {
		toSerialize["expr"] = o.Expr
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableAlertRecord struct {
	value *AlertRecord
	isSet bool
}

func (v NullableAlertRecord) Get() *AlertRecord {
	return v.value
}

func (v *NullableAlertRecord) Set(val *AlertRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRecord(val *AlertRecord) *NullableAlertRecord {
	return &NullableAlertRecord{value: val, isSet: true}
}

func (v NullableAlertRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


