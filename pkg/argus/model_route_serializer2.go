/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// RouteSerializer2 struct for RouteSerializer2
type RouteSerializer2 struct {
	Receiver string `json:"receiver"`
	GroupBy []string `json:"groupBy,omitempty"`
	GroupWait *string `json:"groupWait,omitempty"`
	GroupInterval *string `json:"groupInterval,omitempty"`
	RepeatInterval *string `json:"repeatInterval,omitempty"`
	Match *map[string]string `json:"match,omitempty"`
	MatchRe *map[string]string `json:"matchRe,omitempty"`
	Matchers []string `json:"matchers,omitempty"`
	Routes []map[string]string `json:"routes,omitempty"`
	Continue *bool `json:"continue,omitempty"`
}

// NewRouteSerializer2 instantiates a new RouteSerializer2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteSerializer2(receiver string) *RouteSerializer2 {
	this := RouteSerializer2{}
	this.Receiver = receiver
	var groupWait string = "30s"
	this.GroupWait = &groupWait
	var groupInterval string = "5m"
	this.GroupInterval = &groupInterval
	var repeatInterval string = "4h"
	this.RepeatInterval = &repeatInterval
	var continue_ bool = false
	this.Continue = &continue_
	return &this
}

// NewRouteSerializer2WithDefaults instantiates a new RouteSerializer2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteSerializer2WithDefaults() *RouteSerializer2 {
	this := RouteSerializer2{}
	var groupWait string = "30s"
	this.GroupWait = &groupWait
	var groupInterval string = "5m"
	this.GroupInterval = &groupInterval
	var repeatInterval string = "4h"
	this.RepeatInterval = &repeatInterval
	var continue_ bool = false
	this.Continue = &continue_
	return &this
}

// GetReceiver returns the Receiver field value
func (o *RouteSerializer2) GetReceiver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetReceiverOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receiver, true
}

// SetReceiver sets field value
func (o *RouteSerializer2) SetReceiver(v string) {
	o.Receiver = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *RouteSerializer2) GetGroupBy() []string {
	if o == nil || o.GroupBy == nil {
		var ret []string
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetGroupByOk() ([]string, bool) {
	if o == nil || o.GroupBy == nil {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *RouteSerializer2) HasGroupBy() bool {
	if o != nil && o.GroupBy != nil {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []string and assigns it to the GroupBy field.
func (o *RouteSerializer2) SetGroupBy(v []string) {
	o.GroupBy = v
}

// GetGroupWait returns the GroupWait field value if set, zero value otherwise.
func (o *RouteSerializer2) GetGroupWait() string {
	if o == nil || o.GroupWait == nil {
		var ret string
		return ret
	}
	return *o.GroupWait
}

// GetGroupWaitOk returns a tuple with the GroupWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetGroupWaitOk() (*string, bool) {
	if o == nil || o.GroupWait == nil {
		return nil, false
	}
	return o.GroupWait, true
}

// HasGroupWait returns a boolean if a field has been set.
func (o *RouteSerializer2) HasGroupWait() bool {
	if o != nil && o.GroupWait != nil {
		return true
	}

	return false
}

// SetGroupWait gets a reference to the given string and assigns it to the GroupWait field.
func (o *RouteSerializer2) SetGroupWait(v string) {
	o.GroupWait = &v
}

// GetGroupInterval returns the GroupInterval field value if set, zero value otherwise.
func (o *RouteSerializer2) GetGroupInterval() string {
	if o == nil || o.GroupInterval == nil {
		var ret string
		return ret
	}
	return *o.GroupInterval
}

// GetGroupIntervalOk returns a tuple with the GroupInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetGroupIntervalOk() (*string, bool) {
	if o == nil || o.GroupInterval == nil {
		return nil, false
	}
	return o.GroupInterval, true
}

// HasGroupInterval returns a boolean if a field has been set.
func (o *RouteSerializer2) HasGroupInterval() bool {
	if o != nil && o.GroupInterval != nil {
		return true
	}

	return false
}

// SetGroupInterval gets a reference to the given string and assigns it to the GroupInterval field.
func (o *RouteSerializer2) SetGroupInterval(v string) {
	o.GroupInterval = &v
}

// GetRepeatInterval returns the RepeatInterval field value if set, zero value otherwise.
func (o *RouteSerializer2) GetRepeatInterval() string {
	if o == nil || o.RepeatInterval == nil {
		var ret string
		return ret
	}
	return *o.RepeatInterval
}

// GetRepeatIntervalOk returns a tuple with the RepeatInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetRepeatIntervalOk() (*string, bool) {
	if o == nil || o.RepeatInterval == nil {
		return nil, false
	}
	return o.RepeatInterval, true
}

// HasRepeatInterval returns a boolean if a field has been set.
func (o *RouteSerializer2) HasRepeatInterval() bool {
	if o != nil && o.RepeatInterval != nil {
		return true
	}

	return false
}

// SetRepeatInterval gets a reference to the given string and assigns it to the RepeatInterval field.
func (o *RouteSerializer2) SetRepeatInterval(v string) {
	o.RepeatInterval = &v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *RouteSerializer2) GetMatch() map[string]string {
	if o == nil || o.Match == nil {
		var ret map[string]string
		return ret
	}
	return *o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetMatchOk() (*map[string]string, bool) {
	if o == nil || o.Match == nil {
		return nil, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *RouteSerializer2) HasMatch() bool {
	if o != nil && o.Match != nil {
		return true
	}

	return false
}

// SetMatch gets a reference to the given map[string]string and assigns it to the Match field.
func (o *RouteSerializer2) SetMatch(v map[string]string) {
	o.Match = &v
}

// GetMatchRe returns the MatchRe field value if set, zero value otherwise.
func (o *RouteSerializer2) GetMatchRe() map[string]string {
	if o == nil || o.MatchRe == nil {
		var ret map[string]string
		return ret
	}
	return *o.MatchRe
}

// GetMatchReOk returns a tuple with the MatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetMatchReOk() (*map[string]string, bool) {
	if o == nil || o.MatchRe == nil {
		return nil, false
	}
	return o.MatchRe, true
}

// HasMatchRe returns a boolean if a field has been set.
func (o *RouteSerializer2) HasMatchRe() bool {
	if o != nil && o.MatchRe != nil {
		return true
	}

	return false
}

// SetMatchRe gets a reference to the given map[string]string and assigns it to the MatchRe field.
func (o *RouteSerializer2) SetMatchRe(v map[string]string) {
	o.MatchRe = &v
}

// GetMatchers returns the Matchers field value if set, zero value otherwise.
func (o *RouteSerializer2) GetMatchers() []string {
	if o == nil || o.Matchers == nil {
		var ret []string
		return ret
	}
	return o.Matchers
}

// GetMatchersOk returns a tuple with the Matchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetMatchersOk() ([]string, bool) {
	if o == nil || o.Matchers == nil {
		return nil, false
	}
	return o.Matchers, true
}

// HasMatchers returns a boolean if a field has been set.
func (o *RouteSerializer2) HasMatchers() bool {
	if o != nil && o.Matchers != nil {
		return true
	}

	return false
}

// SetMatchers gets a reference to the given []string and assigns it to the Matchers field.
func (o *RouteSerializer2) SetMatchers(v []string) {
	o.Matchers = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *RouteSerializer2) GetRoutes() []map[string]string {
	if o == nil || o.Routes == nil {
		var ret []map[string]string
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetRoutesOk() ([]map[string]string, bool) {
	if o == nil || o.Routes == nil {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *RouteSerializer2) HasRoutes() bool {
	if o != nil && o.Routes != nil {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []map[string]string and assigns it to the Routes field.
func (o *RouteSerializer2) SetRoutes(v []map[string]string) {
	o.Routes = v
}

// GetContinue returns the Continue field value if set, zero value otherwise.
func (o *RouteSerializer2) GetContinue() bool {
	if o == nil || o.Continue == nil {
		var ret bool
		return ret
	}
	return *o.Continue
}

// GetContinueOk returns a tuple with the Continue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteSerializer2) GetContinueOk() (*bool, bool) {
	if o == nil || o.Continue == nil {
		return nil, false
	}
	return o.Continue, true
}

// HasContinue returns a boolean if a field has been set.
func (o *RouteSerializer2) HasContinue() bool {
	if o != nil && o.Continue != nil {
		return true
	}

	return false
}

// SetContinue gets a reference to the given bool and assigns it to the Continue field.
func (o *RouteSerializer2) SetContinue(v bool) {
	o.Continue = &v
}

func (o RouteSerializer2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["receiver"] = o.Receiver
	}
	if o.GroupBy != nil {
		toSerialize["groupBy"] = o.GroupBy
	}
	if o.GroupWait != nil {
		toSerialize["groupWait"] = o.GroupWait
	}
	if o.GroupInterval != nil {
		toSerialize["groupInterval"] = o.GroupInterval
	}
	if o.RepeatInterval != nil {
		toSerialize["repeatInterval"] = o.RepeatInterval
	}
	if o.Match != nil {
		toSerialize["match"] = o.Match
	}
	if o.MatchRe != nil {
		toSerialize["matchRe"] = o.MatchRe
	}
	if o.Matchers != nil {
		toSerialize["matchers"] = o.Matchers
	}
	if o.Routes != nil {
		toSerialize["routes"] = o.Routes
	}
	if o.Continue != nil {
		toSerialize["continue"] = o.Continue
	}
	return json.Marshal(toSerialize)
}

type NullableRouteSerializer2 struct {
	value *RouteSerializer2
	isSet bool
}

func (v NullableRouteSerializer2) Get() *RouteSerializer2 {
	return v.value
}

func (v *NullableRouteSerializer2) Set(val *RouteSerializer2) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteSerializer2) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteSerializer2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteSerializer2(val *RouteSerializer2) *NullableRouteSerializer2 {
	return &NullableRouteSerializer2{value: val, isSet: true}
}

func (v NullableRouteSerializer2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteSerializer2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


