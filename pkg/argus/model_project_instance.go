/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// ProjectInstance struct for ProjectInstance
type ProjectInstance struct {
	Instance string `json:"instance"`
	Name *string `json:"name,omitempty"`
}

// NewProjectInstance instantiates a new ProjectInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectInstance(instance string) *ProjectInstance {
	this := ProjectInstance{}
	this.Instance = instance
	return &this
}

// NewProjectInstanceWithDefaults instantiates a new ProjectInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectInstanceWithDefaults() *ProjectInstance {
	this := ProjectInstance{}
	return &this
}

// GetInstance returns the Instance field value
func (o *ProjectInstance) GetInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *ProjectInstance) GetInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *ProjectInstance) SetInstance(v string) {
	o.Instance = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectInstance) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInstance) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectInstance) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectInstance) SetName(v string) {
	o.Name = &v
}

func (o ProjectInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["instance"] = o.Instance
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableProjectInstance struct {
	value *ProjectInstance
	isSet bool
}

func (v NullableProjectInstance) Get() *ProjectInstance {
	return v.value
}

func (v *NullableProjectInstance) Set(val *ProjectInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectInstance(val *ProjectInstance) *NullableProjectInstance {
	return &NullableProjectInstance{value: val, isSet: true}
}

func (v NullableProjectInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


