/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// V1InstancesAlertconfigsUpdateRequestInhibitRules A list of inhibition rules.
type V1InstancesAlertconfigsUpdateRequestInhibitRules struct {
	// map of key:value. Matchers for which one or more alerts have to exist for the inhibition to take effect.
	SourceMatch map[string]interface{} `json:"sourceMatch,omitempty"`
	// map of key:value. Regex match
	SourceMatchRe map[string]interface{} `json:"sourceMatchRe,omitempty"`
	// map of key:value. Matchers that have to be fulfilled in the alerts to be muted.
	TargetMatch map[string]interface{} `json:"targetMatch,omitempty"`
	// map of key:value. Matchers that have to be fulfilled in the alerts to be muted. Regex.
	TargetMatchRe map[string]interface{} `json:"targetMatchRe,omitempty"`
	//
	Equal []string `json:"equal,omitempty"`
}

// NewV1InstancesAlertconfigsUpdateRequestInhibitRules instantiates a new V1InstancesAlertconfigsUpdateRequestInhibitRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1InstancesAlertconfigsUpdateRequestInhibitRules() *V1InstancesAlertconfigsUpdateRequestInhibitRules {
	this := V1InstancesAlertconfigsUpdateRequestInhibitRules{}
	return &this
}

// NewV1InstancesAlertconfigsUpdateRequestInhibitRulesWithDefaults instantiates a new V1InstancesAlertconfigsUpdateRequestInhibitRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InstancesAlertconfigsUpdateRequestInhibitRulesWithDefaults() *V1InstancesAlertconfigsUpdateRequestInhibitRules {
	this := V1InstancesAlertconfigsUpdateRequestInhibitRules{}
	return &this
}

// GetSourceMatch returns the SourceMatch field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetSourceMatch() map[string]interface{} {
	if o == nil || o.SourceMatch == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceMatch
}

// GetSourceMatchOk returns a tuple with the SourceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetSourceMatchOk() (map[string]interface{}, bool) {
	if o == nil || o.SourceMatch == nil {
		return nil, false
	}
	return o.SourceMatch, true
}

// HasSourceMatch returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) HasSourceMatch() bool {
	if o != nil && o.SourceMatch != nil {
		return true
	}

	return false
}

// SetSourceMatch gets a reference to the given map[string]interface{} and assigns it to the SourceMatch field.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) SetSourceMatch(v map[string]interface{}) {
	o.SourceMatch = v
}

// GetSourceMatchRe returns the SourceMatchRe field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetSourceMatchRe() map[string]interface{} {
	if o == nil || o.SourceMatchRe == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceMatchRe
}

// GetSourceMatchReOk returns a tuple with the SourceMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetSourceMatchReOk() (map[string]interface{}, bool) {
	if o == nil || o.SourceMatchRe == nil {
		return nil, false
	}
	return o.SourceMatchRe, true
}

// HasSourceMatchRe returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) HasSourceMatchRe() bool {
	if o != nil && o.SourceMatchRe != nil {
		return true
	}

	return false
}

// SetSourceMatchRe gets a reference to the given map[string]interface{} and assigns it to the SourceMatchRe field.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) SetSourceMatchRe(v map[string]interface{}) {
	o.SourceMatchRe = v
}

// GetTargetMatch returns the TargetMatch field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetTargetMatch() map[string]interface{} {
	if o == nil || o.TargetMatch == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TargetMatch
}

// GetTargetMatchOk returns a tuple with the TargetMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetTargetMatchOk() (map[string]interface{}, bool) {
	if o == nil || o.TargetMatch == nil {
		return nil, false
	}
	return o.TargetMatch, true
}

// HasTargetMatch returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) HasTargetMatch() bool {
	if o != nil && o.TargetMatch != nil {
		return true
	}

	return false
}

// SetTargetMatch gets a reference to the given map[string]interface{} and assigns it to the TargetMatch field.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) SetTargetMatch(v map[string]interface{}) {
	o.TargetMatch = v
}

// GetTargetMatchRe returns the TargetMatchRe field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetTargetMatchRe() map[string]interface{} {
	if o == nil || o.TargetMatchRe == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TargetMatchRe
}

// GetTargetMatchReOk returns a tuple with the TargetMatchRe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetTargetMatchReOk() (map[string]interface{}, bool) {
	if o == nil || o.TargetMatchRe == nil {
		return nil, false
	}
	return o.TargetMatchRe, true
}

// HasTargetMatchRe returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) HasTargetMatchRe() bool {
	if o != nil && o.TargetMatchRe != nil {
		return true
	}

	return false
}

// SetTargetMatchRe gets a reference to the given map[string]interface{} and assigns it to the TargetMatchRe field.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) SetTargetMatchRe(v map[string]interface{}) {
	o.TargetMatchRe = v
}

// GetEqual returns the Equal field value if set, zero value otherwise.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetEqual() []string {
	if o == nil || o.Equal == nil {
		var ret []string
		return ret
	}
	return o.Equal
}

// GetEqualOk returns a tuple with the Equal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) GetEqualOk() ([]string, bool) {
	if o == nil || o.Equal == nil {
		return nil, false
	}
	return o.Equal, true
}

// HasEqual returns a boolean if a field has been set.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) HasEqual() bool {
	if o != nil && o.Equal != nil {
		return true
	}

	return false
}

// SetEqual gets a reference to the given []string and assigns it to the Equal field.
func (o *V1InstancesAlertconfigsUpdateRequestInhibitRules) SetEqual(v []string) {
	o.Equal = v
}

func (o V1InstancesAlertconfigsUpdateRequestInhibitRules) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceMatch != nil {
		toSerialize["sourceMatch"] = o.SourceMatch
	}
	if o.SourceMatchRe != nil {
		toSerialize["sourceMatchRe"] = o.SourceMatchRe
	}
	if o.TargetMatch != nil {
		toSerialize["targetMatch"] = o.TargetMatch
	}
	if o.TargetMatchRe != nil {
		toSerialize["targetMatchRe"] = o.TargetMatchRe
	}
	if o.Equal != nil {
		toSerialize["equal"] = o.Equal
	}
	return json.Marshal(toSerialize)
}

type NullableV1InstancesAlertconfigsUpdateRequestInhibitRules struct {
	value *V1InstancesAlertconfigsUpdateRequestInhibitRules
	isSet bool
}

func (v NullableV1InstancesAlertconfigsUpdateRequestInhibitRules) Get() *V1InstancesAlertconfigsUpdateRequestInhibitRules {
	return v.value
}

func (v *NullableV1InstancesAlertconfigsUpdateRequestInhibitRules) Set(val *V1InstancesAlertconfigsUpdateRequestInhibitRules) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InstancesAlertconfigsUpdateRequestInhibitRules) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InstancesAlertconfigsUpdateRequestInhibitRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InstancesAlertconfigsUpdateRequestInhibitRules(val *V1InstancesAlertconfigsUpdateRequestInhibitRules) *NullableV1InstancesAlertconfigsUpdateRequestInhibitRules {
	return &NullableV1InstancesAlertconfigsUpdateRequestInhibitRules{value: val, isSet: true}
}

func (v NullableV1InstancesAlertconfigsUpdateRequestInhibitRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InstancesAlertconfigsUpdateRequestInhibitRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
