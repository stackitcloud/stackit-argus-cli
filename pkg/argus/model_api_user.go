/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// ApiUser struct for ApiUser
type ApiUser struct {
	Message string `json:"message"`
	ApiUsers []string `json:"apiUsers"`
}

// NewApiUser instantiates a new ApiUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiUser(message string, apiUsers []string) *ApiUser {
	this := ApiUser{}
	this.Message = message
	this.ApiUsers = apiUsers
	return &this
}

// NewApiUserWithDefaults instantiates a new ApiUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiUserWithDefaults() *ApiUser {
	this := ApiUser{}
	return &this
}

// GetMessage returns the Message field value
func (o *ApiUser) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ApiUser) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ApiUser) SetMessage(v string) {
	o.Message = v
}

// GetApiUsers returns the ApiUsers field value
func (o *ApiUser) GetApiUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ApiUsers
}

// GetApiUsersOk returns a tuple with the ApiUsers field value
// and a boolean to check if the value has been set.
func (o *ApiUser) GetApiUsersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiUsers, true
}

// SetApiUsers sets field value
func (o *ApiUser) SetApiUsers(v []string) {
	o.ApiUsers = v
}

func (o ApiUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["apiUsers"] = o.ApiUsers
	}
	return json.Marshal(toSerialize)
}

type NullableApiUser struct {
	value *ApiUser
	isSet bool
}

func (v NullableApiUser) Get() *ApiUser {
	return v.value
}

func (v *NullableApiUser) Set(val *ApiUser) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUser) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUser(val *ApiUser) *NullableApiUser {
	return &NullableApiUser{value: val, isSet: true}
}

func (v NullableApiUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


