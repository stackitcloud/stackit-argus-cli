/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// MetricsRelabelConfig struct for MetricsRelabelConfig
type MetricsRelabelConfig struct {
	SourceLabels []string `json:"sourceLabels,omitempty"`
	Separator    *string  `json:"separator,omitempty"`
	TargetLabel  *string  `json:"targetLabel,omitempty"`
	Regex        *string  `json:"regex,omitempty"`
	Modulus      *int32   `json:"modulus,omitempty"`
	Replacement  *string  `json:"replacement,omitempty"`
	Action       *string  `json:"action,omitempty"`
}

// NewMetricsRelabelConfig instantiates a new MetricsRelabelConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsRelabelConfig() *MetricsRelabelConfig {
	this := MetricsRelabelConfig{}
	var separator string = ";"
	this.Separator = &separator
	var regex string = ".*"
	this.Regex = &regex
	var replacement string = "$1"
	this.Replacement = &replacement
	var action string = "replace"
	this.Action = &action
	return &this
}

// NewMetricsRelabelConfigWithDefaults instantiates a new MetricsRelabelConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsRelabelConfigWithDefaults() *MetricsRelabelConfig {
	this := MetricsRelabelConfig{}
	var separator string = ";"
	this.Separator = &separator
	var regex string = ".*"
	this.Regex = &regex
	var replacement string = "$1"
	this.Replacement = &replacement
	var action string = "replace"
	this.Action = &action
	return &this
}

// GetSourceLabels returns the SourceLabels field value if set, zero value otherwise.
func (o *MetricsRelabelConfig) GetSourceLabels() []string {
	if o == nil || o.SourceLabels == nil {
		var ret []string
		return ret
	}
	return o.SourceLabels
}

// GetSourceLabelsOk returns a tuple with the SourceLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsRelabelConfig) GetSourceLabelsOk() ([]string, bool) {
	if o == nil || o.SourceLabels == nil {
		return nil, false
	}
	return o.SourceLabels, true
}

// HasSourceLabels returns a boolean if a field has been set.
func (o *MetricsRelabelConfig) HasSourceLabels() bool {
	if o != nil && o.SourceLabels != nil {
		return true
	}

	return false
}

// SetSourceLabels gets a reference to the given []string and assigns it to the SourceLabels field.
func (o *MetricsRelabelConfig) SetSourceLabels(v []string) {
	o.SourceLabels = v
}

// GetSeparator returns the Separator field value if set, zero value otherwise.
func (o *MetricsRelabelConfig) GetSeparator() string {
	if o == nil || o.Separator == nil {
		var ret string
		return ret
	}
	return *o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsRelabelConfig) GetSeparatorOk() (*string, bool) {
	if o == nil || o.Separator == nil {
		return nil, false
	}
	return o.Separator, true
}

// HasSeparator returns a boolean if a field has been set.
func (o *MetricsRelabelConfig) HasSeparator() bool {
	if o != nil && o.Separator != nil {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given string and assigns it to the Separator field.
func (o *MetricsRelabelConfig) SetSeparator(v string) {
	o.Separator = &v
}

// GetTargetLabel returns the TargetLabel field value if set, zero value otherwise.
func (o *MetricsRelabelConfig) GetTargetLabel() string {
	if o == nil || o.TargetLabel == nil {
		var ret string
		return ret
	}
	return *o.TargetLabel
}

// GetTargetLabelOk returns a tuple with the TargetLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsRelabelConfig) GetTargetLabelOk() (*string, bool) {
	if o == nil || o.TargetLabel == nil {
		return nil, false
	}
	return o.TargetLabel, true
}

// HasTargetLabel returns a boolean if a field has been set.
func (o *MetricsRelabelConfig) HasTargetLabel() bool {
	if o != nil && o.TargetLabel != nil {
		return true
	}

	return false
}

// SetTargetLabel gets a reference to the given string and assigns it to the TargetLabel field.
func (o *MetricsRelabelConfig) SetTargetLabel(v string) {
	o.TargetLabel = &v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *MetricsRelabelConfig) GetRegex() string {
	if o == nil || o.Regex == nil {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsRelabelConfig) GetRegexOk() (*string, bool) {
	if o == nil || o.Regex == nil {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *MetricsRelabelConfig) HasRegex() bool {
	if o != nil && o.Regex != nil {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *MetricsRelabelConfig) SetRegex(v string) {
	o.Regex = &v
}

// GetModulus returns the Modulus field value if set, zero value otherwise.
func (o *MetricsRelabelConfig) GetModulus() int32 {
	if o == nil || o.Modulus == nil {
		var ret int32
		return ret
	}
	return *o.Modulus
}

// GetModulusOk returns a tuple with the Modulus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsRelabelConfig) GetModulusOk() (*int32, bool) {
	if o == nil || o.Modulus == nil {
		return nil, false
	}
	return o.Modulus, true
}

// HasModulus returns a boolean if a field has been set.
func (o *MetricsRelabelConfig) HasModulus() bool {
	if o != nil && o.Modulus != nil {
		return true
	}

	return false
}

// SetModulus gets a reference to the given int32 and assigns it to the Modulus field.
func (o *MetricsRelabelConfig) SetModulus(v int32) {
	o.Modulus = &v
}

// GetReplacement returns the Replacement field value if set, zero value otherwise.
func (o *MetricsRelabelConfig) GetReplacement() string {
	if o == nil || o.Replacement == nil {
		var ret string
		return ret
	}
	return *o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsRelabelConfig) GetReplacementOk() (*string, bool) {
	if o == nil || o.Replacement == nil {
		return nil, false
	}
	return o.Replacement, true
}

// HasReplacement returns a boolean if a field has been set.
func (o *MetricsRelabelConfig) HasReplacement() bool {
	if o != nil && o.Replacement != nil {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given string and assigns it to the Replacement field.
func (o *MetricsRelabelConfig) SetReplacement(v string) {
	o.Replacement = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *MetricsRelabelConfig) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsRelabelConfig) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *MetricsRelabelConfig) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *MetricsRelabelConfig) SetAction(v string) {
	o.Action = &v
}

func (o MetricsRelabelConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceLabels != nil {
		toSerialize["sourceLabels"] = o.SourceLabels
	}
	if o.Separator != nil {
		toSerialize["separator"] = o.Separator
	}
	if o.TargetLabel != nil {
		toSerialize["targetLabel"] = o.TargetLabel
	}
	if o.Regex != nil {
		toSerialize["regex"] = o.Regex
	}
	if o.Modulus != nil {
		toSerialize["modulus"] = o.Modulus
	}
	if o.Replacement != nil {
		toSerialize["replacement"] = o.Replacement
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	return json.Marshal(toSerialize)
}

type NullableMetricsRelabelConfig struct {
	value *MetricsRelabelConfig
	isSet bool
}

func (v NullableMetricsRelabelConfig) Get() *MetricsRelabelConfig {
	return v.value
}

func (v *NullableMetricsRelabelConfig) Set(val *MetricsRelabelConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsRelabelConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsRelabelConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsRelabelConfig(val *MetricsRelabelConfig) *NullableMetricsRelabelConfig {
	return &NullableMetricsRelabelConfig{value: val, isSet: true}
}

func (v NullableMetricsRelabelConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsRelabelConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
