/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// V1InstancesAlertgroupsAlertrulesUpdateRequest Alert rule. `Additional Validators:` * total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.
type V1InstancesAlertgroupsAlertrulesUpdateRequest struct {
	// The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
	Expr string `json:"expr"`
	// Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending. `Additional Validators:` * must be a valid time string
	For *string `json:"for,omitempty"`
	// map of key:value. Labels to add or overwrite for each alert. `Additional Validators:` * should not contain more than 5 keys * each key and value should not be longer than 200 characters
	Labels map[string]interface{} `json:"labels,omitempty"`
	// map of key:value. Annotations to add to each alert. `Additional Validators:` * should not contain more than 5 keys * each key and value should not be longer than 200 characters
	Annotations map[string]interface{} `json:"annotations,omitempty"`
}

// NewV1InstancesAlertgroupsAlertrulesUpdateRequest instantiates a new V1InstancesAlertgroupsAlertrulesUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1InstancesAlertgroupsAlertrulesUpdateRequest(expr string) *V1InstancesAlertgroupsAlertrulesUpdateRequest {
	this := V1InstancesAlertgroupsAlertrulesUpdateRequest{}
	this.Expr = expr
	var for_ string = "0s"
	this.For = &for_
	return &this
}

// NewV1InstancesAlertgroupsAlertrulesUpdateRequestWithDefaults instantiates a new V1InstancesAlertgroupsAlertrulesUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InstancesAlertgroupsAlertrulesUpdateRequestWithDefaults() *V1InstancesAlertgroupsAlertrulesUpdateRequest {
	this := V1InstancesAlertgroupsAlertrulesUpdateRequest{}
	var for_ string = "0s"
	this.For = &for_
	return &this
}

// GetExpr returns the Expr field value
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetExpr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expr
}

// GetExprOk returns a tuple with the Expr field value
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetExprOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expr, true
}

// SetExpr sets field value
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) SetExpr(v string) {
	o.Expr = v
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetFor() string {
	if o == nil || o.For == nil {
		var ret string
		return ret
	}
	return *o.For
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetForOk() (*string, bool) {
	if o == nil || o.For == nil {
		return nil, false
	}
	return o.For, true
}

// HasFor returns a boolean if a field has been set.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) HasFor() bool {
	if o != nil && o.For != nil {
		return true
	}

	return false
}

// SetFor gets a reference to the given string and assigns it to the For field.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) SetFor(v string) {
	o.For = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetLabels() map[string]interface{} {
	if o == nil || o.Labels == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetLabelsOk() (map[string]interface{}, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) SetLabels(v map[string]interface{}) {
	o.Labels = v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetAnnotations() map[string]interface{} {
	if o == nil || o.Annotations == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) GetAnnotationsOk() (map[string]interface{}, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]interface{} and assigns it to the Annotations field.
func (o *V1InstancesAlertgroupsAlertrulesUpdateRequest) SetAnnotations(v map[string]interface{}) {
	o.Annotations = v
}

func (o V1InstancesAlertgroupsAlertrulesUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["expr"] = o.Expr
	}
	if o.For != nil {
		toSerialize["for"] = o.For
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableV1InstancesAlertgroupsAlertrulesUpdateRequest struct {
	value *V1InstancesAlertgroupsAlertrulesUpdateRequest
	isSet bool
}

func (v NullableV1InstancesAlertgroupsAlertrulesUpdateRequest) Get() *V1InstancesAlertgroupsAlertrulesUpdateRequest {
	return v.value
}

func (v *NullableV1InstancesAlertgroupsAlertrulesUpdateRequest) Set(val *V1InstancesAlertgroupsAlertrulesUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InstancesAlertgroupsAlertrulesUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InstancesAlertgroupsAlertrulesUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InstancesAlertgroupsAlertrulesUpdateRequest(val *V1InstancesAlertgroupsAlertrulesUpdateRequest) *NullableV1InstancesAlertgroupsAlertrulesUpdateRequest {
	return &NullableV1InstancesAlertgroupsAlertrulesUpdateRequest{value: val, isSet: true}
}

func (v NullableV1InstancesAlertgroupsAlertrulesUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InstancesAlertgroupsAlertrulesUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


