/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// OpsgenieConfig struct for OpsgenieConfig
type OpsgenieConfig struct {
	ApiKey *string `json:"apiKey,omitempty"`
	ApiUrl *string `json:"apiUrl,omitempty"`
	Tags *string `json:"tags,omitempty"`
	SendResolved *bool `json:"sendResolved,omitempty"`
	Priority *string `json:"priority,omitempty"`
}

// NewOpsgenieConfig instantiates a new OpsgenieConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpsgenieConfig() *OpsgenieConfig {
	this := OpsgenieConfig{}
	var sendResolved bool = true
	this.SendResolved = &sendResolved
	return &this
}

// NewOpsgenieConfigWithDefaults instantiates a new OpsgenieConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpsgenieConfigWithDefaults() *OpsgenieConfig {
	this := OpsgenieConfig{}
	var sendResolved bool = true
	this.SendResolved = &sendResolved
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *OpsgenieConfig) GetApiKey() string {
	if o == nil || o.ApiKey == nil {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpsgenieConfig) GetApiKeyOk() (*string, bool) {
	if o == nil || o.ApiKey == nil {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *OpsgenieConfig) HasApiKey() bool {
	if o != nil && o.ApiKey != nil {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *OpsgenieConfig) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *OpsgenieConfig) GetApiUrl() string {
	if o == nil || o.ApiUrl == nil {
		var ret string
		return ret
	}
	return *o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpsgenieConfig) GetApiUrlOk() (*string, bool) {
	if o == nil || o.ApiUrl == nil {
		return nil, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *OpsgenieConfig) HasApiUrl() bool {
	if o != nil && o.ApiUrl != nil {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given string and assigns it to the ApiUrl field.
func (o *OpsgenieConfig) SetApiUrl(v string) {
	o.ApiUrl = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OpsgenieConfig) GetTags() string {
	if o == nil || o.Tags == nil {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpsgenieConfig) GetTagsOk() (*string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OpsgenieConfig) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *OpsgenieConfig) SetTags(v string) {
	o.Tags = &v
}

// GetSendResolved returns the SendResolved field value if set, zero value otherwise.
func (o *OpsgenieConfig) GetSendResolved() bool {
	if o == nil || o.SendResolved == nil {
		var ret bool
		return ret
	}
	return *o.SendResolved
}

// GetSendResolvedOk returns a tuple with the SendResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpsgenieConfig) GetSendResolvedOk() (*bool, bool) {
	if o == nil || o.SendResolved == nil {
		return nil, false
	}
	return o.SendResolved, true
}

// HasSendResolved returns a boolean if a field has been set.
func (o *OpsgenieConfig) HasSendResolved() bool {
	if o != nil && o.SendResolved != nil {
		return true
	}

	return false
}

// SetSendResolved gets a reference to the given bool and assigns it to the SendResolved field.
func (o *OpsgenieConfig) SetSendResolved(v bool) {
	o.SendResolved = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *OpsgenieConfig) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpsgenieConfig) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *OpsgenieConfig) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *OpsgenieConfig) SetPriority(v string) {
	o.Priority = &v
}

func (o OpsgenieConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiKey != nil {
		toSerialize["apiKey"] = o.ApiKey
	}
	if o.ApiUrl != nil {
		toSerialize["apiUrl"] = o.ApiUrl
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.SendResolved != nil {
		toSerialize["sendResolved"] = o.SendResolved
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	return json.Marshal(toSerialize)
}

type NullableOpsgenieConfig struct {
	value *OpsgenieConfig
	isSet bool
}

func (v NullableOpsgenieConfig) Get() *OpsgenieConfig {
	return v.value
}

func (v *NullableOpsgenieConfig) Set(val *OpsgenieConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOpsgenieConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOpsgenieConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpsgenieConfig(val *OpsgenieConfig) *NullableOpsgenieConfig {
	return &NullableOpsgenieConfig{value: val, isSet: true}
}

func (v NullableOpsgenieConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpsgenieConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


