/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// V1InstancesMetricsStorageRetentionsUpdateRequest struct for V1InstancesMetricsStorageRetentionsUpdateRequest
type V1InstancesMetricsStorageRetentionsUpdateRequest struct {
	// Retention time of longtime storage of raw sampled data. After that time the data will be down sampled to 5m. Keep in mind, that the initial goal of downsampling is not saving disk or object storage space. In fact, downsampling doesn't save you any space but instead, it adds 2 more blocks for each raw block which are only slightly smaller or relatively similar size to raw block. This is done by internal downsampling implementation which to be mathematically correct holds various aggregations. This means that downsampling can increase the size of your storage a bit (~3x), if you choose to store all resolutions (recommended). The goal of downsampling is to provide an opportunity to get fast results for range queries of big time intervals like months or years. `Additional Validators:` * Should be a valid time string * Should not be bigger than 13 months
	MetricsRetentionTimeRaw string `json:"metricsRetentionTimeRaw"`
	// Retention time of longtime storage of 5m sampled data. After that time the data will be down sampled to 1h. `Additional Validators:` * Should be a valid time string * Should not be bigger than metricsRetentionTimeRaw
	MetricsRetentionTime5m string `json:"metricsRetentionTime5m"`
	// Retention time of longtime storage of 1h sampled data. After that time the data will be deleted permanently. `Additional Validators:` * Should be a valid time string * Should not be bigger than metricsRetentionTime5m
	MetricsRetentionTime1h string `json:"metricsRetentionTime1h"`
}

// NewV1InstancesMetricsStorageRetentionsUpdateRequest instantiates a new V1InstancesMetricsStorageRetentionsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1InstancesMetricsStorageRetentionsUpdateRequest(metricsRetentionTimeRaw string, metricsRetentionTime5m string, metricsRetentionTime1h string) *V1InstancesMetricsStorageRetentionsUpdateRequest {
	this := V1InstancesMetricsStorageRetentionsUpdateRequest{}
	this.MetricsRetentionTimeRaw = metricsRetentionTimeRaw
	this.MetricsRetentionTime5m = metricsRetentionTime5m
	this.MetricsRetentionTime1h = metricsRetentionTime1h
	return &this
}

// NewV1InstancesMetricsStorageRetentionsUpdateRequestWithDefaults instantiates a new V1InstancesMetricsStorageRetentionsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InstancesMetricsStorageRetentionsUpdateRequestWithDefaults() *V1InstancesMetricsStorageRetentionsUpdateRequest {
	this := V1InstancesMetricsStorageRetentionsUpdateRequest{}
	return &this
}

// GetMetricsRetentionTimeRaw returns the MetricsRetentionTimeRaw field value
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) GetMetricsRetentionTimeRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricsRetentionTimeRaw
}

// GetMetricsRetentionTimeRawOk returns a tuple with the MetricsRetentionTimeRaw field value
// and a boolean to check if the value has been set.
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) GetMetricsRetentionTimeRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricsRetentionTimeRaw, true
}

// SetMetricsRetentionTimeRaw sets field value
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) SetMetricsRetentionTimeRaw(v string) {
	o.MetricsRetentionTimeRaw = v
}

// GetMetricsRetentionTime5m returns the MetricsRetentionTime5m field value
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) GetMetricsRetentionTime5m() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricsRetentionTime5m
}

// GetMetricsRetentionTime5mOk returns a tuple with the MetricsRetentionTime5m field value
// and a boolean to check if the value has been set.
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) GetMetricsRetentionTime5mOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricsRetentionTime5m, true
}

// SetMetricsRetentionTime5m sets field value
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) SetMetricsRetentionTime5m(v string) {
	o.MetricsRetentionTime5m = v
}

// GetMetricsRetentionTime1h returns the MetricsRetentionTime1h field value
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) GetMetricsRetentionTime1h() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricsRetentionTime1h
}

// GetMetricsRetentionTime1hOk returns a tuple with the MetricsRetentionTime1h field value
// and a boolean to check if the value has been set.
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) GetMetricsRetentionTime1hOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricsRetentionTime1h, true
}

// SetMetricsRetentionTime1h sets field value
func (o *V1InstancesMetricsStorageRetentionsUpdateRequest) SetMetricsRetentionTime1h(v string) {
	o.MetricsRetentionTime1h = v
}

func (o V1InstancesMetricsStorageRetentionsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metricsRetentionTimeRaw"] = o.MetricsRetentionTimeRaw
	}
	if true {
		toSerialize["metricsRetentionTime5m"] = o.MetricsRetentionTime5m
	}
	if true {
		toSerialize["metricsRetentionTime1h"] = o.MetricsRetentionTime1h
	}
	return json.Marshal(toSerialize)
}

type NullableV1InstancesMetricsStorageRetentionsUpdateRequest struct {
	value *V1InstancesMetricsStorageRetentionsUpdateRequest
	isSet bool
}

func (v NullableV1InstancesMetricsStorageRetentionsUpdateRequest) Get() *V1InstancesMetricsStorageRetentionsUpdateRequest {
	return v.value
}

func (v *NullableV1InstancesMetricsStorageRetentionsUpdateRequest) Set(val *V1InstancesMetricsStorageRetentionsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InstancesMetricsStorageRetentionsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InstancesMetricsStorageRetentionsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InstancesMetricsStorageRetentionsUpdateRequest(val *V1InstancesMetricsStorageRetentionsUpdateRequest) *NullableV1InstancesMetricsStorageRetentionsUpdateRequest {
	return &NullableV1InstancesMetricsStorageRetentionsUpdateRequest{value: val, isSet: true}
}

func (v NullableV1InstancesMetricsStorageRetentionsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InstancesMetricsStorageRetentionsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


