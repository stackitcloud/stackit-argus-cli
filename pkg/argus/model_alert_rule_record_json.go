/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// AlertRuleRecordJson struct for AlertRuleRecordJson
type AlertRuleRecordJson struct {
	Alert *string `json:"alert,omitempty"`
	Expr string `json:"expr"`
	Labels *map[string]string `json:"labels,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
	Record *string `json:"record,omitempty"`
	For *string `json:"for,omitempty"`
}

// NewAlertRuleRecordJson instantiates a new AlertRuleRecordJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertRuleRecordJson(expr string) *AlertRuleRecordJson {
	this := AlertRuleRecordJson{}
	this.Expr = expr
	return &this
}

// NewAlertRuleRecordJsonWithDefaults instantiates a new AlertRuleRecordJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertRuleRecordJsonWithDefaults() *AlertRuleRecordJson {
	this := AlertRuleRecordJson{}
	return &this
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *AlertRuleRecordJson) GetAlert() string {
	if o == nil || o.Alert == nil {
		var ret string
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecordJson) GetAlertOk() (*string, bool) {
	if o == nil || o.Alert == nil {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *AlertRuleRecordJson) HasAlert() bool {
	if o != nil && o.Alert != nil {
		return true
	}

	return false
}

// SetAlert gets a reference to the given string and assigns it to the Alert field.
func (o *AlertRuleRecordJson) SetAlert(v string) {
	o.Alert = &v
}

// GetExpr returns the Expr field value
func (o *AlertRuleRecordJson) GetExpr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expr
}

// GetExprOk returns a tuple with the Expr field value
// and a boolean to check if the value has been set.
func (o *AlertRuleRecordJson) GetExprOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expr, true
}

// SetExpr sets field value
func (o *AlertRuleRecordJson) SetExpr(v string) {
	o.Expr = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AlertRuleRecordJson) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecordJson) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AlertRuleRecordJson) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *AlertRuleRecordJson) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *AlertRuleRecordJson) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecordJson) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *AlertRuleRecordJson) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *AlertRuleRecordJson) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetRecord returns the Record field value if set, zero value otherwise.
func (o *AlertRuleRecordJson) GetRecord() string {
	if o == nil || o.Record == nil {
		var ret string
		return ret
	}
	return *o.Record
}

// GetRecordOk returns a tuple with the Record field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecordJson) GetRecordOk() (*string, bool) {
	if o == nil || o.Record == nil {
		return nil, false
	}
	return o.Record, true
}

// HasRecord returns a boolean if a field has been set.
func (o *AlertRuleRecordJson) HasRecord() bool {
	if o != nil && o.Record != nil {
		return true
	}

	return false
}

// SetRecord gets a reference to the given string and assigns it to the Record field.
func (o *AlertRuleRecordJson) SetRecord(v string) {
	o.Record = &v
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *AlertRuleRecordJson) GetFor() string {
	if o == nil || o.For == nil {
		var ret string
		return ret
	}
	return *o.For
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertRuleRecordJson) GetForOk() (*string, bool) {
	if o == nil || o.For == nil {
		return nil, false
	}
	return o.For, true
}

// HasFor returns a boolean if a field has been set.
func (o *AlertRuleRecordJson) HasFor() bool {
	if o != nil && o.For != nil {
		return true
	}

	return false
}

// SetFor gets a reference to the given string and assigns it to the For field.
func (o *AlertRuleRecordJson) SetFor(v string) {
	o.For = &v
}

func (o AlertRuleRecordJson) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Alert != nil {
		toSerialize["alert"] = o.Alert
	}
	if true {
		toSerialize["expr"] = o.Expr
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.Record != nil {
		toSerialize["record"] = o.Record
	}
	if o.For != nil {
		toSerialize["for"] = o.For
	}
	return json.Marshal(toSerialize)
}

type NullableAlertRuleRecordJson struct {
	value *AlertRuleRecordJson
	isSet bool
}

func (v NullableAlertRuleRecordJson) Get() *AlertRuleRecordJson {
	return v.value
}

func (v *NullableAlertRuleRecordJson) Set(val *AlertRuleRecordJson) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRuleRecordJson) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRuleRecordJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRuleRecordJson(val *AlertRuleRecordJson) *NullableAlertRuleRecordJson {
	return &NullableAlertRuleRecordJson{value: val, isSet: true}
}

func (v NullableAlertRuleRecordJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRuleRecordJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


