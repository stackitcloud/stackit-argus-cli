/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// PlanSingle struct for PlanSingle
type PlanSingle struct {
	Message string    `json:"message"`
	Plans   PlanModel `json:"plans"`
}

// NewPlanSingle instantiates a new PlanSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSingle(message string, plans PlanModel) *PlanSingle {
	this := PlanSingle{}
	this.Message = message
	this.Plans = plans
	return &this
}

// NewPlanSingleWithDefaults instantiates a new PlanSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSingleWithDefaults() *PlanSingle {
	this := PlanSingle{}
	return &this
}

// GetMessage returns the Message field value
func (o *PlanSingle) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *PlanSingle) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *PlanSingle) SetMessage(v string) {
	o.Message = v
}

// GetPlans returns the Plans field value
func (o *PlanSingle) GetPlans() PlanModel {
	if o == nil {
		var ret PlanModel
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *PlanSingle) GetPlansOk() (*PlanModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plans, true
}

// SetPlans sets field value
func (o *PlanSingle) SetPlans(v PlanModel) {
	o.Plans = v
}

func (o PlanSingle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["plans"] = o.Plans
	}
	return json.Marshal(toSerialize)
}

type NullablePlanSingle struct {
	value *PlanSingle
	isSet bool
}

func (v NullablePlanSingle) Get() *PlanSingle {
	return v.value
}

func (v *NullablePlanSingle) Set(val *PlanSingle) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSingle) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSingle(val *PlanSingle) *NullablePlanSingle {
	return &NullablePlanSingle{value: val, isSet: true}
}

func (v NullablePlanSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
