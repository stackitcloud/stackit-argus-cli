/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: 1.0
Contact: patrick.koss@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// ScrapeConfigApiService ScrapeConfigApi service
type ScrapeConfigApiService service

type ApiV1InstancesScrapeconfigsAllDeleteRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	authorization *string
	jobName       *[]string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesScrapeconfigsAllDeleteRequest) Authorization(authorization string) ApiV1InstancesScrapeconfigsAllDeleteRequest {
	r.authorization = &authorization
	return r
}

// Name of the jobs that should be deleted
func (r ApiV1InstancesScrapeconfigsAllDeleteRequest) JobName(jobName []string) ApiV1InstancesScrapeconfigsAllDeleteRequest {
	r.jobName = &jobName
	return r
}

func (r ApiV1InstancesScrapeconfigsAllDeleteRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1InstancesScrapeconfigsAllDeleteExecute(r)
}

/*
V1InstancesScrapeconfigsAllDelete Method for V1InstancesScrapeconfigsAllDelete

delete scrape configs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiV1InstancesScrapeconfigsAllDeleteRequest
*/
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsAllDelete(ctx context.Context, instanceId string) ApiV1InstancesScrapeconfigsAllDeleteRequest {
	return ApiV1InstancesScrapeconfigsAllDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsAllDeleteExecute(r ApiV1InstancesScrapeconfigsAllDeleteRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1InstancesScrapeconfigsAllDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.jobName == nil {
		return localVarReturnValue, nil, reportError("jobName is required and must be specified")
	}

	{
		t := *r.jobName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("jobName", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("jobName", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesScrapeconfigsCreateRequest struct {
	ctx                                   context.Context
	ApiService                            *ScrapeConfigApiService
	instanceId                            string
	authorization                         *string
	v1InstancesScrapeconfigsCreateRequest *V1InstancesScrapeconfigsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesScrapeconfigsCreateRequest) Authorization(authorization string) ApiV1InstancesScrapeconfigsCreateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesScrapeconfigsCreateRequest) V1InstancesScrapeconfigsCreateRequest(v1InstancesScrapeconfigsCreateRequest V1InstancesScrapeconfigsCreateRequest) ApiV1InstancesScrapeconfigsCreateRequest {
	r.v1InstancesScrapeconfigsCreateRequest = &v1InstancesScrapeconfigsCreateRequest
	return r
}

func (r ApiV1InstancesScrapeconfigsCreateRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1InstancesScrapeconfigsCreateExecute(r)
}

/*
V1InstancesScrapeconfigsCreate Method for V1InstancesScrapeconfigsCreate

create scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiV1InstancesScrapeconfigsCreateRequest
*/
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsCreate(ctx context.Context, instanceId string) ApiV1InstancesScrapeconfigsCreateRequest {
	return ApiV1InstancesScrapeconfigsCreateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsCreateExecute(r ApiV1InstancesScrapeconfigsCreateRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1InstancesScrapeconfigsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesScrapeconfigsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesScrapeconfigsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesScrapeconfigsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesScrapeconfigsDeleteRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	jobName       string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesScrapeconfigsDeleteRequest) Authorization(authorization string) ApiV1InstancesScrapeconfigsDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesScrapeconfigsDeleteRequest) Execute() (*DeleteJob, *http.Response, error) {
	return r.ApiService.V1InstancesScrapeconfigsDeleteExecute(r)
}

/*
V1InstancesScrapeconfigsDelete Method for V1InstancesScrapeconfigsDelete

delete scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param jobName
 @return ApiV1InstancesScrapeconfigsDeleteRequest
*/
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsDelete(ctx context.Context, instanceId string, jobName string) ApiV1InstancesScrapeconfigsDeleteRequest {
	return ApiV1InstancesScrapeconfigsDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		jobName:    jobName,
	}
}

// Execute executes the request
//  @return DeleteJob
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsDeleteExecute(r ApiV1InstancesScrapeconfigsDeleteRequest) (*DeleteJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1InstancesScrapeconfigsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/scrapeconfigs/{jobName}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobName"+"}", url.PathEscape(parameterToString(r.jobName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesScrapeconfigsListRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesScrapeconfigsListRequest) Authorization(authorization string) ApiV1InstancesScrapeconfigsListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesScrapeconfigsListRequest) Execute() (*GetAllJob, *http.Response, error) {
	return r.ApiService.V1InstancesScrapeconfigsListExecute(r)
}

/*
V1InstancesScrapeconfigsList Method for V1InstancesScrapeconfigsList

get scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiV1InstancesScrapeconfigsListRequest
*/
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsList(ctx context.Context, instanceId string) ApiV1InstancesScrapeconfigsListRequest {
	return ApiV1InstancesScrapeconfigsListRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return GetAllJob
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsListExecute(r ApiV1InstancesScrapeconfigsListRequest) (*GetAllJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAllJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1InstancesScrapeconfigsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesScrapeconfigsPartialUpdateRequest struct {
	ctx                                   context.Context
	ApiService                            *ScrapeConfigApiService
	instanceId                            string
	authorization                         *string
	v1InstancesScrapeconfigsCreateRequest *[]V1InstancesScrapeconfigsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesScrapeconfigsPartialUpdateRequest) Authorization(authorization string) ApiV1InstancesScrapeconfigsPartialUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesScrapeconfigsPartialUpdateRequest) V1InstancesScrapeconfigsCreateRequest(v1InstancesScrapeconfigsCreateRequest []V1InstancesScrapeconfigsCreateRequest) ApiV1InstancesScrapeconfigsPartialUpdateRequest {
	r.v1InstancesScrapeconfigsCreateRequest = &v1InstancesScrapeconfigsCreateRequest
	return r
}

func (r ApiV1InstancesScrapeconfigsPartialUpdateRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1InstancesScrapeconfigsPartialUpdateExecute(r)
}

/*
V1InstancesScrapeconfigsPartialUpdate Method for V1InstancesScrapeconfigsPartialUpdate

patches scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @return ApiV1InstancesScrapeconfigsPartialUpdateRequest
*/
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsPartialUpdate(ctx context.Context, instanceId string) ApiV1InstancesScrapeconfigsPartialUpdateRequest {
	return ApiV1InstancesScrapeconfigsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsPartialUpdateExecute(r ApiV1InstancesScrapeconfigsPartialUpdateRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1InstancesScrapeconfigsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesScrapeconfigsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesScrapeconfigsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesScrapeconfigsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesScrapeconfigsReadRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	jobName       string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesScrapeconfigsReadRequest) Authorization(authorization string) ApiV1InstancesScrapeconfigsReadRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesScrapeconfigsReadRequest) Execute() (*GetJob, *http.Response, error) {
	return r.ApiService.V1InstancesScrapeconfigsReadExecute(r)
}

/*
V1InstancesScrapeconfigsRead Method for V1InstancesScrapeconfigsRead

get scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param jobName
 @return ApiV1InstancesScrapeconfigsReadRequest
*/
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsRead(ctx context.Context, instanceId string, jobName string) ApiV1InstancesScrapeconfigsReadRequest {
	return ApiV1InstancesScrapeconfigsReadRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		jobName:    jobName,
	}
}

// Execute executes the request
//  @return GetJob
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsReadExecute(r ApiV1InstancesScrapeconfigsReadRequest) (*GetJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1InstancesScrapeconfigsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/scrapeconfigs/{jobName}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobName"+"}", url.PathEscape(parameterToString(r.jobName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1InstancesScrapeconfigsUpdateRequest struct {
	ctx                                   context.Context
	ApiService                            *ScrapeConfigApiService
	instanceId                            string
	jobName                               string
	authorization                         *string
	v1InstancesScrapeconfigsCreateRequest *V1InstancesScrapeconfigsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1InstancesScrapeconfigsUpdateRequest) Authorization(authorization string) ApiV1InstancesScrapeconfigsUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1InstancesScrapeconfigsUpdateRequest) V1InstancesScrapeconfigsCreateRequest(v1InstancesScrapeconfigsCreateRequest V1InstancesScrapeconfigsCreateRequest) ApiV1InstancesScrapeconfigsUpdateRequest {
	r.v1InstancesScrapeconfigsCreateRequest = &v1InstancesScrapeconfigsCreateRequest
	return r
}

func (r ApiV1InstancesScrapeconfigsUpdateRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1InstancesScrapeconfigsUpdateExecute(r)
}

/*
V1InstancesScrapeconfigsUpdate Method for V1InstancesScrapeconfigsUpdate

update scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param jobName
 @return ApiV1InstancesScrapeconfigsUpdateRequest
*/
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsUpdate(ctx context.Context, instanceId string, jobName string) ApiV1InstancesScrapeconfigsUpdateRequest {
	return ApiV1InstancesScrapeconfigsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		jobName:    jobName,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1InstancesScrapeconfigsUpdateExecute(r ApiV1InstancesScrapeconfigsUpdateRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1InstancesScrapeconfigsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/instances/{instanceId}/scrapeconfigs/{jobName}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobName"+"}", url.PathEscape(parameterToString(r.jobName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesScrapeconfigsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesScrapeconfigsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesScrapeconfigsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	projectId     string
	authorization *string
	jobName       *[]string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest) Authorization(authorization string) ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest {
	r.authorization = &authorization
	return r
}

// Name of the jobs that should be deleted
func (r ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest) JobName(jobName []string) ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest {
	r.jobName = &jobName
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesScrapeconfigsAllDeleteExecute(r)
}

/*
V1ProjectsInstancesScrapeconfigsAllDelete Method for V1ProjectsInstancesScrapeconfigsAllDelete

delete scrape configs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param projectId
 @return ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest
*/
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsAllDelete(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest {
	return ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsAllDeleteExecute(r ApiV1ProjectsInstancesScrapeconfigsAllDeleteRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1ProjectsInstancesScrapeconfigsAllDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.jobName == nil {
		return localVarReturnValue, nil, reportError("jobName is required and must be specified")
	}

	{
		t := *r.jobName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("jobName", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("jobName", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesScrapeconfigsCreateRequest struct {
	ctx                                   context.Context
	ApiService                            *ScrapeConfigApiService
	instanceId                            string
	projectId                             string
	authorization                         *string
	v1InstancesScrapeconfigsCreateRequest *V1InstancesScrapeconfigsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesScrapeconfigsCreateRequest) Authorization(authorization string) ApiV1ProjectsInstancesScrapeconfigsCreateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsCreateRequest) V1InstancesScrapeconfigsCreateRequest(v1InstancesScrapeconfigsCreateRequest V1InstancesScrapeconfigsCreateRequest) ApiV1ProjectsInstancesScrapeconfigsCreateRequest {
	r.v1InstancesScrapeconfigsCreateRequest = &v1InstancesScrapeconfigsCreateRequest
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsCreateRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesScrapeconfigsCreateExecute(r)
}

/*
V1ProjectsInstancesScrapeconfigsCreate Method for V1ProjectsInstancesScrapeconfigsCreate

create scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param projectId
 @return ApiV1ProjectsInstancesScrapeconfigsCreateRequest
*/
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsCreate(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesScrapeconfigsCreateRequest {
	return ApiV1ProjectsInstancesScrapeconfigsCreateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsCreateExecute(r ApiV1ProjectsInstancesScrapeconfigsCreateRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1ProjectsInstancesScrapeconfigsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesScrapeconfigsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesScrapeconfigsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesScrapeconfigsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesScrapeconfigsDeleteRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	jobName       string
	projectId     string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesScrapeconfigsDeleteRequest) Authorization(authorization string) ApiV1ProjectsInstancesScrapeconfigsDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsDeleteRequest) Execute() (*DeleteJob, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesScrapeconfigsDeleteExecute(r)
}

/*
V1ProjectsInstancesScrapeconfigsDelete Method for V1ProjectsInstancesScrapeconfigsDelete

delete scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param jobName
 @param projectId
 @return ApiV1ProjectsInstancesScrapeconfigsDeleteRequest
*/
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsDelete(ctx context.Context, instanceId string, jobName string, projectId string) ApiV1ProjectsInstancesScrapeconfigsDeleteRequest {
	return ApiV1ProjectsInstancesScrapeconfigsDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		jobName:    jobName,
		projectId:  projectId,
	}
}

// Execute executes the request
//  @return DeleteJob
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsDeleteExecute(r ApiV1ProjectsInstancesScrapeconfigsDeleteRequest) (*DeleteJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeleteJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1ProjectsInstancesScrapeconfigsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs/{jobName}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobName"+"}", url.PathEscape(parameterToString(r.jobName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesScrapeconfigsListRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	projectId     string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesScrapeconfigsListRequest) Authorization(authorization string) ApiV1ProjectsInstancesScrapeconfigsListRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsListRequest) Execute() (*GetAllJob, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesScrapeconfigsListExecute(r)
}

/*
V1ProjectsInstancesScrapeconfigsList Method for V1ProjectsInstancesScrapeconfigsList

get scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param projectId
 @return ApiV1ProjectsInstancesScrapeconfigsListRequest
*/
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsList(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesScrapeconfigsListRequest {
	return ApiV1ProjectsInstancesScrapeconfigsListRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//  @return GetAllJob
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsListExecute(r ApiV1ProjectsInstancesScrapeconfigsListRequest) (*GetAllJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetAllJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1ProjectsInstancesScrapeconfigsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest struct {
	ctx                                   context.Context
	ApiService                            *ScrapeConfigApiService
	instanceId                            string
	projectId                             string
	authorization                         *string
	v1InstancesScrapeconfigsCreateRequest *[]V1InstancesScrapeconfigsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest) Authorization(authorization string) ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest) V1InstancesScrapeconfigsCreateRequest(v1InstancesScrapeconfigsCreateRequest []V1InstancesScrapeconfigsCreateRequest) ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest {
	r.v1InstancesScrapeconfigsCreateRequest = &v1InstancesScrapeconfigsCreateRequest
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesScrapeconfigsPartialUpdateExecute(r)
}

/*
V1ProjectsInstancesScrapeconfigsPartialUpdate Method for V1ProjectsInstancesScrapeconfigsPartialUpdate

patches scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param projectId
 @return ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest
*/
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsPartialUpdate(ctx context.Context, instanceId string, projectId string) ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest {
	return ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		projectId:  projectId,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsPartialUpdateExecute(r ApiV1ProjectsInstancesScrapeconfigsPartialUpdateRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1ProjectsInstancesScrapeconfigsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesScrapeconfigsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesScrapeconfigsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesScrapeconfigsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesScrapeconfigsReadRequest struct {
	ctx           context.Context
	ApiService    *ScrapeConfigApiService
	instanceId    string
	jobName       string
	projectId     string
	authorization *string
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesScrapeconfigsReadRequest) Authorization(authorization string) ApiV1ProjectsInstancesScrapeconfigsReadRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsReadRequest) Execute() (*GetJob, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesScrapeconfigsReadExecute(r)
}

/*
V1ProjectsInstancesScrapeconfigsRead Method for V1ProjectsInstancesScrapeconfigsRead

get scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param jobName
 @param projectId
 @return ApiV1ProjectsInstancesScrapeconfigsReadRequest
*/
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsRead(ctx context.Context, instanceId string, jobName string, projectId string) ApiV1ProjectsInstancesScrapeconfigsReadRequest {
	return ApiV1ProjectsInstancesScrapeconfigsReadRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		jobName:    jobName,
		projectId:  projectId,
	}
}

// Execute executes the request
//  @return GetJob
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsReadExecute(r ApiV1ProjectsInstancesScrapeconfigsReadRequest) (*GetJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1ProjectsInstancesScrapeconfigsRead")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs/{jobName}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobName"+"}", url.PathEscape(parameterToString(r.jobName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ProjectsInstancesScrapeconfigsUpdateRequest struct {
	ctx                                   context.Context
	ApiService                            *ScrapeConfigApiService
	instanceId                            string
	jobName                               string
	projectId                             string
	authorization                         *string
	v1InstancesScrapeconfigsCreateRequest *V1InstancesScrapeconfigsCreateRequest
}

// Accepts basic auth and bearer token from admins and jwt token from oauth and basic auth from api user
func (r ApiV1ProjectsInstancesScrapeconfigsUpdateRequest) Authorization(authorization string) ApiV1ProjectsInstancesScrapeconfigsUpdateRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsUpdateRequest) V1InstancesScrapeconfigsCreateRequest(v1InstancesScrapeconfigsCreateRequest V1InstancesScrapeconfigsCreateRequest) ApiV1ProjectsInstancesScrapeconfigsUpdateRequest {
	r.v1InstancesScrapeconfigsCreateRequest = &v1InstancesScrapeconfigsCreateRequest
	return r
}

func (r ApiV1ProjectsInstancesScrapeconfigsUpdateRequest) Execute() (*CreateJob, *http.Response, error) {
	return r.ApiService.V1ProjectsInstancesScrapeconfigsUpdateExecute(r)
}

/*
V1ProjectsInstancesScrapeconfigsUpdate Method for V1ProjectsInstancesScrapeconfigsUpdate

update scrape config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceId
 @param jobName
 @param projectId
 @return ApiV1ProjectsInstancesScrapeconfigsUpdateRequest
*/
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsUpdate(ctx context.Context, instanceId string, jobName string, projectId string) ApiV1ProjectsInstancesScrapeconfigsUpdateRequest {
	return ApiV1ProjectsInstancesScrapeconfigsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		instanceId: instanceId,
		jobName:    jobName,
		projectId:  projectId,
	}
}

// Execute executes the request
//  @return CreateJob
func (a *ScrapeConfigApiService) V1ProjectsInstancesScrapeconfigsUpdateExecute(r ApiV1ProjectsInstancesScrapeconfigsUpdateRequest) (*CreateJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScrapeConfigApiService.V1ProjectsInstancesScrapeconfigsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs/{jobName}"
	localVarPath = strings.Replace(localVarPath, "{"+"instanceId"+"}", url.PathEscape(parameterToString(r.instanceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobName"+"}", url.PathEscape(parameterToString(r.jobName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorization == nil {
		return localVarReturnValue, nil, reportError("authorization is required and must be specified")
	}
	if r.v1InstancesScrapeconfigsCreateRequest == nil {
		return localVarReturnValue, nil, reportError("v1InstancesScrapeconfigsCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	// body params
	localVarPostBody = r.v1InstancesScrapeconfigsCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v PermissionDenied
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Message
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
