/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// GrafanaConfigsSerializerRespond struct for GrafanaConfigsSerializerRespond
type GrafanaConfigsSerializerRespond struct {
	PublicReadAccess *bool `json:"publicReadAccess,omitempty"`
	GenericOauth *GrafanaOauth `json:"genericOauth,omitempty"`
	Message string `json:"message"`
}

// NewGrafanaConfigsSerializerRespond instantiates a new GrafanaConfigsSerializerRespond object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrafanaConfigsSerializerRespond(message string) *GrafanaConfigsSerializerRespond {
	this := GrafanaConfigsSerializerRespond{}
	this.Message = message
	return &this
}

// NewGrafanaConfigsSerializerRespondWithDefaults instantiates a new GrafanaConfigsSerializerRespond object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrafanaConfigsSerializerRespondWithDefaults() *GrafanaConfigsSerializerRespond {
	this := GrafanaConfigsSerializerRespond{}
	return &this
}

// GetPublicReadAccess returns the PublicReadAccess field value if set, zero value otherwise.
func (o *GrafanaConfigsSerializerRespond) GetPublicReadAccess() bool {
	if o == nil || o.PublicReadAccess == nil {
		var ret bool
		return ret
	}
	return *o.PublicReadAccess
}

// GetPublicReadAccessOk returns a tuple with the PublicReadAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaConfigsSerializerRespond) GetPublicReadAccessOk() (*bool, bool) {
	if o == nil || o.PublicReadAccess == nil {
		return nil, false
	}
	return o.PublicReadAccess, true
}

// HasPublicReadAccess returns a boolean if a field has been set.
func (o *GrafanaConfigsSerializerRespond) HasPublicReadAccess() bool {
	if o != nil && o.PublicReadAccess != nil {
		return true
	}

	return false
}

// SetPublicReadAccess gets a reference to the given bool and assigns it to the PublicReadAccess field.
func (o *GrafanaConfigsSerializerRespond) SetPublicReadAccess(v bool) {
	o.PublicReadAccess = &v
}

// GetGenericOauth returns the GenericOauth field value if set, zero value otherwise.
func (o *GrafanaConfigsSerializerRespond) GetGenericOauth() GrafanaOauth {
	if o == nil || o.GenericOauth == nil {
		var ret GrafanaOauth
		return ret
	}
	return *o.GenericOauth
}

// GetGenericOauthOk returns a tuple with the GenericOauth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaConfigsSerializerRespond) GetGenericOauthOk() (*GrafanaOauth, bool) {
	if o == nil || o.GenericOauth == nil {
		return nil, false
	}
	return o.GenericOauth, true
}

// HasGenericOauth returns a boolean if a field has been set.
func (o *GrafanaConfigsSerializerRespond) HasGenericOauth() bool {
	if o != nil && o.GenericOauth != nil {
		return true
	}

	return false
}

// SetGenericOauth gets a reference to the given GrafanaOauth and assigns it to the GenericOauth field.
func (o *GrafanaConfigsSerializerRespond) SetGenericOauth(v GrafanaOauth) {
	o.GenericOauth = &v
}

// GetMessage returns the Message field value
func (o *GrafanaConfigsSerializerRespond) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GrafanaConfigsSerializerRespond) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GrafanaConfigsSerializerRespond) SetMessage(v string) {
	o.Message = v
}

func (o GrafanaConfigsSerializerRespond) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PublicReadAccess != nil {
		toSerialize["publicReadAccess"] = o.PublicReadAccess
	}
	if o.GenericOauth != nil {
		toSerialize["genericOauth"] = o.GenericOauth
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableGrafanaConfigsSerializerRespond struct {
	value *GrafanaConfigsSerializerRespond
	isSet bool
}

func (v NullableGrafanaConfigsSerializerRespond) Get() *GrafanaConfigsSerializerRespond {
	return v.value
}

func (v *NullableGrafanaConfigsSerializerRespond) Set(val *GrafanaConfigsSerializerRespond) {
	v.value = val
	v.isSet = true
}

func (v NullableGrafanaConfigsSerializerRespond) IsSet() bool {
	return v.isSet
}

func (v *NullableGrafanaConfigsSerializerRespond) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrafanaConfigsSerializerRespond(val *GrafanaConfigsSerializerRespond) *NullableGrafanaConfigsSerializerRespond {
	return &NullableGrafanaConfigsSerializerRespond{value: val, isSet: true}
}

func (v NullableGrafanaConfigsSerializerRespond) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrafanaConfigsSerializerRespond) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


