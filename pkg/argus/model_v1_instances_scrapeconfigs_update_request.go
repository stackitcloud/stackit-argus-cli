/*
STACKIT Argus API

API endpoints for Argus on STACKIT

API version: v1
Contact: stackit-argus@mail.schwarz
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package argus

import (
	"encoding/json"
)

// V1InstancesScrapeconfigsUpdateRequest struct for V1InstancesScrapeconfigsUpdateRequest
type V1InstancesScrapeconfigsUpdateRequest struct {
	// A list of scrape configurations.
	StaticConfigs []V1InstancesScrapeconfigsUpdateRequestStaticConfigsInner `json:"staticConfigs"`
	// Configures the protocol scheme used for requests. https or http
	Scheme string `json:"scheme"`
	// How frequently to scrape targets from this job. E.g. 5m `Additional Validators:` * must be a valid time format* must be >= 60s
	ScrapeInterval string `json:"scrapeInterval"`
	// Per-scrape timeout when scraping this job. `Additional Validators:` * must be a valid time format* must be smaller than scrapeInterval
	ScrapeTimeout string `json:"scrapeTimeout"`
	// The HTTP resource path on which to fetch metrics from targets. E.g. /metrics
	MetricsPath string `json:"metricsPath"`
	BasicAuth *V1InstancesScrapeconfigsCreateRequestBasicAuth `json:"basicAuth,omitempty"`
	TlsConfig *V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig `json:"tlsConfig,omitempty"`
	// Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'. `Additional Validators:` * needs to be a valid bearer token * if bearerToken is in the body no other authentication method should be in the body
	BearerToken *string `json:"bearerToken,omitempty"`
	// List of metric relabel configurations
	MetricsRelabelConfigs []V1InstancesScrapeconfigsCreateRequestMetricsRelabelConfigsInner `json:"metricsRelabelConfigs,omitempty"`
	// Optional http params `Additional Validators:` * should not contain more than 5 keys * each key and value should not have more than 200 characters
	Params map[string]interface{} `json:"params,omitempty"`
	// Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.
	HonorLabels *bool `json:"honorLabels,omitempty"`
	// honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.
	HonorTimeStamps *bool `json:"honorTimeStamps,omitempty"`
}

// NewV1InstancesScrapeconfigsUpdateRequest instantiates a new V1InstancesScrapeconfigsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1InstancesScrapeconfigsUpdateRequest(staticConfigs []V1InstancesScrapeconfigsUpdateRequestStaticConfigsInner, scheme string, scrapeInterval string, scrapeTimeout string, metricsPath string) *V1InstancesScrapeconfigsUpdateRequest {
	this := V1InstancesScrapeconfigsUpdateRequest{}
	this.StaticConfigs = staticConfigs
	this.Scheme = scheme
	this.ScrapeInterval = scrapeInterval
	this.ScrapeTimeout = scrapeTimeout
	this.MetricsPath = metricsPath
	var honorLabels bool = false
	this.HonorLabels = &honorLabels
	var honorTimeStamps bool = false
	this.HonorTimeStamps = &honorTimeStamps
	return &this
}

// NewV1InstancesScrapeconfigsUpdateRequestWithDefaults instantiates a new V1InstancesScrapeconfigsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1InstancesScrapeconfigsUpdateRequestWithDefaults() *V1InstancesScrapeconfigsUpdateRequest {
	this := V1InstancesScrapeconfigsUpdateRequest{}
	var metricsPath string = "/metrics"
	this.MetricsPath = metricsPath
	var honorLabels bool = false
	this.HonorLabels = &honorLabels
	var honorTimeStamps bool = false
	this.HonorTimeStamps = &honorTimeStamps
	return &this
}

// GetStaticConfigs returns the StaticConfigs field value
func (o *V1InstancesScrapeconfigsUpdateRequest) GetStaticConfigs() []V1InstancesScrapeconfigsUpdateRequestStaticConfigsInner {
	if o == nil {
		var ret []V1InstancesScrapeconfigsUpdateRequestStaticConfigsInner
		return ret
	}

	return o.StaticConfigs
}

// GetStaticConfigsOk returns a tuple with the StaticConfigs field value
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetStaticConfigsOk() ([]V1InstancesScrapeconfigsUpdateRequestStaticConfigsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.StaticConfigs, true
}

// SetStaticConfigs sets field value
func (o *V1InstancesScrapeconfigsUpdateRequest) SetStaticConfigs(v []V1InstancesScrapeconfigsUpdateRequestStaticConfigsInner) {
	o.StaticConfigs = v
}

// GetScheme returns the Scheme field value
func (o *V1InstancesScrapeconfigsUpdateRequest) GetScheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetSchemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scheme, true
}

// SetScheme sets field value
func (o *V1InstancesScrapeconfigsUpdateRequest) SetScheme(v string) {
	o.Scheme = v
}

// GetScrapeInterval returns the ScrapeInterval field value
func (o *V1InstancesScrapeconfigsUpdateRequest) GetScrapeInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScrapeInterval
}

// GetScrapeIntervalOk returns a tuple with the ScrapeInterval field value
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetScrapeIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScrapeInterval, true
}

// SetScrapeInterval sets field value
func (o *V1InstancesScrapeconfigsUpdateRequest) SetScrapeInterval(v string) {
	o.ScrapeInterval = v
}

// GetScrapeTimeout returns the ScrapeTimeout field value
func (o *V1InstancesScrapeconfigsUpdateRequest) GetScrapeTimeout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScrapeTimeout
}

// GetScrapeTimeoutOk returns a tuple with the ScrapeTimeout field value
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetScrapeTimeoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScrapeTimeout, true
}

// SetScrapeTimeout sets field value
func (o *V1InstancesScrapeconfigsUpdateRequest) SetScrapeTimeout(v string) {
	o.ScrapeTimeout = v
}

// GetMetricsPath returns the MetricsPath field value
func (o *V1InstancesScrapeconfigsUpdateRequest) GetMetricsPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricsPath
}

// GetMetricsPathOk returns a tuple with the MetricsPath field value
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetMetricsPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricsPath, true
}

// SetMetricsPath sets field value
func (o *V1InstancesScrapeconfigsUpdateRequest) SetMetricsPath(v string) {
	o.MetricsPath = v
}

// GetBasicAuth returns the BasicAuth field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetBasicAuth() V1InstancesScrapeconfigsCreateRequestBasicAuth {
	if o == nil || o.BasicAuth == nil {
		var ret V1InstancesScrapeconfigsCreateRequestBasicAuth
		return ret
	}
	return *o.BasicAuth
}

// GetBasicAuthOk returns a tuple with the BasicAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetBasicAuthOk() (*V1InstancesScrapeconfigsCreateRequestBasicAuth, bool) {
	if o == nil || o.BasicAuth == nil {
		return nil, false
	}
	return o.BasicAuth, true
}

// HasBasicAuth returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) HasBasicAuth() bool {
	if o != nil && o.BasicAuth != nil {
		return true
	}

	return false
}

// SetBasicAuth gets a reference to the given V1InstancesScrapeconfigsCreateRequestBasicAuth and assigns it to the BasicAuth field.
func (o *V1InstancesScrapeconfigsUpdateRequest) SetBasicAuth(v V1InstancesScrapeconfigsCreateRequestBasicAuth) {
	o.BasicAuth = &v
}

// GetTlsConfig returns the TlsConfig field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetTlsConfig() V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig {
	if o == nil || o.TlsConfig == nil {
		var ret V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig
		return ret
	}
	return *o.TlsConfig
}

// GetTlsConfigOk returns a tuple with the TlsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetTlsConfigOk() (*V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig, bool) {
	if o == nil || o.TlsConfig == nil {
		return nil, false
	}
	return o.TlsConfig, true
}

// HasTlsConfig returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) HasTlsConfig() bool {
	if o != nil && o.TlsConfig != nil {
		return true
	}

	return false
}

// SetTlsConfig gets a reference to the given V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig and assigns it to the TlsConfig field.
func (o *V1InstancesScrapeconfigsUpdateRequest) SetTlsConfig(v V1InstancesScrapeconfigsCreateRequestOauth2TlsConfig) {
	o.TlsConfig = &v
}

// GetBearerToken returns the BearerToken field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetBearerToken() string {
	if o == nil || o.BearerToken == nil {
		var ret string
		return ret
	}
	return *o.BearerToken
}

// GetBearerTokenOk returns a tuple with the BearerToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetBearerTokenOk() (*string, bool) {
	if o == nil || o.BearerToken == nil {
		return nil, false
	}
	return o.BearerToken, true
}

// HasBearerToken returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) HasBearerToken() bool {
	if o != nil && o.BearerToken != nil {
		return true
	}

	return false
}

// SetBearerToken gets a reference to the given string and assigns it to the BearerToken field.
func (o *V1InstancesScrapeconfigsUpdateRequest) SetBearerToken(v string) {
	o.BearerToken = &v
}

// GetMetricsRelabelConfigs returns the MetricsRelabelConfigs field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetMetricsRelabelConfigs() []V1InstancesScrapeconfigsCreateRequestMetricsRelabelConfigsInner {
	if o == nil || o.MetricsRelabelConfigs == nil {
		var ret []V1InstancesScrapeconfigsCreateRequestMetricsRelabelConfigsInner
		return ret
	}
	return o.MetricsRelabelConfigs
}

// GetMetricsRelabelConfigsOk returns a tuple with the MetricsRelabelConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetMetricsRelabelConfigsOk() ([]V1InstancesScrapeconfigsCreateRequestMetricsRelabelConfigsInner, bool) {
	if o == nil || o.MetricsRelabelConfigs == nil {
		return nil, false
	}
	return o.MetricsRelabelConfigs, true
}

// HasMetricsRelabelConfigs returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) HasMetricsRelabelConfigs() bool {
	if o != nil && o.MetricsRelabelConfigs != nil {
		return true
	}

	return false
}

// SetMetricsRelabelConfigs gets a reference to the given []V1InstancesScrapeconfigsCreateRequestMetricsRelabelConfigsInner and assigns it to the MetricsRelabelConfigs field.
func (o *V1InstancesScrapeconfigsUpdateRequest) SetMetricsRelabelConfigs(v []V1InstancesScrapeconfigsCreateRequestMetricsRelabelConfigsInner) {
	o.MetricsRelabelConfigs = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetParams() map[string]interface{} {
	if o == nil || o.Params == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || o.Params == nil {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) HasParams() bool {
	if o != nil && o.Params != nil {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *V1InstancesScrapeconfigsUpdateRequest) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetHonorLabels returns the HonorLabels field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetHonorLabels() bool {
	if o == nil || o.HonorLabels == nil {
		var ret bool
		return ret
	}
	return *o.HonorLabels
}

// GetHonorLabelsOk returns a tuple with the HonorLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetHonorLabelsOk() (*bool, bool) {
	if o == nil || o.HonorLabels == nil {
		return nil, false
	}
	return o.HonorLabels, true
}

// HasHonorLabels returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) HasHonorLabels() bool {
	if o != nil && o.HonorLabels != nil {
		return true
	}

	return false
}

// SetHonorLabels gets a reference to the given bool and assigns it to the HonorLabels field.
func (o *V1InstancesScrapeconfigsUpdateRequest) SetHonorLabels(v bool) {
	o.HonorLabels = &v
}

// GetHonorTimeStamps returns the HonorTimeStamps field value if set, zero value otherwise.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetHonorTimeStamps() bool {
	if o == nil || o.HonorTimeStamps == nil {
		var ret bool
		return ret
	}
	return *o.HonorTimeStamps
}

// GetHonorTimeStampsOk returns a tuple with the HonorTimeStamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) GetHonorTimeStampsOk() (*bool, bool) {
	if o == nil || o.HonorTimeStamps == nil {
		return nil, false
	}
	return o.HonorTimeStamps, true
}

// HasHonorTimeStamps returns a boolean if a field has been set.
func (o *V1InstancesScrapeconfigsUpdateRequest) HasHonorTimeStamps() bool {
	if o != nil && o.HonorTimeStamps != nil {
		return true
	}

	return false
}

// SetHonorTimeStamps gets a reference to the given bool and assigns it to the HonorTimeStamps field.
func (o *V1InstancesScrapeconfigsUpdateRequest) SetHonorTimeStamps(v bool) {
	o.HonorTimeStamps = &v
}

func (o V1InstancesScrapeconfigsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["staticConfigs"] = o.StaticConfigs
	}
	if true {
		toSerialize["scheme"] = o.Scheme
	}
	if true {
		toSerialize["scrapeInterval"] = o.ScrapeInterval
	}
	if true {
		toSerialize["scrapeTimeout"] = o.ScrapeTimeout
	}
	if true {
		toSerialize["metricsPath"] = o.MetricsPath
	}
	if o.BasicAuth != nil {
		toSerialize["basicAuth"] = o.BasicAuth
	}
	if o.TlsConfig != nil {
		toSerialize["tlsConfig"] = o.TlsConfig
	}
	if o.BearerToken != nil {
		toSerialize["bearerToken"] = o.BearerToken
	}
	if o.MetricsRelabelConfigs != nil {
		toSerialize["metricsRelabelConfigs"] = o.MetricsRelabelConfigs
	}
	if o.Params != nil {
		toSerialize["params"] = o.Params
	}
	if o.HonorLabels != nil {
		toSerialize["honorLabels"] = o.HonorLabels
	}
	if o.HonorTimeStamps != nil {
		toSerialize["honorTimeStamps"] = o.HonorTimeStamps
	}
	return json.Marshal(toSerialize)
}

type NullableV1InstancesScrapeconfigsUpdateRequest struct {
	value *V1InstancesScrapeconfigsUpdateRequest
	isSet bool
}

func (v NullableV1InstancesScrapeconfigsUpdateRequest) Get() *V1InstancesScrapeconfigsUpdateRequest {
	return v.value
}

func (v *NullableV1InstancesScrapeconfigsUpdateRequest) Set(val *V1InstancesScrapeconfigsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1InstancesScrapeconfigsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1InstancesScrapeconfigsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1InstancesScrapeconfigsUpdateRequest(val *V1InstancesScrapeconfigsUpdateRequest) *NullableV1InstancesScrapeconfigsUpdateRequest {
	return &NullableV1InstancesScrapeconfigsUpdateRequest{value: val, isSet: true}
}

func (v NullableV1InstancesScrapeconfigsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1InstancesScrapeconfigsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


