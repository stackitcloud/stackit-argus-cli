{
  "swagger": "2.0",
  "info": {
    "title": "STACKIT Argus API",
    "description": "API endpoints for Argus on STACKIT",
    "termsOfService": "https://stackit.de/en/imprint",
    "contact": { "email": "stackit-argus@mail.schwarz" },
    "version": "v1"
  },
  "host": "api.argus.eu01.stackit.cloud",
  "schemes": ["https"],
  "basePath": "/",
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": { "Basic": { "type": "basic" } },
  "security": [{ "Basic": [] }],
  "paths": {
    "/": {
      "get": {
        "operationId": "_list",
        "description": "Get 200 ok.",
        "parameters": [],
        "responses": {
          "200": { "description": "Health route that always return 200 ok." }
        },
        "tags": ["health"]
      },
      "parameters": []
    },
    "/healthz": {
      "get": {
        "operationId": "healthz_list",
        "description": "Get 200 ok.",
        "parameters": [],
        "responses": {
          "200": { "description": "Health route that always return 200 ok." }
        },
        "tags": ["health"]
      },
      "parameters": []
    },
    "/v1/clusters": {
      "get": {
        "operationId": "v1_clusters_list",
        "description": "Get all cluster names.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth",
            "required": true,
            "type": "string"
          },
          {
            "name": "search",
            "in": "header",
            "description": "Search string that should be included in the cluster name",
            "type": "string"
          },
          {
            "name": "pageIdx",
            "in": "header",
            "description": "Page index if the clusters are having paging. 4 clusters per page are returned",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all cluster names",
            "schema": { "$ref": "#/definitions/ClusterList" },
            "examples": {
              "application/json": {
                "message": "List of clusters",
                "clusters": ["intern", "schwarz"]
              }
            }
          },
          "400": {
            "description": "The params are not valid",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Parameters are wrong data format"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["cluster"]
      },
      "parameters": []
    },
    "/v1/clusters/{clusterId}": {
      "post": {
        "operationId": "v1_clusters_create",
        "description": "Initialize the cluster secrets and operators.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["kubeconfig"],
              "type": "object",
              "properties": {
                "kubeconfig": {
                  "description": "Encoded base64 string of a valid kubeconfig",
                  "type": "string"
                },
                "clusterName": {
                  "description": "Concrete name of the cluster. If you leave the field blank, the cluster name is clusterId{len(clusterId)}. So in a cluster category defined by clusterId many concrete clusters can exist.",
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The cluster was successfully initialized.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Cluster successfully initialized"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong while initializing the operators or building the git repo because the parameters were incorrect.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Failed to initialize cluster" }
            }
          }
        },
        "tags": ["cluster"]
      },
      "delete": {
        "operationId": "v1_clusters_delete",
        "description": "Delete the operators, secrets and git repo but will not delete the pods deployed by flux.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The cluster was successfully deleted.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Cluster successfully deleted" }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong during deleting the cluster.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": { "message": "Failed to delete the cluster" }
            }
          }
        },
        "tags": ["cluster"]
      },
      "parameters": [
        {
          "name": "clusterId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/clusters/{clusterId}/instances/{instanceId}/status": {
      "get": {
        "operationId": "v1_clusters_instances_status_list",
        "description": "Get deployment status.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth and broker.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get deployment status",
            "schema": { "$ref": "#/definitions/Status" },
            "examples": {
              "application/json": {
                "state": "in progress",
                "description": "Not all pods are ready yet",
                "instance_usable": false,
                "update_repeatable": false
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong getting deployment status",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Something went wrong getting deployment status"
              }
            }
          }
        },
        "tags": ["osb"]
      },
      "parameters": [
        {
          "name": "clusterId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/grafana-plugins": {
      "get": {
        "operationId": "v1_grafana-plugins_list",
        "description": "Get grafana plugins for instance.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get available grafana plugins",
            "schema": { "$ref": "#/definitions/GrafanaPlugin" },
            "examples": {
              "application/json": {
                "message": "Successfully got grafana plugins",
                "plugins": [
                  { "name": "Test Plugin", "description": "Test Description" }
                ]
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["grafana plugins"]
      },
      "post": {
        "operationId": "v1_grafana-plugins_create",
        "description": "Create grafana plugins for instance.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["name", "description"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "Name of the grafana plugin",
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                },
                "description": {
                  "description": "Description of the grafana plugin",
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The Grafana plugin has been created successfully.",
            "schema": { "$ref": "#/definitions/GrafanaPluginSingle" },
            "examples": {
              "application/json": {
                "message": "Grafana Plugin Created",
                "plugin": {
                  "name": "Test Plugin",
                  "description": "This is a Test Plugin"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong creating Grafana plugin.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": { "application/json": { "message": "Something" } }
          }
        },
        "tags": ["grafana plugins"]
      },
      "parameters": []
    },
    "/v1/grafana-plugins/{pluginName}": {
      "get": {
        "operationId": "v1_grafana-plugins_read",
        "description": "Get grafana plugin.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get available grafana plugins",
            "schema": { "$ref": "#/definitions/GrafanaPluginSingle" },
            "examples": {
              "application/json": {
                "message": "Successfully got grafana plugins",
                "plugin": {
                  "name": "Test Plugin",
                  "description": "Test Description"
                }
              }
            }
          },
          "404": {
            "description": "Grafana plugin not found",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Grafana plugin not found" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["grafana plugins"]
      },
      "put": {
        "operationId": "v1_grafana-plugins_update",
        "description": "Update grafana plugin.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["description"],
              "type": "object",
              "properties": {
                "description": {
                  "description": "Description of the grafana plugin to update",
                  "type": "string",
                  "maxLength": 500,
                  "minLength": 1
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The grafana plugin was successfully updated.",
            "schema": { "$ref": "#/definitions/GrafanaPluginSingle" },
            "examples": {
              "application/json": {
                "message": "Successfully updated grafana plugin",
                "plugin": {
                  "name": "Test Plugin",
                  "description": "This is a Test Plugin"
                }
              }
            }
          },
          "404": {
            "description": "Grafana plugin not found",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Grafana plugin not found" }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["grafana plugins"]
      },
      "delete": {
        "operationId": "v1_grafana-plugins_delete",
        "description": "Delete grafana plugin.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The grafana plugin has been deleted successfully.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully deleted grafana plugin"
              }
            }
          },
          "404": {
            "description": "Grafana plugin not found",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Grafana plugin not found" }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["grafana plugins"]
      },
      "parameters": [
        {
          "name": "pluginName",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances": {
      "get": {
        "operationId": "v1_instances_list",
        "description": "Get all instances.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          },
          {
            "name": "search",
            "in": "header",
            "description": "search string that should be in service name",
            "type": "string"
          },
          {
            "name": "pageIdx",
            "in": "header",
            "description": "page index when the instance should be paged. It will return 25 instance per page",
            "type": "number"
          },
          {
            "name": "projectId",
            "in": "header",
            "description": "search all instances with a specific project id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all instances",
            "schema": { "$ref": "#/definitions/Services" },
            "examples": {
              "application/json": {
                "message": "Successfully got instances",
                "instances": [
                  {
                    "instance": "123456",
                    "cluster": "intern",
                    "grafanaUrl": "grafana.example.com",
                    "dashboardUrl": "dashboard.example.com",
                    "name": "test"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "No valid params",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": { "application/json": { "message": "No valid params" } }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["instances"]
      },
      "patch": {
        "operationId": "v1_instances_partial_update",
        "description": "Update all customer monitoring stacks according to the basic yaml in the api.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update all customer monitoring stacks according to the yaml in the api",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Update will be proceeded" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["instances"]
      },
      "parameters": []
    },
    "/v1/instances/{instanceId}": {
      "get": {
        "operationId": "v1_instances_read",
        "description": "Get instance information.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get instance data",
            "schema": { "$ref": "#/definitions/Service" },
            "examples": {
              "application/json": {
                "message": "Successfully got instance",
                "instance": {
                  "instance": "123456",
                  "cluster": "stackit",
                  "grafanaUrl": "https://ui.stackit.argus.eu01.cloud/instances/123456",
                  "dashboardUrl": "dashboard.example.com",
                  "grafanaPlugins": [],
                  "name": "test",
                  "grafanaAdminPassword": "asdf313kles23450des0asdf313kles2",
                  "grafanaAdminUser": "admin",
                  "metricsRetentionTimeRaw": 14,
                  "metricsRetentionTime5m": 0,
                  "metricsRetentionTime1h": 0,
                  "metricsUrl": "https://storage.api.stackit.argus.eu01.cloud/instances/123456",
                  "pushMetricsUrl": "https://push.metrics.stackit.argus.eu01.cloud/instances/123456/api/v1/receive",
                  "grafanaPublicReadAccess": false,
                  "targetsUrl": "https://metrics.stackit.argus.eu01.cloud/instances/123456",
                  "alertingUrl": "https://alerting.stackit.argus.eu01.cloud/instances/123456",
                  "plan": {
                    "planId": "7b1fbd9c-9acd-42ce-95d3-0f6822d6cabe",
                    "description": "Small Plan",
                    "name": "SmallPlan",
                    "bucketSize": 20,
                    "grafanaGlobalUsers": 10,
                    "grafanaGlobalOrgs": 2,
                    "grafanaGlobalDashboards": 20,
                    "alertRules": 1000,
                    "targetNumber": 2,
                    "samplesPerScrape": 1000,
                    "grafanaGlobalSessions": 10,
                    "amount": 49,
                    "alertReceivers": 10,
                    "alertMatchers": 10
                  },
                  "logsUrl": "https://logs.stackit.argus.eu01.cloud/instances/123456",
                  "logsPushUrl": "https://logs.stackit.argus.eu01.cloud/instances/123456/loki/api/v1/push",
                  "jaegerTracesUrl": "123456-gj.traces.stackit.argus.eu01.cloud:443",
                  "otlpTracesUrl": "123456-op.traces.stackit.argus.eu01.cloud:443",
                  "zipkinSpansUrl": "https://123456-zk.traces.stackit.argus.eu01.cloud/instances/123456",
                  "jaegerUiUrl": "https://123456-jui.traces.stackit.argus.eu01.cloud/instances/123456"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["instances"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertconfigs": {
      "get": {
        "operationId": "v1_instances_alertconfigs_list",
        "description": "Get alert config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config",
            "schema": { "$ref": "#/definitions/GetAlert" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "global": {
                    "smtpSmarthost": "localhost:25",
                    "smtpFrom": "alertmanager@example.org",
                    "smtpAuthUsername": "alertmanager",
                    "smtpAuthPassword": "password"
                  },
                  "route": {
                    "groupBy": ["alertname", "cluster", "service"],
                    "groupWait": "30s",
                    "groupInterval": "5m",
                    "repeatInterval": "3h",
                    "receiver": "team-X-mails",
                    "routes": [
                      {
                        "matchRe": { "service": "^(foo1|foo2|baz)$" },
                        "receiver": "team-X-paper",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-X-paper",
                            "routes": [
                              {
                                "match": { "severity": "warning" },
                                "receiver": "team-X-paper"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "match": { "service": "files" },
                        "receiver": "team-X-pager",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-Y-paper"
                          }
                        ]
                      }
                    ]
                  },
                  "inhibitRules": [
                    {
                      "sourceMatch": { "severity": "criticals" },
                      "targetMatch": { "severity": "warning" },
                      "equal": ["alertname", "cluster", "service"]
                    }
                  ],
                  "receivers": [
                    {
                      "name": "team-X-mails",
                      "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                    },
                    {
                      "name": "team-X-paper",
                      "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                    },
                    {
                      "name": "team-Y-paper",
                      "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                    },
                    {
                      "name": "team-X-pager",
                      "emailConfigs": [
                        { "to": "team-X+alerts-critical@example.org" }
                      ],
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "put": {
        "operationId": "v1_instances_alertconfigs_update",
        "description": "Update alert config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert config",
              "required": ["route", "receivers"],
              "type": "object",
              "properties": {
                "global": {
                  "description": "Global config. If nothing passed the default argus config will be used.",
                  "type": "object",
                  "properties": {
                    "resolveTimeout": {
                      "description": "ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt. \n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "5m",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "smtpFrom": {
                      "description": "The default SMTP From header field. \n`Additional Validators:`\n* must be a syntactically valid email address",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpSmarthost": {
                      "description": "The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS). Example: smtp.example.org:587 \n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpAuthUsername": {
                      "description": "SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpAuthPassword": {
                      "description": "SMTP Auth using LOGIN and PLAIN.",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpAuthIdentity": {
                      "description": "Auth identity.\n`Additional Validators:`\n* must be a syntactically valid email address",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "opsgenieApiKey": {
                      "description": "Opsgenie api key\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "opsgenieApiUrl": {
                      "description": "Opsgenie api url\n`Additional Validators:`\n* must be a syntactically valid url address",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    }
                  }
                },
                "route": {
                  "description": "The root node of the routing tree.",
                  "required": ["receiver"],
                  "type": "object",
                  "properties": {
                    "receiver": {
                      "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "groupBy": {
                      "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
                      "type": "array",
                      "items": {
                        "description": "As described",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 5
                    },
                    "groupWait": {
                      "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "30s",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "groupInterval": {
                      "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "5m",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "repeatInterval": {
                      "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "4h",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "match": {
                      "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "object",
                      "deprecated": true
                    },
                    "matchRe": {
                      "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                      "type": "object",
                      "deprecated": true
                    },
                    "matchers": {
                      "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                      "type": "array",
                      "items": {
                        "description": "Item of matchers",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 5
                    },
                    "routes": {
                      "description": "Zero or more child routes.",
                      "type": "array",
                      "items": {
                        "description": "As in one level above",
                        "type": "object",
                        "properties": {
                          "receiver": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 100,
                            "minLength": 1
                          },
                          "groupBy": {
                            "description": "",
                            "type": "array",
                            "items": {
                              "description": "As in one level above",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "maxLength": 5
                          },
                          "groupWait": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 8
                          },
                          "groupInterval": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 8,
                            "minLength": 2
                          },
                          "repeatInterval": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 8,
                            "minLength": 2
                          },
                          "match": {
                            "description": "As in one level above",
                            "type": "object"
                          },
                          "matchRe": {
                            "description": "As in one level above",
                            "type": "object"
                          },
                          "routes": {
                            "description": "Another child routes",
                            "type": "array",
                            "items": {
                              "description": "As in one level above",
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "receivers": {
                  "description": "A list of notification receivers.",
                  "type": "array",
                  "items": {
                    "description": "Receivers",
                    "required": ["name"],
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "emailConfigs": {
                        "description": "Email configurations",
                        "type": "array",
                        "items": {
                          "description": "",
                          "type": "object",
                          "properties": {
                            "to": {
                              "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "from": {
                              "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "smarthost": {
                              "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "authUsername": {
                              "description": "SMTP authentication information.",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "authPassword": {
                              "description": "SMTP authentication information.",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "authIdentity": {
                              "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "opsgenieConfigs": {
                        "description": "Configuration for ops genie.",
                        "type": "array",
                        "items": {
                          "description": "",
                          "type": "object",
                          "properties": {
                            "apiKey": {
                              "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "apiUrl": {
                              "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "tags": {
                              "description": "Comma separated list of tags attached to the notifications.",
                              "type": "string",
                              "maxLength": 400,
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "webHookConfigs": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "description": "",
                          "type": "object",
                          "properties": {
                            "url": {
                              "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                              "type": "string",
                              "maxLength": 500,
                              "minLength": 1
                            },
                            "msTeams": {
                              "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                              "type": "boolean",
                              "default": false
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "inhibitRules": {
                  "description": "A list of inhibition rules.",
                  "type": "object",
                  "properties": {
                    "sourceMatch": {
                      "description": "map of key:value. Matchers for which one or more alerts have to exist for the inhibition to take effect.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters\n* each key and value should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "object"
                    },
                    "sourceMatchRe": {
                      "description": "map of key:value. Regex match\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                      "type": "object"
                    },
                    "targetMatch": {
                      "description": "map of key:value. Matchers that have to be fulfilled in the alerts to be muted.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters\n* each key and value should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "object"
                    },
                    "targetMatchRe": {
                      "description": "map of key:value. Matchers that have to be fulfilled in the alerts to be muted. Regex.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                      "type": "object"
                    },
                    "equal": {
                      "description": "Labels that must have an equal value in the source and target alert for the inhibition to take effect.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "array",
                      "items": {
                        "description": "",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 10
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert config.",
            "schema": { "$ref": "#/definitions/PutAlert" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "global": {
                    "smtpSmarthost": "localhost:25",
                    "smtpFrom": "alertmanager@example.org",
                    "smtpAuthUsername": "alertmanager",
                    "smtpAuthPassword": "password"
                  },
                  "route": {
                    "groupBy": ["alertname", "cluster", "service"],
                    "groupWait": "30s",
                    "groupInterval": "5m",
                    "repeatInterval": "3h",
                    "receiver": "team-X-mails",
                    "routes": [
                      {
                        "matchRe": { "service": "^(foo1|foo2|baz)$" },
                        "receiver": "team-X-paper",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-X-paper",
                            "routes": [
                              {
                                "match": { "severity": "warning" },
                                "receiver": "team-X-paper"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "match": { "service": "files" },
                        "receiver": "team-X-pager",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-Y-paper"
                          }
                        ]
                      }
                    ]
                  },
                  "inhibitRules": [
                    {
                      "sourceMatch": { "severity": "criticals" },
                      "targetMatch": { "severity": "warning" },
                      "equal": ["alertname", "cluster", "service"]
                    }
                  ],
                  "receivers": [
                    {
                      "name": "team-X-mails",
                      "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                    },
                    {
                      "name": "team-X-paper",
                      "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                    },
                    {
                      "name": "team-Y-paper",
                      "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                    },
                    {
                      "name": "team-X-pager",
                      "emailConfigs": [
                        { "to": "team-X+alerts-critical@example.org" }
                      ],
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert config.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Could not update alert config" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertconfigs/receivers": {
      "get": {
        "operationId": "v1_instances_alertconfigs_receivers_list",
        "description": "Get alert config receivers.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config receivers",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "post": {
        "operationId": "v1_instances_alertconfigs_receivers_create",
        "description": "Create alert config receiver.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Receivers",
              "required": ["name"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "emailConfigs": {
                  "description": "Email configurations",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "to": {
                        "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "from": {
                        "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "smarthost": {
                        "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authUsername": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authPassword": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authIdentity": {
                        "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      }
                    }
                  }
                },
                "opsgenieConfigs": {
                  "description": "Configuration for ops genie.",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "apiKey": {
                        "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "apiUrl": {
                        "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "tags": {
                        "description": "Comma separated list of tags attached to the notifications.",
                        "type": "string",
                        "maxLength": 400,
                        "minLength": 1
                      }
                    }
                  }
                },
                "webHookConfigs": {
                  "description": "",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 500,
                        "minLength": 1
                      },
                      "msTeams": {
                        "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert config receiver.",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertconfigs/receivers/{receiver}": {
      "get": {
        "operationId": "v1_instances_alertconfigs_receivers_read",
        "description": "Get alert config receivers.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config receiver",
            "schema": {
              "$ref": "#/definitions/ReceiversResponseSerializerSingle"
            },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "name": "team-X-mails",
                  "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config receiver not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Alert config receiver not found."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "put": {
        "operationId": "v1_instances_alertconfigs_receivers_update",
        "description": "Update alert config receiver.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Receivers",
              "required": ["name"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "emailConfigs": {
                  "description": "Email configurations",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "to": {
                        "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "from": {
                        "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "smarthost": {
                        "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authUsername": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authPassword": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authIdentity": {
                        "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      }
                    }
                  }
                },
                "opsgenieConfigs": {
                  "description": "Configuration for ops genie.",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "apiKey": {
                        "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "apiUrl": {
                        "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "tags": {
                        "description": "Comma separated list of tags attached to the notifications.",
                        "type": "string",
                        "maxLength": 400,
                        "minLength": 1
                      }
                    }
                  }
                },
                "webHookConfigs": {
                  "description": "",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 500,
                        "minLength": 1
                      },
                      "msTeams": {
                        "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert config receiver.",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config receiver not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Alert config receiver not found."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "delete": {
        "operationId": "v1_instances_alertconfigs_receivers_delete",
        "description": "Delete alert config receiver.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert config receiver.",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config receiver not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Alert config receiver not found."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        { "name": "receiver", "in": "path", "required": true, "type": "string" }
      ]
    },
    "/v1/instances/{instanceId}/alertconfigs/routes": {
      "get": {
        "operationId": "v1_instances_alertconfigs_routes_list",
        "description": "Get alert config route.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config route",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "post": {
        "operationId": "v1_instances_alertconfigs_routes_create",
        "description": "Create alert config route in routes of route.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "The root node of the routing tree.",
              "required": ["receiver"],
              "type": "object",
              "properties": {
                "receiver": {
                  "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "groupBy": {
                  "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
                  "type": "array",
                  "items": {
                    "description": "As described",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "groupWait": {
                  "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "30s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "groupInterval": {
                  "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "5m",
                  "maxLength": 8,
                  "minLength": 2
                },
                "repeatInterval": {
                  "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "4h",
                  "maxLength": 8,
                  "minLength": 2
                },
                "match": {
                  "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@&?:-",
                  "type": "object",
                  "deprecated": true
                },
                "matchRe": {
                  "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object",
                  "deprecated": true
                },
                "matchers": {
                  "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "array",
                  "items": {
                    "description": "Item of matchers",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "routes": {
                  "description": "Zero or more child routes.",
                  "type": "array",
                  "items": {
                    "description": "As in one level above",
                    "type": "object",
                    "properties": {
                      "receiver": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                      },
                      "groupBy": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "groupWait": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8
                      },
                      "groupInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "repeatInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "match": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "matchRe": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "routes": {
                        "description": "Another child routes",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert config route.",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertconfigs/routes/{receiver}": {
      "get": {
        "operationId": "v1_instances_alertconfigs_routes_read",
        "description": "Get alert receiver for route.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config route",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "put": {
        "operationId": "v1_instances_alertconfigs_routes_update",
        "description": "Update alert receiver for route.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "The root node of the routing tree.",
              "required": ["receiver"],
              "type": "object",
              "properties": {
                "receiver": {
                  "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "groupBy": {
                  "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
                  "type": "array",
                  "items": {
                    "description": "As described",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "groupWait": {
                  "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "30s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "groupInterval": {
                  "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "5m",
                  "maxLength": 8,
                  "minLength": 2
                },
                "repeatInterval": {
                  "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "4h",
                  "maxLength": 8,
                  "minLength": 2
                },
                "match": {
                  "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@&?:-",
                  "type": "object",
                  "deprecated": true
                },
                "matchRe": {
                  "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object",
                  "deprecated": true
                },
                "matchers": {
                  "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "array",
                  "items": {
                    "description": "Item of matchers",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "routes": {
                  "description": "Zero or more child routes.",
                  "type": "array",
                  "items": {
                    "description": "As in one level above",
                    "type": "object",
                    "properties": {
                      "receiver": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                      },
                      "groupBy": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "groupWait": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8
                      },
                      "groupInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "repeatInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "match": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "matchRe": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "routes": {
                        "description": "Another child routes",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert config route.",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config route not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert config route not found." }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "delete": {
        "operationId": "v1_instances_alertconfigs_routes_delete",
        "description": "Delete alert receiver for route.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert config route.",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config route not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert config route not found." }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        { "name": "receiver", "in": "path", "required": true, "type": "string" }
      ]
    },
    "/v1/instances/{instanceId}/alertgroups": {
      "get": {
        "operationId": "v1_instances_alertgroups_list",
        "description": "Get alert groups.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert groups",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong." }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "post": {
        "operationId": "v1_instances_alertgroups_create",
        "description": "Create alert group.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["name", "rules"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the group. Must be unique.\n`Additional Validators:`\n* is the identifier and so unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Group successfully created",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Could not create alert group config",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": {
                "message": "Could not create alert group config"
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "patch": {
        "operationId": "v1_instances_alertgroups_partial_update",
        "description": "Patch alert groups.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of alert groups that should be created or updated",
              "type": "array",
              "items": {
                "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
                "required": ["name", "rules"],
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the group. Must be unique.\n`Additional Validators:`\n* is the identifier and so unique\n* should only include the characters: a-zA-Z0-9-",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "interval": {
                    "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                    "type": "string",
                    "default": "60s",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "rules": {
                    "description": "rules for the alert group",
                    "type": "array",
                    "items": {
                      "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                      "required": ["alert", "expr"],
                      "type": "object",
                      "properties": {
                        "alert": {
                          "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "expr": {
                          "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                          "type": "string",
                          "maxLength": 600,
                          "minLength": 1
                        },
                        "for": {
                          "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                          "type": "string",
                          "default": "0s",
                          "maxLength": 8,
                          "minLength": 2
                        },
                        "labels": {
                          "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                          "type": "object"
                        },
                        "annotations": {
                          "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert groups.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Groups successfully created.",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "delete": {
        "operationId": "v1_instances_alertgroups_delete",
        "description": "Delete alert groups.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "query",
            "description": "Name of the groups that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert groups.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Groups successfully deleted",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertgroups/{groupName}": {
      "get": {
        "operationId": "v1_instances_alertgroups_read",
        "description": "Get alert group.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert group",
            "schema": { "$ref": "#/definitions/AlertGroupResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": {
                  "name": "test alert",
                  "interval": "5m",
                  "rules": [
                    {
                      "alert": "up test",
                      "expr": "up == 1",
                      "labels": { "test": "test" },
                      "for": "30s",
                      "annotations": { "test": "test" }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not read alert group config"
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "put": {
        "operationId": "v1_instances_alertgroups_update",
        "description": "Update alert group config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["rules"],
              "type": "object",
              "properties": {
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group updated successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not update alert group config"
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "delete": {
        "operationId": "v1_instances_alertgroups_delete",
        "description": "Delete alert group config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group has been deleted successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong deleting the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not delete alert group config"
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertgroups/{groupName}/alertrules": {
      "get": {
        "operationId": "v1_instances_alertgroups_alertrules_list",
        "description": "Get alert rules.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert rules",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "post": {
        "operationId": "v1_instances_alertgroups_alertrules_create",
        "description": "Create alert rule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["alert", "expr"],
              "type": "object",
              "properties": {
                "alert": {
                  "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "for": {
                  "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                  "type": "string",
                  "default": "0s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                },
                "annotations": {
                  "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert rule.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Rule successfully created",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "patch": {
        "operationId": "v1_instances_alertgroups_alertrules_partial_update",
        "description": "Patch alert rules.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of alert rules that should be created or updated",
              "type": "array",
              "items": {
                "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                "required": ["alert", "expr"],
                "type": "object",
                "properties": {
                  "alert": {
                    "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "expr": {
                    "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                    "type": "string",
                    "maxLength": 600,
                    "minLength": 1
                  },
                  "for": {
                    "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                    "type": "string",
                    "default": "0s",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "labels": {
                    "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                    "type": "object"
                  },
                  "annotations": {
                    "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                    "type": "object"
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rules successfully created",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "delete": {
        "operationId": "v1_instances_alertgroups_alertrules_delete",
        "description": "Delete alert rules.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "alertName",
            "in": "query",
            "description": "Name of the alert rules that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rules successfully deleted",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertgroups/{groupName}/alertrules/{alertName}": {
      "get": {
        "operationId": "v1_instances_alertgroups_alertrules_read",
        "description": "Get alert rule.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert rules",
            "schema": { "$ref": "#/definitions/AlertRuleResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert rules",
                "data": {
                  "alert": "up test",
                  "expr": "up == 1",
                  "labels": { "test": "test" },
                  "for": "30s",
                  "annotations": { "test": "test" }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert rule not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert rule not found." }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "put": {
        "operationId": "v1_instances_alertgroups_alertrules_update",
        "description": "Update alert rule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["expr"],
              "type": "object",
              "properties": {
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "for": {
                  "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                  "type": "string",
                  "default": "0s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                },
                "annotations": {
                  "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rule updated successfully",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert rule not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert rule not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert rule.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "delete": {
        "operationId": "v1_instances_alertgroups_alertrules_delete",
        "description": "Delete alert rule.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert rule.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rules successfully deleted",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert rule not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert rule not found." }
            }
          },
          "400": {
            "description": "Something went wrong deleting the alert rule.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "parameters": [
        {
          "name": "alertName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertgroups/{groupName}/records": {
      "get": {
        "operationId": "v1_instances_alertgroups_records_list",
        "description": "Get alert records.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert records.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert records",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert records"]
      },
      "post": {
        "operationId": "v1_instances_alertgroups_records_create",
        "description": "Create alert record.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Record.\n`Additional Validators:`\n* total config (all alert groups/rules/records) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["record", "expr"],
              "type": "object",
              "properties": {
                "record": {
                  "description": "The name of the record.\n`Additional Validators:`\n* is the identifier and so unique in the group\n",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters\n",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert record successfully created",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": { "application/json": { "message": "Something wrong" } }
          }
        },
        "tags": ["alert records"]
      },
      "patch": {
        "operationId": "v1_instances_alertgroups_records_partial_update",
        "description": "Patch alert records.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of records that should be created or updated",
              "type": "array",
              "items": {
                "description": "Record.\n`Additional Validators:`\n* total config (all alert groups/rules/records) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                "required": ["record", "expr"],
                "type": "object",
                "properties": {
                  "record": {
                    "description": "The name of the record.\n`Additional Validators:`\n* is the identifier and so unique in the group\n",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "expr": {
                    "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                    "type": "string",
                    "maxLength": 600,
                    "minLength": 1
                  },
                  "labels": {
                    "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters\n",
                    "type": "object"
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert records.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert records successfully created",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert records"]
      },
      "delete": {
        "operationId": "v1_instances_alertgroups_records_delete",
        "description": "Delete alert records.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "alertRecord",
            "in": "query",
            "description": "Name of the records that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert records.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert records successfully deleted",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert records"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/alertgroups/{groupName}/records/{alertRecord}": {
      "get": {
        "operationId": "v1_instances_alertgroups_records_read",
        "description": "Get alert record.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert record",
                "data": {
                  "record": "job:prometheus_http_requests_total:rate5m",
                  "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                  "labels": { "test": "test" }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          },
          "404": {
            "description": "Alert record not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert record not found." }
            }
          }
        },
        "tags": ["alert records"]
      },
      "put": {
        "operationId": "v1_instances_alertgroups_records_update",
        "description": "Update alert record.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Record.\n`Additional Validators:`\n* total config (all alert groups/rules/records) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["record", "expr"],
              "type": "object",
              "properties": {
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert record updated successfully",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert record not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert record not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the record.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert records"]
      },
      "delete": {
        "operationId": "v1_instances_alertgroups_records_delete",
        "description": "Delete alert record.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert record successfully deleted",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert record not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Could not delete record" }
            }
          }
        },
        "tags": ["alert records"]
      },
      "parameters": [
        {
          "name": "alertRecord",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/auth": {
      "get": {
        "operationId": "v1_instances_auth_list",
        "description": "Get authentication.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth and broker.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Is authenticated",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": { "application/json": { "message": "Authenticated" } }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["api user authentication check"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/backup-restores/{backupDate}": {
      "post": {
        "operationId": "v1_instances_backup-restores_create",
        "description": "Restore backup.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "restoreTarget",
            "in": "query",
            "description": "List of restore targets",
            "required": true,
            "type": "string",
            "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
          }
        ],
        "responses": {
          "202": {
            "description": "Restore backup",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Restore will be proceeded" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup not found",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup not found" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "backupDate",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/backup-retentions": {
      "get": {
        "operationId": "v1_instances_backup-retentions_list",
        "description": "Get backup retention.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get backup retention",
            "schema": { "$ref": "#/definitions/BackupRetentionResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got backup retention",
                "alertConfigBackupRetention": "14d",
                "scrapeConfigBackupRetention": "14d",
                "alertRulesBackupRetention": "14d",
                "grafanaBackupRetention": "14d"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "put": {
        "operationId": "v1_instances_backup-retentions_update",
        "description": "Update backup retention.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["retention"],
              "type": "object",
              "properties": {
                "retention": {
                  "description": "How long the backups should be stored.\n`Additional Validators:`\n* must be a valid time string",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Update backup retention",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup retention will be updated"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/backup-schedules": {
      "get": {
        "operationId": "v1_instances_backup-schedules_list",
        "description": "Get backup schedules.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get backup schedules.",
            "schema": { "$ref": "#/definitions/BackupScheduleResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got backup schedules",
                "alertConfigBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe5"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81a"
                  }
                ],
                "alertRulesBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe6"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81b"
                  }
                ],
                "scrapeConfigBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe7"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81c"
                  }
                ],
                "grafanaBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe8"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81d"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "post": {
        "operationId": "v1_instances_backup-schedules_create",
        "description": "Create backup schedule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["schedule"],
              "type": "object",
              "properties": {
                "schedule": {
                  "description": "The schedule for how often to create a backup.\n`Additional Validators:`\n* must be a valid cronjob format\n* must run less than hourly",
                  "type": "string",
                  "maxLength": 100
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Create backup schedule",
            "schema": { "$ref": "#/definitions/BackupSchedulePostResponse" },
            "examples": {
              "application/json": {
                "message": "Backup schedule will be created",
                "schedule": "*/5 * * * *"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/backup-schedules/{scheduleId}": {
      "put": {
        "operationId": "v1_instances_backup-schedules_update",
        "description": "Update backup schedule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["schedule"],
              "type": "object",
              "properties": {
                "schedule": {
                  "description": "The schedule for how often to create a backup.\n`Additional Validators:`\n* must be a valid cronjob format\n* must run less than hourly",
                  "type": "string",
                  "maxLength": 100
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update backup schedule",
            "schema": { "$ref": "#/definitions/BackupSchedulePutResponse" },
            "examples": {
              "application/json": {
                "message": "Backup schedule will be updated",
                "schedule": {
                  "schedule": "1 * * * *",
                  "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe5"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup schedule does not exists",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup schedule does not exists"
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "delete": {
        "operationId": "v1_instances_backup-schedules_delete",
        "description": "Delete backup schedule.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete backup schedule",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup schedule will be deleted"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup schedule does not exists",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup schedule does not exists"
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "scheduleId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/backups": {
      "get": {
        "operationId": "v1_instances_backups_list",
        "description": "Get backups.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all backups",
            "schema": { "$ref": "#/definitions/BackupResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got backups",
                "alertConfigBackups": [
                  "11-08-2021T14:08:21",
                  "14-08-2021T06:35:40"
                ],
                "alertRulesBackups": [
                  "11-08-2021T14:08:22",
                  "14-08-2021T06:35:41"
                ],
                "scrapeConfigBackups": [
                  "11-08-2021T14:08:23",
                  "14-08-2021T06:35:42"
                ],
                "grafanaBackups": ["11-08-2021T14:08:31", "14-08-2021T06:35:43"]
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "502": {
            "description": "Connection to object storage could not be established.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not get backups from storage"
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "post": {
        "operationId": "v1_instances_backups_create",
        "description": "Create a backup.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Create backup",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup will be created" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/backups/{backupDate}": {
      "delete": {
        "operationId": "v1_instances_backups_delete",
        "description": "Delete backup.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "Backup target selector",
            "required": true,
            "type": "string",
            "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
          }
        ],
        "responses": {
          "202": {
            "description": "Delete backup",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup will be deleted" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup not found" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "backupDate",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/grafana-configs": {
      "get": {
        "operationId": "v1_instances_grafana-configs_list",
        "description": "Get grafana config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get grafana config.",
            "schema": {
              "$ref": "#/definitions/GrafanaConfigsSerializerRespond"
            },
            "examples": {
              "application/json": {
                "message": "Successfully got grafana config",
                "publicReadAccess": false
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["grafana configs"]
      },
      "put": {
        "operationId": "v1_instances_grafana-configs_update",
        "description": "Update grafana config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Sending any of the attributes results in a set of the attribute and overwrites any previous configuration.",
              "type": "object",
              "properties": {
                "publicReadAccess": {
                  "description": "If it's true, anyone can access the Grafana dashboards without logging in. If it is wrong, a login is required.",
                  "type": "boolean"
                },
                "genericOauth": {
                  "required": [
                    "enabled",
                    "apiUrl",
                    "authUrl",
                    "tokenUrl",
                    "oauthClientId",
                    "oauthClientSecret",
                    "roleAttributePath"
                  ],
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "enable or disable generic oauth login",
                      "type": "boolean"
                    },
                    "apiUrl": {
                      "description": "Set api_url to the resource that returns OpenID UserInfo compatible information.",
                      "type": "string"
                    },
                    "authUrl": {
                      "description": "Authentication endpoint of idp.",
                      "type": "string"
                    },
                    "scopes": {
                      "description": "Space seperated list of scopes of the token",
                      "type": "string",
                      "default": "openid profile email"
                    },
                    "tokenUrl": {
                      "description": "Token endpoint of the idp.",
                      "type": "string"
                    },
                    "oauthClientId": {
                      "description": "Oauth client id for auth endpoint.",
                      "type": "string"
                    },
                    "oauthClientSecret": {
                      "description": "Oauth client secret for auth endpoint.",
                      "type": "string"
                    },
                    "roleAttributeStrict": {
                      "description": "If  therole_attribute_path property does not return a role, then the user is assigned the Viewer role by default. You can disable the role assignment by setting role_attribute_strict = true. It denies user access if no role or an invalid role is returned.",
                      "type": "boolean",
                      "default": true
                    },
                    "roleAttributePath": {
                      "description": "Grafana checks for the presence of a role using the JMESPath specified via the role_attribute_path configuration option. The JMESPath is applied to the id_token first. If there is no match, then the UserInfo endpoint specified via the api_url configuration option is tried next. The result after evaluation of the role_attribute_path JMESPath expression should be a valid Grafana role, for example, Viewer, Editor or Admin\nFor example: contains(roles[\\*], 'grafana-admin') && 'Admin' || contains(roles[\\*], 'grafana-editor') && 'Editor' || contains(roles[\\*], 'grafana-viewer') && 'Viewer'",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update grafana config.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated grafana config"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["grafana configs"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/logs-alertgroups": {
      "get": {
        "operationId": "v1_instances_logs-alertgroups_list",
        "description": "Get logs alert groups config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert groups",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong." }
            }
          }
        },
        "tags": ["logs"]
      },
      "post": {
        "operationId": "v1_instances_logs-alertgroups_create",
        "description": "Create logs alert group config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["name", "rules"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the group. Must be unique.\n`Additional Validators:`\n* is the identifier and so unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Group successfully created",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Could not create alert group config",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": {
                "message": "Could not create alert group config"
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/logs-alertgroups/{groupName}": {
      "get": {
        "operationId": "v1_instances_logs-alertgroups_read",
        "description": "Get logs alert group config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert group",
            "schema": { "$ref": "#/definitions/AlertGroupResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": {
                  "name": "test alert",
                  "interval": "5m",
                  "rules": [
                    {
                      "alert": "up test",
                      "expr": "up == 1",
                      "labels": { "test": "test" },
                      "for": "30s",
                      "annotations": { "test": "test" }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not read alert group config"
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          }
        },
        "tags": ["logs"]
      },
      "put": {
        "operationId": "v1_instances_logs-alertgroups_update",
        "description": "Update logs alert group config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["rules"],
              "type": "object",
              "properties": {
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group updated successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not update alert group config"
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "delete": {
        "operationId": "v1_instances_logs-alertgroups_delete",
        "description": "Delete logs alert group config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group has been deleted successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong deleting the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not delete alert group config"
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/logs-configs": {
      "get": {
        "operationId": "v1_instances_logs-configs_list",
        "description": "Get logs configuration.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get logs config.",
            "schema": { "$ref": "#/definitions/LogsConfigResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got logs config",
                "config": { "retention": "14d" }
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "put": {
        "operationId": "v1_instances_logs-configs_update",
        "description": "Update logs config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["retention"],
              "type": "object",
              "properties": {
                "retention": {
                  "description": "How long to keep the logs\n`Additional Validators:`\n* Should be a valid time string\n* Should not be longer than 30 days",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update logs config",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated logs configuration"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["logs"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/metrics-storage-retentions": {
      "get": {
        "operationId": "v1_instances_metrics-storage-retentions_list",
        "description": "Get metric storage retention time.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get metric storage retention",
            "schema": { "$ref": "#/definitions/BucketRetentionTimeRespond" },
            "examples": {
              "application/json": {
                "message": "Successfully got metric storage retention",
                "metricsRetentionTimeRaw": "14d",
                "metricsRetentionTime5m": "0d",
                "metricsRetentionTime1h": "0d"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["metrics storage retention"]
      },
      "put": {
        "operationId": "v1_instances_metrics-storage-retentions_update",
        "description": "Update metric update retention time.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "metricsRetentionTimeRaw",
                "metricsRetentionTime5m",
                "metricsRetentionTime1h"
              ],
              "type": "object",
              "properties": {
                "metricsRetentionTimeRaw": {
                  "description": "Retention time of longtime storage of raw sampled data. After that time the data will be down sampled to 5m.\nKeep in mind, that the initial goal of downsampling is not saving disk or object storage space. In fact, downsampling doesn't save you any space but instead, it adds 2 more blocks for each raw block which are only slightly smaller or relatively similar size to raw block. This is done by internal downsampling implementation which to be mathematically correct holds various aggregations. This means that downsampling can increase the size of your storage a bit (~3x), if you choose to store all resolutions (recommended). The goal of downsampling is to provide an opportunity to get fast results for range queries of big time intervals like months or years.\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than 13 months",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsRetentionTime5m": {
                  "description": "Retention time of longtime storage of 5m sampled data. After that time the data will be down sampled to 1h.\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than metricsRetentionTimeRaw",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsRetentionTime1h": {
                  "description": "Retention time of longtime storage of 1h sampled data. After that time the data will be deleted permanently.\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than metricsRetentionTime5m",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update metric storage retention",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated metric storage retention"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["metrics storage retention"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/scrapeconfigs": {
      "get": {
        "operationId": "v1_instances_scrapeconfigs_list",
        "description": "Get scrape configs.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all scrape targets.",
            "schema": { "$ref": "#/definitions/GetAllJob" },
            "examples": {
              "application/json": {
                "message": "Successfully got scrape config",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "post": {
        "operationId": "v1_instances_scrapeconfigs_create",
        "description": "Create scrape config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "jobName",
                "scheme",
                "scrapeInterval",
                "scrapeTimeout",
                "staticConfigs"
              ],
              "type": "object",
              "properties": {
                "staticConfigs": {
                  "description": "A list of scrape configurations.",
                  "type": "array",
                  "items": {
                    "required": ["targets"],
                    "type": "object",
                    "properties": {
                      "targets": {
                        "description": "The targets specified by the static config.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 500,
                          "minLength": 1
                        }
                      },
                      "labels": {
                        "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                },
                "jobName": {
                  "description": "The job name assigned to scraped metrics by default.\n`Additional Validators:`\n* must be unique\n* key and values should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "scheme": {
                  "description": "Configures the protocol scheme used for requests. https or http",
                  "type": "string",
                  "enum": ["http", "https"]
                },
                "scrapeInterval": {
                  "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "scrapeTimeout": {
                  "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsPath": {
                  "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
                  "type": "string",
                  "default": "/metrics",
                  "maxLength": 200,
                  "minLength": 1
                },
                "sampleLimit": {
                  "description": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabeling the entire scrape will be treated as failed. The total limit depends on the service plan target limits * samples",
                  "type": "number",
                  "default": 5000,
                  "maxLength": 8,
                  "minLength": 1
                },
                "basicAuth": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                  "type": "object",
                  "properties": {
                    "username": {
                      "description": "username",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "password": {
                      "description": "password",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    }
                  }
                },
                "oauth2": {
                  "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                  "required": ["clientId", "clientSecret", "tokenUrl"],
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "description": "clientId",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "clientSecret": {
                      "description": "clientSecret",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "tokenUrl": {
                      "description": "The URL to fetch the token from.",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "scopes": {
                      "description": "The URL to fetch the token from.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 10,
                      "minLength": 1
                    },
                    "tlsConfig": {
                      "description": "Configures the scrape request's TLS settings.",
                      "type": "object",
                      "properties": {
                        "insecureSkipVerify": {
                          "description": "Disable validation of the server certificate.",
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                },
                "tlsConfig": {
                  "description": "Configures the scrape request's TLS settings.",
                  "type": "object",
                  "properties": {
                    "insecureSkipVerify": {
                      "description": "Disable validation of the server certificate.",
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                "bearerToken": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
                  "type": "string"
                },
                "metricsRelabelConfigs": {
                  "description": "List of metric relabel configurations",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sourceLabels": {
                        "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "separator": {
                        "description": "Separator placed between concatenated source label values.",
                        "type": "string",
                        "default": ";",
                        "maxLength": 20,
                        "minLength": 1
                      },
                      "targetLabel": {
                        "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "regex": {
                        "description": "Regular expression against which the extracted value is matched.",
                        "type": "string",
                        "default": ".*",
                        "maxLength": 400,
                        "minLength": 1
                      },
                      "modulus": {
                        "description": "Modulus to take of the hash of the source label values.",
                        "type": "number",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "replacement": {
                        "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                        "type": "string",
                        "default": "$1",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "action": {
                        "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                        "type": "string",
                        "enum": [
                          "replace",
                          "keep",
                          "drop",
                          "hashmod",
                          "labelmap",
                          "labeldrop",
                          "labelkeep"
                        ],
                        "default": "replace"
                      }
                    }
                  }
                },
                "params": {
                  "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                  "type": "object"
                },
                "httpSDConfigs": {
                  "description": "HTTP-based service discovery provides a more generic way to configure static targets and serves as an interface to plug in custom service discovery mechanisms.",
                  "type": "array",
                  "items": {
                    "required": ["url"],
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "URL from which the targets are fetched.",
                        "type": "string",
                        "maxLength": 400
                      },
                      "refreshInterval": {
                        "description": "Refresh interval to re-query the endpoint. E.g. 60s\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                        "type": "string",
                        "default": "60s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "basicAuth": {
                        "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                        "type": "object",
                        "properties": {
                          "username": {
                            "description": "username",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "password": {
                            "description": "password",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          }
                        }
                      },
                      "tlsConfig": {
                        "description": "Configures the scrape request's TLS settings.",
                        "type": "object",
                        "properties": {
                          "insecureSkipVerify": {
                            "description": "Disable validation of the server certificate.",
                            "type": "boolean",
                            "default": false
                          }
                        }
                      },
                      "oauth2": {
                        "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                        "required": ["clientId", "clientSecret", "tokenUrl"],
                        "type": "object",
                        "properties": {
                          "clientId": {
                            "description": "clientId",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "clientSecret": {
                            "description": "clientSecret",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "tokenUrl": {
                            "description": "The URL to fetch the token from.",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "scopes": {
                            "description": "The URL to fetch the token from.",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "maxLength": 10,
                            "minLength": 1
                          },
                          "tlsConfig": {
                            "description": "Configures the scrape request's TLS settings.",
                            "type": "object",
                            "properties": {
                              "insecureSkipVerify": {
                                "description": "Disable validation of the server certificate.",
                                "type": "boolean",
                                "default": false
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "honorLabels": {
                  "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
                  "type": "boolean",
                  "default": "false"
                },
                "honorTimeStamps": {
                  "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
                  "type": "boolean",
                  "default": "false"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create scrape target.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Scrape target successfully created",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "patch": {
        "operationId": "v1_instances_scrapeconfigs_partial_update",
        "description": "Update scrape configs.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of jobs that should be created or updated",
              "type": "array",
              "items": {
                "required": [
                  "jobName",
                  "scheme",
                  "scrapeInterval",
                  "scrapeTimeout",
                  "staticConfigs"
                ],
                "type": "object",
                "properties": {
                  "staticConfigs": {
                    "description": "A list of scrape configurations.",
                    "type": "array",
                    "items": {
                      "required": ["targets"],
                      "type": "object",
                      "properties": {
                        "targets": {
                          "description": "The targets specified by the static config.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "maxLength": 500,
                            "minLength": 1
                          }
                        },
                        "labels": {
                          "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                          "type": "object"
                        }
                      }
                    }
                  },
                  "jobName": {
                    "description": "The job name assigned to scraped metrics by default.\n`Additional Validators:`\n* must be unique\n* key and values should only include the characters: a-zA-Z0-9-",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "scheme": {
                    "description": "Configures the protocol scheme used for requests. https or http",
                    "type": "string",
                    "enum": ["http", "https"]
                  },
                  "scrapeInterval": {
                    "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "scrapeTimeout": {
                    "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "metricsPath": {
                    "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
                    "type": "string",
                    "default": "/metrics",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "sampleLimit": {
                    "description": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabeling the entire scrape will be treated as failed. The total limit depends on the service plan target limits * samples",
                    "type": "number",
                    "default": 5000,
                    "maxLength": 8,
                    "minLength": 1
                  },
                  "basicAuth": {
                    "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                    "type": "object",
                    "properties": {
                      "username": {
                        "description": "username",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "password": {
                        "description": "password",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      }
                    }
                  },
                  "oauth2": {
                    "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                    "required": ["clientId", "clientSecret", "tokenUrl"],
                    "type": "object",
                    "properties": {
                      "clientId": {
                        "description": "clientId",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "clientSecret": {
                        "description": "clientSecret",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "tokenUrl": {
                        "description": "The URL to fetch the token from.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "scopes": {
                        "description": "The URL to fetch the token from.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 10,
                        "minLength": 1
                      },
                      "tlsConfig": {
                        "description": "Configures the scrape request's TLS settings.",
                        "type": "object",
                        "properties": {
                          "insecureSkipVerify": {
                            "description": "Disable validation of the server certificate.",
                            "type": "boolean",
                            "default": false
                          }
                        }
                      }
                    }
                  },
                  "tlsConfig": {
                    "description": "Configures the scrape request's TLS settings.",
                    "type": "object",
                    "properties": {
                      "insecureSkipVerify": {
                        "description": "Disable validation of the server certificate.",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  },
                  "bearerToken": {
                    "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
                    "type": "string"
                  },
                  "metricsRelabelConfigs": {
                    "description": "List of metric relabel configurations",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "sourceLabels": {
                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "maxLength": 5
                        },
                        "separator": {
                          "description": "Separator placed between concatenated source label values.",
                          "type": "string",
                          "default": ";",
                          "maxLength": 20,
                          "minLength": 1
                        },
                        "targetLabel": {
                          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "regex": {
                          "description": "Regular expression against which the extracted value is matched.",
                          "type": "string",
                          "default": ".*",
                          "maxLength": 400,
                          "minLength": 1
                        },
                        "modulus": {
                          "description": "Modulus to take of the hash of the source label values.",
                          "type": "number",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "replacement": {
                          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                          "type": "string",
                          "default": "$1",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "action": {
                          "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                          "type": "string",
                          "enum": [
                            "replace",
                            "keep",
                            "drop",
                            "hashmod",
                            "labelmap",
                            "labeldrop",
                            "labelkeep"
                          ],
                          "default": "replace"
                        }
                      }
                    }
                  },
                  "params": {
                    "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                    "type": "object"
                  },
                  "httpSDConfigs": {
                    "description": "HTTP-based service discovery provides a more generic way to configure static targets and serves as an interface to plug in custom service discovery mechanisms.",
                    "type": "array",
                    "items": {
                      "required": ["url"],
                      "type": "object",
                      "properties": {
                        "url": {
                          "description": "URL from which the targets are fetched.",
                          "type": "string",
                          "maxLength": 400
                        },
                        "refreshInterval": {
                          "description": "Refresh interval to re-query the endpoint. E.g. 60s\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                          "type": "string",
                          "default": "60s",
                          "maxLength": 8,
                          "minLength": 2
                        },
                        "basicAuth": {
                          "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                          "type": "object",
                          "properties": {
                            "username": {
                              "description": "username",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "password": {
                              "description": "password",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            }
                          }
                        },
                        "tlsConfig": {
                          "description": "Configures the scrape request's TLS settings.",
                          "type": "object",
                          "properties": {
                            "insecureSkipVerify": {
                              "description": "Disable validation of the server certificate.",
                              "type": "boolean",
                              "default": false
                            }
                          }
                        },
                        "oauth2": {
                          "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                          "required": ["clientId", "clientSecret", "tokenUrl"],
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "description": "clientId",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "clientSecret": {
                              "description": "clientSecret",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "tokenUrl": {
                              "description": "The URL to fetch the token from.",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "scopes": {
                              "description": "The URL to fetch the token from.",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "maxLength": 200,
                                "minLength": 1
                              },
                              "maxLength": 10,
                              "minLength": 1
                            },
                            "tlsConfig": {
                              "description": "Configures the scrape request's TLS settings.",
                              "type": "object",
                              "properties": {
                                "insecureSkipVerify": {
                                  "description": "Disable validation of the server certificate.",
                                  "type": "boolean",
                                  "default": false
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "honorLabels": {
                    "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
                    "type": "boolean",
                    "default": "false"
                  },
                  "honorTimeStamps": {
                    "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
                    "type": "boolean",
                    "default": "false"
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create scrape targets.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Scrape targets successfully created",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "delete": {
        "operationId": "v1_instances_scrapeconfigs_delete",
        "description": "Delete scrape configs.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobName",
            "in": "query",
            "description": "Name of the jobs that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted scrape configs.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Scrape configs successfully deleted",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/instances/{instanceId}/scrapeconfigs/{jobName}": {
      "get": {
        "operationId": "v1_instances_scrapeconfigs_read",
        "description": "Get scrape config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get scrape target.",
            "schema": { "$ref": "#/definitions/GetJob" },
            "examples": {
              "application/json": {
                "message": "Successfully got scrape target",
                "data": {
                  "jobName": "test",
                  "scheme": "https",
                  "scrapeInterval": "5m",
                  "scrapeTimeout": "1m",
                  "staticConfigs": [{ "targets": ["example.com"] }],
                  "metricsPath": "/metrics"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "put": {
        "operationId": "v1_instances_scrapeconfigs_update",
        "description": "Update scrape config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "scheme",
                "scrapeInterval",
                "scrapeTimeout",
                "staticConfigs",
                "metricsPath"
              ],
              "type": "object",
              "properties": {
                "staticConfigs": {
                  "description": "A list of scrape configurations.",
                  "type": "array",
                  "items": {
                    "required": ["targets"],
                    "type": "object",
                    "properties": {
                      "targets": {
                        "description": "The targets specified by the static config.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 500,
                          "minLength": 1
                        }
                      },
                      "labels": {
                        "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                },
                "scheme": {
                  "description": "Configures the protocol scheme used for requests. https or http",
                  "type": "string",
                  "enum": ["http", "https"]
                },
                "scrapeInterval": {
                  "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "scrapeTimeout": {
                  "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsPath": {
                  "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
                  "type": "string",
                  "default": "/metrics",
                  "maxLength": 200,
                  "minLength": 1
                },
                "basicAuth": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                  "type": "object",
                  "properties": {
                    "username": {
                      "description": "username",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "password": {
                      "description": "password",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    }
                  }
                },
                "tlsConfig": {
                  "description": "Configures the scrape request's TLS settings.",
                  "type": "object",
                  "properties": {
                    "insecureSkipVerify": {
                      "description": "Disable validation of the server certificate.",
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                "bearerToken": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
                  "type": "string"
                },
                "metricsRelabelConfigs": {
                  "description": "List of metric relabel configurations",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sourceLabels": {
                        "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "separator": {
                        "description": "Separator placed between concatenated source label values.",
                        "type": "string",
                        "default": ";",
                        "maxLength": 20,
                        "minLength": 1
                      },
                      "targetLabel": {
                        "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "regex": {
                        "description": "Regular expression against which the extracted value is matched.",
                        "type": "string",
                        "default": ".*",
                        "maxLength": 400,
                        "minLength": 1
                      },
                      "modulus": {
                        "description": "Modulus to take of the hash of the source label values.",
                        "type": "number",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "replacement": {
                        "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                        "type": "string",
                        "default": "$1",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "action": {
                        "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                        "type": "string",
                        "enum": [
                          "replace",
                          "keep",
                          "drop",
                          "hashmod",
                          "labelmap",
                          "labeldrop",
                          "labelkeep"
                        ],
                        "default": "replace"
                      }
                    }
                  }
                },
                "params": {
                  "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                  "type": "object"
                },
                "honorLabels": {
                  "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
                  "type": "boolean",
                  "default": "false"
                },
                "honorTimeStamps": {
                  "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
                  "type": "boolean",
                  "default": "false"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update scrape target.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Successfully updated scrape target",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Scrape target not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Scrape target not found." }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "delete": {
        "operationId": "v1_instances_scrapeconfigs_delete",
        "description": "Delete scrape config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete scrape target.",
            "schema": { "$ref": "#/definitions/DeleteJob" },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ],
                "message": "Job has been deleted successfully"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Scrape target not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Scrape target not found." }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        { "name": "jobName", "in": "path", "required": true, "type": "string" }
      ]
    },
    "/v1/instances/{instanceId}/traces-configs": {
      "get": {
        "operationId": "v1_instances_traces-configs_list",
        "description": "Get traces config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get traces config.",
            "schema": { "$ref": "#/definitions/TracesConfigResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got traces config",
                "config": { "retention": "14d" }
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["traces"]
      },
      "put": {
        "operationId": "v1_instances_traces-configs_update",
        "description": "Update traces config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["retention"],
              "type": "object",
              "properties": {
                "retention": {
                  "description": "How long to keep the traces\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than 30 days",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update traces config.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated traces configuration"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["traces"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/monitoring-auth": {
      "get": {
        "operationId": "v1_monitoring-auth_list",
        "description": "Get pcs authenticated.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get authenticated for pcs",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Is authenticated" }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["cluster"]
      },
      "parameters": []
    },
    "/v1/monitoring-sd": {
      "get": {
        "operationId": "v1_monitoring-sd_list",
        "description": "Get list of targets to scrape.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of prometheus cluster scrapes",
            "schema": { "type": "object", "properties": {} },
            "examples": {
              "application/json": [
                { "targets": ["pcs.testing.argus.eu01.stackit.cloud"] }
              ]
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["cluster"]
      },
      "parameters": []
    },
    "/v1/osb/clusters/{clusterId}/instances/{instanceId}": {
      "post": {
        "operationId": "v1_osb_clusters_instances_create",
        "description": "Create monitoring stack.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["planId"],
              "type": "object",
              "properties": {
                "tags": {
                  "description": "String array of tags",
                  "type": "array",
                  "items": { "type": "string" }
                },
                "serviceName": {
                  "description": "Name of the service",
                  "type": "string"
                },
                "orgId": {
                  "description": "Marketplace organization id",
                  "type": "string"
                },
                "metricsRetentionTimeRaw": {
                  "description": "Retention time of longtime storage of raw sampled data. Any value < 1d or wrong time string format will result in 14d. After that time the data will be down sampled to 5m.",
                  "type": "string"
                },
                "metricsRetentionTime5m": {
                  "description": "Retention time of longtime storage of 5m sampled data. Any value < 1d or wrong time string format will result in 0d. After that time the data will be down sampled to 1h.",
                  "type": "string"
                },
                "metricsRetentionTime1h": {
                  "description": "Retention time of longtime storage of 1h sampled data. Any value < 1d or wrong time string format will result in 0d. After that time the data will be deleted permanently.",
                  "type": "string"
                },
                "planId": {
                  "description": "plan id that should be a plan in database.",
                  "type": "uuid"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth and broker auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The monitoring stack was successfully created.",
            "schema": { "$ref": "#/definitions/Dashboard" },
            "examples": {
              "application/json": {
                "message": "Successfully created monitoring stack",
                "dashboardUrl": "https://example-dashboard.com"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "500": {
            "description": "Something went wrong creating the monitoring stack.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Something went wrong creating the monitoring stack"
              }
            }
          }
        },
        "tags": ["osb"]
      },
      "put": {
        "operationId": "v1_osb_clusters_instances_update",
        "description": "Update monitoring stack.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["planId"],
              "type": "object",
              "properties": {
                "tags": {
                  "description": "String array of tags",
                  "type": "array",
                  "items": { "type": "string" }
                },
                "serviceName": {
                  "description": "Name of the service",
                  "type": "string"
                },
                "orgId": {
                  "description": "Marketplace organization id",
                  "type": "string"
                },
                "metricsRetentionTimeRaw": {
                  "description": "Retention time of longtime storage of raw sampled data. Any value < 1d or wrong time string format will result in 14d. After that time the data will be down sampled to 5m.",
                  "type": "string"
                },
                "metricsRetentionTime5m": {
                  "description": "Retention time of longtime storage of 5m sampled data. Any value < 1d or wrong time string format will result in 0d. After that time the data will be down sampled to 1h.",
                  "type": "string"
                },
                "metricsRetentionTime1h": {
                  "description": "Retention time of longtime storage of 1h sampled data. Any value < 1d or wrong time string format will result in 0d. After that time the data will be deleted permanently.",
                  "type": "string"
                },
                "planId": {
                  "description": "plan id that should be a plan in database.",
                  "type": "uuid"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth and broker auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The monitoring stack was successfully updated.",
            "schema": { "$ref": "#/definitions/Dashboard" },
            "examples": {
              "application/json": {
                "message": "Successfully updated monitoring stack",
                "dashboardUrl": "https://example-dashboard.com"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "500": {
            "description": "Something went wrong creating the monitoring stack.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Something went wrong creating the monitoring stack"
              }
            }
          }
        },
        "tags": ["osb"]
      },
      "delete": {
        "operationId": "v1_osb_clusters_instances_delete",
        "description": "Delete a monitoring stack.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth and broker auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The monitoring stack was successfully deleted.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully deleted monitoring stack"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "500": {
            "description": "Something went wrong deleting the monitoring stack.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Something went wrong deleting the monitoring stack"
              }
            }
          }
        },
        "tags": ["osb"]
      },
      "parameters": [
        {
          "name": "clusterId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/osb/clusters/{clusterId}/instances/{instanceId}/users": {
      "get": {
        "operationId": "v1_osb_clusters_instances_users_list",
        "description": "Get all api users.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts system permissions.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got api users.",
            "schema": { "$ref": "#/definitions/ApiUser" },
            "examples": {
              "application/json": {
                "message": "Successfully got api users",
                "apiUsers": ["test_test_12345678"]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["osb"]
      },
      "parameters": [
        {
          "name": "clusterId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/osb/clusters/{clusterId}/instances/{instanceId}/users/{serviceBindingId}": {
      "post": {
        "operationId": "v1_osb_clusters_instances_users_create",
        "description": "Create an api user for an instance.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts system permissions.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The technical credentials were successfully created.",
            "schema": { "$ref": "#/definitions/ApiUserCreated" },
            "examples": {
              "application/json": {
                "message": "Successfully created api user",
                "username": "test",
                "password": "1fasAELDB234ddeDAfdasfel787oplpj",
                "apiUrl": "https://api.argus.eu01.stackit.cloud",
                "apiUrlSwagger": "https://api.argus.eu01.stackit.cloud/swagger",
                "instanceId": "69a9219e-6c42-4e12-9262-1c4d073674da"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["osb"]
      },
      "delete": {
        "operationId": "v1_osb_clusters_instances_users_delete",
        "description": "Delete an api user for an instance.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts system permission.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The api user was successfully deleted.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Successfully deleted api user" }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong deleting api user. Either it does not exists or user is not provided.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Can't unbind the user since it does not exists"
              }
            }
          }
        },
        "tags": ["osb"]
      },
      "parameters": [
        {
          "name": "clusterId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "serviceBindingId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/plans": {
      "get": {
        "operationId": "v1_plans_list",
        "description": "Get all plans.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts admin auth and broker auth.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all plans",
            "schema": { "$ref": "#/definitions/Plan" },
            "examples": {
              "application/json": {
                "message": "Successfully got plans",
                "plans": [
                  {
                    "planId": "7b1fbd9c-9acd-42ce-95d3-0f6822d6cabe",
                    "description": "Small Plan",
                    "name": "SmallPlan",
                    "bucketSize": 20,
                    "grafanaGlobalUsers": 10,
                    "grafanaGlobalOrgs": 2,
                    "grafanaGlobalDashboards": 20,
                    "alertRules": 1000,
                    "targetNumber": 2,
                    "samplesPerScrape": 1000,
                    "grafanaGlobalSessions": 10,
                    "amount": 49,
                    "alertReceivers": 10,
                    "alertMatchers": 10
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["plans"]
      },
      "parameters": []
    },
    "/v1/projects/{projectId}/instances": {
      "get": {
        "operationId": "v1_projects_instances_list",
        "description": "Get all instances for a project.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all instances for a project",
            "schema": { "$ref": "#/definitions/ProjectInstancesResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got instances",
                "instances": [
                  {
                    "instance": "597976c4-d4c1-44d6-9f43-213df3da1799",
                    "name": "test"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["instances"]
      },
      "parameters": [
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}": {
      "get": {
        "operationId": "v1_projects_instances_read",
        "description": "Get instance information.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get instance data",
            "schema": { "$ref": "#/definitions/Service" },
            "examples": {
              "application/json": {
                "message": "Successfully got instance",
                "instance": {
                  "instance": "123456",
                  "cluster": "stackit",
                  "grafanaUrl": "https://ui.stackit.argus.eu01.cloud/instances/123456",
                  "dashboardUrl": "dashboard.example.com",
                  "grafanaPlugins": [],
                  "name": "test",
                  "grafanaAdminPassword": "asdf313kles23450des0asdf313kles2",
                  "grafanaAdminUser": "admin",
                  "metricsRetentionTimeRaw": 14,
                  "metricsRetentionTime5m": 0,
                  "metricsRetentionTime1h": 0,
                  "metricsUrl": "https://storage.api.stackit.argus.eu01.cloud/instances/123456",
                  "pushMetricsUrl": "https://push.metrics.stackit.argus.eu01.cloud/instances/123456/api/v1/receive",
                  "grafanaPublicReadAccess": false,
                  "targetsUrl": "https://metrics.stackit.argus.eu01.cloud/instances/123456",
                  "alertingUrl": "https://alerting.stackit.argus.eu01.cloud/instances/123456",
                  "plan": {
                    "planId": "7b1fbd9c-9acd-42ce-95d3-0f6822d6cabe",
                    "description": "Small Plan",
                    "name": "SmallPlan",
                    "bucketSize": 20,
                    "grafanaGlobalUsers": 10,
                    "grafanaGlobalOrgs": 2,
                    "grafanaGlobalDashboards": 20,
                    "alertRules": 1000,
                    "targetNumber": 2,
                    "samplesPerScrape": 1000,
                    "grafanaGlobalSessions": 10,
                    "amount": 49,
                    "alertReceivers": 10,
                    "alertMatchers": 10
                  },
                  "logsUrl": "https://logs.stackit.argus.eu01.cloud/instances/123456",
                  "logsPushUrl": "https://logs.stackit.argus.eu01.cloud/instances/123456/loki/api/v1/push",
                  "jaegerTracesUrl": "123456-gj.traces.stackit.argus.eu01.cloud:443",
                  "otlpTracesUrl": "123456-op.traces.stackit.argus.eu01.cloud:443",
                  "zipkinSpansUrl": "https://123456-zk.traces.stackit.argus.eu01.cloud/instances/123456",
                  "jaegerUiUrl": "https://123456-jui.traces.stackit.argus.eu01.cloud/instances/123456"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["instances"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs": {
      "get": {
        "operationId": "v1_projects_instances_alertconfigs_list",
        "description": "Get alert config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config",
            "schema": { "$ref": "#/definitions/GetAlert" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "global": {
                    "smtpSmarthost": "localhost:25",
                    "smtpFrom": "alertmanager@example.org",
                    "smtpAuthUsername": "alertmanager",
                    "smtpAuthPassword": "password"
                  },
                  "route": {
                    "groupBy": ["alertname", "cluster", "service"],
                    "groupWait": "30s",
                    "groupInterval": "5m",
                    "repeatInterval": "3h",
                    "receiver": "team-X-mails",
                    "routes": [
                      {
                        "matchRe": { "service": "^(foo1|foo2|baz)$" },
                        "receiver": "team-X-paper",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-X-paper",
                            "routes": [
                              {
                                "match": { "severity": "warning" },
                                "receiver": "team-X-paper"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "match": { "service": "files" },
                        "receiver": "team-X-pager",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-Y-paper"
                          }
                        ]
                      }
                    ]
                  },
                  "inhibitRules": [
                    {
                      "sourceMatch": { "severity": "criticals" },
                      "targetMatch": { "severity": "warning" },
                      "equal": ["alertname", "cluster", "service"]
                    }
                  ],
                  "receivers": [
                    {
                      "name": "team-X-mails",
                      "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                    },
                    {
                      "name": "team-X-paper",
                      "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                    },
                    {
                      "name": "team-Y-paper",
                      "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                    },
                    {
                      "name": "team-X-pager",
                      "emailConfigs": [
                        { "to": "team-X+alerts-critical@example.org" }
                      ],
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "put": {
        "operationId": "v1_projects_instances_alertconfigs_update",
        "description": "Update alert config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert config",
              "required": ["route", "receivers"],
              "type": "object",
              "properties": {
                "global": {
                  "description": "Global config. If nothing passed the default argus config will be used.",
                  "type": "object",
                  "properties": {
                    "resolveTimeout": {
                      "description": "ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt. \n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "5m",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "smtpFrom": {
                      "description": "The default SMTP From header field. \n`Additional Validators:`\n* must be a syntactically valid email address",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpSmarthost": {
                      "description": "The default SMTP smarthost used for sending emails, including port number. Port number usually is 25, or 587 for SMTP over TLS (sometimes referred to as STARTTLS). Example: smtp.example.org:587 \n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpAuthUsername": {
                      "description": "SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpAuthPassword": {
                      "description": "SMTP Auth using LOGIN and PLAIN.",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "smtpAuthIdentity": {
                      "description": "Auth identity.\n`Additional Validators:`\n* must be a syntactically valid email address",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "opsgenieApiKey": {
                      "description": "Opsgenie api key\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "opsgenieApiUrl": {
                      "description": "Opsgenie api url\n`Additional Validators:`\n* must be a syntactically valid url address",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    }
                  }
                },
                "route": {
                  "description": "The root node of the routing tree.",
                  "required": ["receiver"],
                  "type": "object",
                  "properties": {
                    "receiver": {
                      "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "groupBy": {
                      "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
                      "type": "array",
                      "items": {
                        "description": "As described",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 5
                    },
                    "groupWait": {
                      "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "30s",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "groupInterval": {
                      "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "5m",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "repeatInterval": {
                      "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
                      "type": "string",
                      "default": "4h",
                      "maxLength": 8,
                      "minLength": 2
                    },
                    "match": {
                      "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "object",
                      "deprecated": true
                    },
                    "matchRe": {
                      "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                      "type": "object",
                      "deprecated": true
                    },
                    "matchers": {
                      "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                      "type": "array",
                      "items": {
                        "description": "Item of matchers",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 5
                    },
                    "routes": {
                      "description": "Zero or more child routes.",
                      "type": "array",
                      "items": {
                        "description": "As in one level above",
                        "type": "object",
                        "properties": {
                          "receiver": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 100,
                            "minLength": 1
                          },
                          "groupBy": {
                            "description": "",
                            "type": "array",
                            "items": {
                              "description": "As in one level above",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "maxLength": 5
                          },
                          "groupWait": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 8
                          },
                          "groupInterval": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 8,
                            "minLength": 2
                          },
                          "repeatInterval": {
                            "description": "As in one level above",
                            "type": "string",
                            "maxLength": 8,
                            "minLength": 2
                          },
                          "match": {
                            "description": "As in one level above",
                            "type": "object"
                          },
                          "matchRe": {
                            "description": "As in one level above",
                            "type": "object"
                          },
                          "routes": {
                            "description": "Another child routes",
                            "type": "array",
                            "items": {
                              "description": "As in one level above",
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "receivers": {
                  "description": "A list of notification receivers.",
                  "type": "array",
                  "items": {
                    "description": "Receivers",
                    "required": ["name"],
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "emailConfigs": {
                        "description": "Email configurations",
                        "type": "array",
                        "items": {
                          "description": "",
                          "type": "object",
                          "properties": {
                            "to": {
                              "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "from": {
                              "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "smarthost": {
                              "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "authUsername": {
                              "description": "SMTP authentication information.",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "authPassword": {
                              "description": "SMTP authentication information.",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "authIdentity": {
                              "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "opsgenieConfigs": {
                        "description": "Configuration for ops genie.",
                        "type": "array",
                        "items": {
                          "description": "",
                          "type": "object",
                          "properties": {
                            "apiKey": {
                              "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "apiUrl": {
                              "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "tags": {
                              "description": "Comma separated list of tags attached to the notifications.",
                              "type": "string",
                              "maxLength": 400,
                              "minLength": 1
                            }
                          }
                        }
                      },
                      "webHookConfigs": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "description": "",
                          "type": "object",
                          "properties": {
                            "url": {
                              "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                              "type": "string",
                              "maxLength": 500,
                              "minLength": 1
                            },
                            "msTeams": {
                              "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                              "type": "boolean",
                              "default": false
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "inhibitRules": {
                  "description": "A list of inhibition rules.",
                  "type": "object",
                  "properties": {
                    "sourceMatch": {
                      "description": "map of key:value. Matchers for which one or more alerts have to exist for the inhibition to take effect.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters\n* each key and value should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "object"
                    },
                    "sourceMatchRe": {
                      "description": "map of key:value. Regex match\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                      "type": "object"
                    },
                    "targetMatch": {
                      "description": "map of key:value. Matchers that have to be fulfilled in the alerts to be muted.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters\n* each key and value should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "object"
                    },
                    "targetMatchRe": {
                      "description": "map of key:value. Matchers that have to be fulfilled in the alerts to be muted. Regex.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                      "type": "object"
                    },
                    "equal": {
                      "description": "Labels that must have an equal value in the source and target alert for the inhibition to take effect.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                      "type": "array",
                      "items": {
                        "description": "",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 10
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert config.",
            "schema": { "$ref": "#/definitions/PutAlert" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "global": {
                    "smtpSmarthost": "localhost:25",
                    "smtpFrom": "alertmanager@example.org",
                    "smtpAuthUsername": "alertmanager",
                    "smtpAuthPassword": "password"
                  },
                  "route": {
                    "groupBy": ["alertname", "cluster", "service"],
                    "groupWait": "30s",
                    "groupInterval": "5m",
                    "repeatInterval": "3h",
                    "receiver": "team-X-mails",
                    "routes": [
                      {
                        "matchRe": { "service": "^(foo1|foo2|baz)$" },
                        "receiver": "team-X-paper",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-X-paper",
                            "routes": [
                              {
                                "match": { "severity": "warning" },
                                "receiver": "team-X-paper"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "match": { "service": "files" },
                        "receiver": "team-X-pager",
                        "routes": [
                          {
                            "match": { "severity": "critical" },
                            "receiver": "team-Y-paper"
                          }
                        ]
                      }
                    ]
                  },
                  "inhibitRules": [
                    {
                      "sourceMatch": { "severity": "criticals" },
                      "targetMatch": { "severity": "warning" },
                      "equal": ["alertname", "cluster", "service"]
                    }
                  ],
                  "receivers": [
                    {
                      "name": "team-X-mails",
                      "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                    },
                    {
                      "name": "team-X-paper",
                      "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                    },
                    {
                      "name": "team-Y-paper",
                      "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                    },
                    {
                      "name": "team-X-pager",
                      "emailConfigs": [
                        { "to": "team-X+alerts-critical@example.org" }
                      ],
                      "opsgenieConfigs": [
                        {
                          "apiKey": "12345678",
                          "apiUrl": "https://example.opsgenie.org"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert config.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Could not update alert config" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/receivers": {
      "get": {
        "operationId": "v1_projects_instances_alertconfigs_receivers_list",
        "description": "Get alert config receivers.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config receivers",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "post": {
        "operationId": "v1_projects_instances_alertconfigs_receivers_create",
        "description": "Create alert config receiver.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Receivers",
              "required": ["name"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "emailConfigs": {
                  "description": "Email configurations",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "to": {
                        "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "from": {
                        "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "smarthost": {
                        "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authUsername": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authPassword": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authIdentity": {
                        "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      }
                    }
                  }
                },
                "opsgenieConfigs": {
                  "description": "Configuration for ops genie.",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "apiKey": {
                        "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "apiUrl": {
                        "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "tags": {
                        "description": "Comma separated list of tags attached to the notifications.",
                        "type": "string",
                        "maxLength": 400,
                        "minLength": 1
                      }
                    }
                  }
                },
                "webHookConfigs": {
                  "description": "",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 500,
                        "minLength": 1
                      },
                      "msTeams": {
                        "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert config receiver.",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/receivers/{receiver}": {
      "get": {
        "operationId": "v1_projects_instances_alertconfigs_receivers_read",
        "description": "Get alert config receivers.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config receiver",
            "schema": {
              "$ref": "#/definitions/ReceiversResponseSerializerSingle"
            },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "name": "team-X-mails",
                  "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config receiver not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Alert config receiver not found."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "put": {
        "operationId": "v1_projects_instances_alertconfigs_receivers_update",
        "description": "Update alert config receiver.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Receivers",
              "required": ["name"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "`Additional Validators:`\n* must be unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "emailConfigs": {
                  "description": "Email configurations",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "to": {
                        "description": "The email address to send notifications to.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "from": {
                        "description": "The sender address.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "smarthost": {
                        "description": "The SMTP host through which emails are sent.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9_./@&?:-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authUsername": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authPassword": {
                        "description": "SMTP authentication information.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "authIdentity": {
                        "description": "SMTP authentication information.\n`Additional Validators:`\n* must be a syntactically valid email address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      }
                    }
                  }
                },
                "opsgenieConfigs": {
                  "description": "Configuration for ops genie.",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "apiKey": {
                        "description": "The API key to use when talking to the OpsGenie API.\n`Additional Validators:`\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "apiUrl": {
                        "description": "The host to send OpsGenie API requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "tags": {
                        "description": "Comma separated list of tags attached to the notifications.",
                        "type": "string",
                        "maxLength": 400,
                        "minLength": 1
                      }
                    }
                  }
                },
                "webHookConfigs": {
                  "description": "",
                  "type": "array",
                  "items": {
                    "description": "",
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "The endpoint to send HTTP POST requests to.\n`Additional Validators:`\n* must be a syntactically valid url address",
                        "type": "string",
                        "maxLength": 500,
                        "minLength": 1
                      },
                      "msTeams": {
                        "description": "Microsoft Teams webhooks require special handling. If you set this property to true, it is treated as such",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert config receiver.",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config receiver not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Alert config receiver not found."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertconfigs_receivers_delete",
        "description": "Delete alert config receiver.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert config receiver.",
            "schema": { "$ref": "#/definitions/ReceiversResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": [
                  {
                    "name": "team-X-mails",
                    "emailConfigs": [{ "to": "team-X+alerts@example.org" }]
                  },
                  {
                    "name": "team-X-paper",
                    "emailConfigs": [{ "to": "team-X+papers@example.org" }]
                  },
                  {
                    "name": "team-Y-paper",
                    "emailConfigs": [{ "to": "team-Y+paper@example.org" }]
                  },
                  {
                    "name": "team-X-pager",
                    "emailConfigs": [
                      { "to": "team-X+alerts-critical@example.org" }
                    ],
                    "opsgenieConfigs": [
                      {
                        "apiKey": "12345678",
                        "apiUrl": "https://example.opsgenie.org"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config receiver not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Alert config receiver not found."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        { "name": "receiver", "in": "path", "required": true, "type": "string" }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/routes": {
      "get": {
        "operationId": "v1_projects_instances_alertconfigs_routes_list",
        "description": "Get alert config route.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config route",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "post": {
        "operationId": "v1_projects_instances_alertconfigs_routes_create",
        "description": "Create alert config route in routes of route.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "The root node of the routing tree.",
              "required": ["receiver"],
              "type": "object",
              "properties": {
                "receiver": {
                  "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "groupBy": {
                  "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
                  "type": "array",
                  "items": {
                    "description": "As described",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "groupWait": {
                  "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "30s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "groupInterval": {
                  "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "5m",
                  "maxLength": 8,
                  "minLength": 2
                },
                "repeatInterval": {
                  "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "4h",
                  "maxLength": 8,
                  "minLength": 2
                },
                "match": {
                  "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@&?:-",
                  "type": "object",
                  "deprecated": true
                },
                "matchRe": {
                  "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object",
                  "deprecated": true
                },
                "matchers": {
                  "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "array",
                  "items": {
                    "description": "Item of matchers",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "routes": {
                  "description": "Zero or more child routes.",
                  "type": "array",
                  "items": {
                    "description": "As in one level above",
                    "type": "object",
                    "properties": {
                      "receiver": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                      },
                      "groupBy": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "groupWait": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8
                      },
                      "groupInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "repeatInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "match": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "matchRe": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "routes": {
                        "description": "Another child routes",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert config route.",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertconfigs/routes/{receiver}": {
      "get": {
        "operationId": "v1_projects_instances_alertconfigs_routes_read",
        "description": "Get alert receiver for route.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert config route",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert config"]
      },
      "put": {
        "operationId": "v1_projects_instances_alertconfigs_routes_update",
        "description": "Update alert receiver for route.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "The root node of the routing tree.",
              "required": ["receiver"],
              "type": "object",
              "properties": {
                "receiver": {
                  "description": "Receiver that should be one item of receivers\n`Additional Validators:`\n* must be a in name of receivers",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "groupBy": {
                  "description": "The labels by which incoming alerts are grouped together. For example, multiple alerts coming in for cluster=A and alertname=LatencyHigh would be batched into a single group. To aggregate by all possible labels use the special value '...' as the sole label name, for example: group_by: ['...']. This effectively disables aggregation entirely, passing through all alerts as-is. This is unlikely to be what you want, unless you have a very low alert volume or your upstream notification system performs its own grouping.",
                  "type": "array",
                  "items": {
                    "description": "As described",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "groupWait": {
                  "description": "How long to initially wait to send a notification for a group of alerts. Allows to wait for an inhibiting alert to arrive or collect more initial alerts for the same group. (Usually ~0s to few minutes.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "30s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "groupInterval": {
                  "description": "How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent. (Usually ~5m or more.)\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "5m",
                  "maxLength": 8,
                  "minLength": 2
                },
                "repeatInterval": {
                  "description": "How long to wait before sending a notification again if it has already been sent successfully for an alert. (Usually ~3h or more).\n`Additional Validators:`\n* must be a valid time format",
                  "type": "string",
                  "default": "4h",
                  "maxLength": 8,
                  "minLength": 2
                },
                "match": {
                  "description": "map of key:value. A set of equality matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n* key and values should only include the characters: a-zA-Z0-9_./@&?:-",
                  "type": "object",
                  "deprecated": true
                },
                "matchRe": {
                  "description": "map of key:value. A set of regex-matchers an alert has to fulfill to match the node. \n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object",
                  "deprecated": true
                },
                "matchers": {
                  "description": "A list of matchers that an alert has to fulfill to match the node. A matcher is a string with a syntax inspired by PromQL and OpenMetrics. The syntax of a matcher consists of three tokens:\n* A valid Prometheus label name.\n* One of =, !=, =~, or !~. = means equals, != means that the strings are not equal, =~ is used for equality of regex expressions and !~ is used for un-equality of regex expressions. They have the same meaning as known from PromQL selectors.\n* A UTF-8 string, which may be enclosed in double quotes. Before or after each token, there may be any amount of whitespace.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "array",
                  "items": {
                    "description": "Item of matchers",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "maxLength": 5
                },
                "routes": {
                  "description": "Zero or more child routes.",
                  "type": "array",
                  "items": {
                    "description": "As in one level above",
                    "type": "object",
                    "properties": {
                      "receiver": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1
                      },
                      "groupBy": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "groupWait": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8
                      },
                      "groupInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "repeatInterval": {
                        "description": "As in one level above",
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "match": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "matchRe": {
                        "description": "As in one level above",
                        "type": "object"
                      },
                      "routes": {
                        "description": "Another child routes",
                        "type": "array",
                        "items": {
                          "description": "As in one level above",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert config route.",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config route not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert config route not found." }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert config"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertconfigs_routes_delete",
        "description": "Delete alert receiver for route.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert config route.",
            "schema": { "$ref": "#/definitions/RouteResponse" },
            "examples": {
              "application/json": {
                "message": "Success",
                "data": {
                  "groupBy": ["alertname", "cluster", "service"],
                  "groupWait": "30s",
                  "groupInterval": "5m",
                  "repeatInterval": "3h",
                  "receiver": "team-X-mails",
                  "routes": [
                    {
                      "matchRe": { "service": "^(foo1|foo2|baz)$" },
                      "receiver": "team-X-paper",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-X-paper",
                          "routes": [
                            {
                              "match": { "severity": "warning" },
                              "receiver": "team-X-paper"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "match": { "service": "files" },
                      "receiver": "team-X-pager",
                      "routes": [
                        {
                          "match": { "severity": "critical" },
                          "receiver": "team-Y-paper"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert config route not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert config route not found." }
            }
          }
        },
        "tags": ["alert config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        { "name": "receiver", "in": "path", "required": true, "type": "string" }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertgroups": {
      "get": {
        "operationId": "v1_projects_instances_alertgroups_list",
        "description": "Get alert groups.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert groups",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong." }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "post": {
        "operationId": "v1_projects_instances_alertgroups_create",
        "description": "Create alert group.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["name", "rules"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the group. Must be unique.\n`Additional Validators:`\n* is the identifier and so unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Group successfully created",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Could not create alert group config",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": {
                "message": "Could not create alert group config"
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "patch": {
        "operationId": "v1_projects_instances_alertgroups_partial_update",
        "description": "Patch alert groups.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of alert groups that should be created or updated",
              "type": "array",
              "items": {
                "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
                "required": ["name", "rules"],
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the group. Must be unique.\n`Additional Validators:`\n* is the identifier and so unique\n* should only include the characters: a-zA-Z0-9-",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "interval": {
                    "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                    "type": "string",
                    "default": "60s",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "rules": {
                    "description": "rules for the alert group",
                    "type": "array",
                    "items": {
                      "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                      "required": ["alert", "expr"],
                      "type": "object",
                      "properties": {
                        "alert": {
                          "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "expr": {
                          "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                          "type": "string",
                          "maxLength": 600,
                          "minLength": 1
                        },
                        "for": {
                          "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                          "type": "string",
                          "default": "0s",
                          "maxLength": 8,
                          "minLength": 2
                        },
                        "labels": {
                          "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                          "type": "object"
                        },
                        "annotations": {
                          "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert groups.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Groups successfully created.",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertgroups_delete",
        "description": "Delete alert groups.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupName",
            "in": "query",
            "description": "Name of the groups that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert groups.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Groups successfully deleted",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}": {
      "get": {
        "operationId": "v1_projects_instances_alertgroups_read",
        "description": "Get alert group.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert group",
            "schema": { "$ref": "#/definitions/AlertGroupResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": {
                  "name": "test alert",
                  "interval": "5m",
                  "rules": [
                    {
                      "alert": "up test",
                      "expr": "up == 1",
                      "labels": { "test": "test" },
                      "for": "30s",
                      "annotations": { "test": "test" }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not read alert group config"
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "put": {
        "operationId": "v1_projects_instances_alertgroups_update",
        "description": "Update alert group config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["rules"],
              "type": "object",
              "properties": {
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group updated successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not update alert group config"
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertgroups_delete",
        "description": "Delete alert group config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group has been deleted successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong deleting the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not delete alert group config"
              }
            }
          }
        },
        "tags": ["alert groups"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}/alertrules": {
      "get": {
        "operationId": "v1_projects_instances_alertgroups_alertrules_list",
        "description": "Get alert rules.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert rules",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "post": {
        "operationId": "v1_projects_instances_alertgroups_alertrules_create",
        "description": "Create alert rule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["alert", "expr"],
              "type": "object",
              "properties": {
                "alert": {
                  "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "for": {
                  "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                  "type": "string",
                  "default": "0s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                },
                "annotations": {
                  "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert rule.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Rule successfully created",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "patch": {
        "operationId": "v1_projects_instances_alertgroups_alertrules_partial_update",
        "description": "Patch alert rules.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of alert rules that should be created or updated",
              "type": "array",
              "items": {
                "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                "required": ["alert", "expr"],
                "type": "object",
                "properties": {
                  "alert": {
                    "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "expr": {
                    "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                    "type": "string",
                    "maxLength": 600,
                    "minLength": 1
                  },
                  "for": {
                    "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                    "type": "string",
                    "default": "0s",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "labels": {
                    "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                    "type": "object"
                  },
                  "annotations": {
                    "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                    "type": "object"
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rules successfully created",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertgroups_alertrules_delete",
        "description": "Delete alert rules.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "alertName",
            "in": "query",
            "description": "Name of the alert rules that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rules successfully deleted",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}/alertrules/{alertName}": {
      "get": {
        "operationId": "v1_projects_instances_alertgroups_alertrules_read",
        "description": "Get alert rule.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert rules",
            "schema": { "$ref": "#/definitions/AlertRuleResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert rules",
                "data": {
                  "alert": "up test",
                  "expr": "up == 1",
                  "labels": { "test": "test" },
                  "for": "30s",
                  "annotations": { "test": "test" }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert rule not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert rule not found." }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "put": {
        "operationId": "v1_projects_instances_alertgroups_alertrules_update",
        "description": "Update alert rule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["expr"],
              "type": "object",
              "properties": {
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "for": {
                  "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                  "type": "string",
                  "default": "0s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                },
                "annotations": {
                  "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert rules.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rule updated successfully",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert rule not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert rule not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert rule.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertgroups_alertrules_delete",
        "description": "Delete alert rule.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert rule.",
            "schema": { "$ref": "#/definitions/AlertRulesResponse" },
            "examples": {
              "application/json": {
                "message": "Alert rules successfully deleted",
                "data": [
                  {
                    "alert": "up test",
                    "expr": "up == 1",
                    "labels": { "test": "test" },
                    "for": "30s",
                    "annotations": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert rule not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert rule not found." }
            }
          },
          "400": {
            "description": "Something went wrong deleting the alert rule.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert rules"]
      },
      "parameters": [
        {
          "name": "alertName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}/records": {
      "get": {
        "operationId": "v1_projects_instances_alertgroups_records_list",
        "description": "Get alert records.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert records.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert records",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert records"]
      },
      "post": {
        "operationId": "v1_projects_instances_alertgroups_records_create",
        "description": "Create alert record.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Record.\n`Additional Validators:`\n* total config (all alert groups/rules/records) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["record", "expr"],
              "type": "object",
              "properties": {
                "record": {
                  "description": "The name of the record.\n`Additional Validators:`\n* is the identifier and so unique in the group\n",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters\n",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert record successfully created",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": { "application/json": { "message": "Something wrong" } }
          }
        },
        "tags": ["alert records"]
      },
      "patch": {
        "operationId": "v1_projects_instances_alertgroups_records_partial_update",
        "description": "Patch alert records.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of records that should be created or updated",
              "type": "array",
              "items": {
                "description": "Record.\n`Additional Validators:`\n* total config (all alert groups/rules/records) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                "required": ["record", "expr"],
                "type": "object",
                "properties": {
                  "record": {
                    "description": "The name of the record.\n`Additional Validators:`\n* is the identifier and so unique in the group\n",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "expr": {
                    "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                    "type": "string",
                    "maxLength": 600,
                    "minLength": 1
                  },
                  "labels": {
                    "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters\n",
                    "type": "object"
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert records.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert records successfully created",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert records"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertgroups_records_delete",
        "description": "Delete alert records.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "alertRecord",
            "in": "query",
            "description": "Name of the records that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert records.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert records successfully deleted",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["alert records"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/alertgroups/{groupName}/records/{alertRecord}": {
      "get": {
        "operationId": "v1_projects_instances_alertgroups_records_read",
        "description": "Get alert record.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert record",
                "data": {
                  "record": "job:prometheus_http_requests_total:rate5m",
                  "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                  "labels": { "test": "test" }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          },
          "404": {
            "description": "Alert record not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert record not found." }
            }
          }
        },
        "tags": ["alert records"]
      },
      "put": {
        "operationId": "v1_projects_instances_alertgroups_records_update",
        "description": "Update alert record.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Record.\n`Additional Validators:`\n* total config (all alert groups/rules/records) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
              "required": ["record", "expr"],
              "type": "object",
              "properties": {
                "expr": {
                  "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                  "type": "string",
                  "maxLength": 600,
                  "minLength": 1
                },
                "labels": {
                  "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters\n",
                  "type": "object"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert record updated successfully",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert record not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert record not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the record.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["alert records"]
      },
      "delete": {
        "operationId": "v1_projects_instances_alertgroups_records_delete",
        "description": "Delete alert record.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert record.",
            "schema": { "$ref": "#/definitions/AlertRecordsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert record successfully deleted",
                "data": [
                  {
                    "record": "job:prometheus_http_requests_total:rate5m",
                    "expr": "sum without(instance, method, controller, status_code)(rate(prometheus_http_requests_total[5m]))",
                    "labels": { "test": "test" }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert record not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Could not delete record" }
            }
          }
        },
        "tags": ["alert records"]
      },
      "parameters": [
        {
          "name": "alertRecord",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/backup-restores/{backupDate}": {
      "post": {
        "operationId": "v1_projects_instances_backup-restores_create",
        "description": "Restore backup.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "restoreTarget",
            "in": "query",
            "description": "List of restore targets",
            "required": true,
            "type": "string",
            "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
          }
        ],
        "responses": {
          "202": {
            "description": "Restore backup",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Restore will be proceeded" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup not found",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup not found" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "backupDate",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/backup-retentions": {
      "get": {
        "operationId": "v1_projects_instances_backup-retentions_list",
        "description": "Get backup retention.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get backup retention",
            "schema": { "$ref": "#/definitions/BackupRetentionResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got backup retention",
                "alertConfigBackupRetention": "14d",
                "scrapeConfigBackupRetention": "14d",
                "alertRulesBackupRetention": "14d",
                "grafanaBackupRetention": "14d"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "put": {
        "operationId": "v1_projects_instances_backup-retentions_update",
        "description": "Update backup retention.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["retention"],
              "type": "object",
              "properties": {
                "retention": {
                  "description": "How long the backups should be stored.\n`Additional Validators:`\n* must be a valid time string",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Update backup retention",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup retention will be updated"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/backup-schedules": {
      "get": {
        "operationId": "v1_projects_instances_backup-schedules_list",
        "description": "Get backup schedules.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get backup schedules.",
            "schema": { "$ref": "#/definitions/BackupScheduleResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got backup schedules",
                "alertConfigBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe5"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81a"
                  }
                ],
                "alertRulesBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe6"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81b"
                  }
                ],
                "scrapeConfigBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe7"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81c"
                  }
                ],
                "grafanaBackupSchedules": [
                  {
                    "schedule": "*/5 * * * *",
                    "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe8"
                  },
                  {
                    "schedule": "0 0 * * MON",
                    "scheduleId": "a3cddd87-a967-42ef-9413-041c731ac81d"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "post": {
        "operationId": "v1_projects_instances_backup-schedules_create",
        "description": "Create backup schedule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["schedule"],
              "type": "object",
              "properties": {
                "schedule": {
                  "description": "The schedule for how often to create a backup.\n`Additional Validators:`\n* must be a valid cronjob format\n* must run less than hourly",
                  "type": "string",
                  "maxLength": 100
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Create backup schedule",
            "schema": { "$ref": "#/definitions/BackupSchedulePostResponse" },
            "examples": {
              "application/json": {
                "message": "Backup schedule will be created",
                "schedule": "*/5 * * * *"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/backup-schedules/{scheduleId}": {
      "put": {
        "operationId": "v1_projects_instances_backup-schedules_update",
        "description": "Update backup schedule.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["schedule"],
              "type": "object",
              "properties": {
                "schedule": {
                  "description": "The schedule for how often to create a backup.\n`Additional Validators:`\n* must be a valid cronjob format\n* must run less than hourly",
                  "type": "string",
                  "maxLength": 100
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update backup schedule",
            "schema": { "$ref": "#/definitions/BackupSchedulePutResponse" },
            "examples": {
              "application/json": {
                "message": "Backup schedule will be updated",
                "schedule": {
                  "schedule": "1 * * * *",
                  "scheduleId": "f546eff4-3c8d-4664-9657-a6ad46edffe5"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup schedule does not exists",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup schedule does not exists"
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "delete": {
        "operationId": "v1_projects_instances_backup-schedules_delete",
        "description": "Delete backup schedule.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete backup schedule",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup schedule will be deleted"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup schedule does not exists",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Backup schedule does not exists"
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "scheduleId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/backups": {
      "get": {
        "operationId": "v1_projects_instances_backups_list",
        "description": "Get backups.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all backups",
            "schema": { "$ref": "#/definitions/BackupResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got backups",
                "alertConfigBackups": [
                  "11-08-2021T14:08:21",
                  "14-08-2021T06:35:40"
                ],
                "alertRulesBackups": [
                  "11-08-2021T14:08:22",
                  "14-08-2021T06:35:41"
                ],
                "scrapeConfigBackups": [
                  "11-08-2021T14:08:23",
                  "14-08-2021T06:35:42"
                ],
                "grafanaBackups": ["11-08-2021T14:08:31", "14-08-2021T06:35:43"]
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "502": {
            "description": "Connection to object storage could not be established.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not get backups from storage"
              }
            }
          }
        },
        "tags": ["backup"]
      },
      "post": {
        "operationId": "v1_projects_instances_backups_create",
        "description": "Create a backup.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "List of backup targets",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Create backup",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup will be created" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/backups/{backupDate}": {
      "delete": {
        "operationId": "v1_projects_instances_backups_delete",
        "description": "Delete backup.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "backupTarget",
            "in": "query",
            "description": "Backup target selector",
            "required": true,
            "type": "string",
            "enum": ["alertConfig", "alertRules", "scrapeConfig", "grafana"]
          }
        ],
        "responses": {
          "202": {
            "description": "Delete backup",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup will be deleted" }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Backup not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Backup not found" }
            }
          }
        },
        "tags": ["backup"]
      },
      "parameters": [
        {
          "name": "backupDate",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/grafana-configs": {
      "get": {
        "operationId": "v1_projects_instances_grafana-configs_list",
        "description": "Get grafana config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get grafana config.",
            "schema": {
              "$ref": "#/definitions/GrafanaConfigsSerializerRespond"
            },
            "examples": {
              "application/json": {
                "message": "Successfully got grafana config",
                "publicReadAccess": false
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["grafana configs"]
      },
      "put": {
        "operationId": "v1_projects_instances_grafana-configs_update",
        "description": "Update grafana config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Sending any of the attributes results in a set of the attribute and overwrites any previous configuration.",
              "type": "object",
              "properties": {
                "publicReadAccess": {
                  "description": "If it's true, anyone can access the Grafana dashboards without logging in. If it is wrong, a login is required.",
                  "type": "boolean"
                },
                "genericOauth": {
                  "required": [
                    "enabled",
                    "apiUrl",
                    "authUrl",
                    "tokenUrl",
                    "oauthClientId",
                    "oauthClientSecret",
                    "roleAttributePath"
                  ],
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "description": "enable or disable generic oauth login",
                      "type": "boolean"
                    },
                    "apiUrl": {
                      "description": "Set api_url to the resource that returns OpenID UserInfo compatible information.",
                      "type": "string"
                    },
                    "authUrl": {
                      "description": "Authentication endpoint of idp.",
                      "type": "string"
                    },
                    "scopes": {
                      "description": "Space seperated list of scopes of the token",
                      "type": "string",
                      "default": "openid profile email"
                    },
                    "tokenUrl": {
                      "description": "Token endpoint of the idp.",
                      "type": "string"
                    },
                    "oauthClientId": {
                      "description": "Oauth client id for auth endpoint.",
                      "type": "string"
                    },
                    "oauthClientSecret": {
                      "description": "Oauth client secret for auth endpoint.",
                      "type": "string"
                    },
                    "roleAttributeStrict": {
                      "description": "If  therole_attribute_path property does not return a role, then the user is assigned the Viewer role by default. You can disable the role assignment by setting role_attribute_strict = true. It denies user access if no role or an invalid role is returned.",
                      "type": "boolean",
                      "default": true
                    },
                    "roleAttributePath": {
                      "description": "Grafana checks for the presence of a role using the JMESPath specified via the role_attribute_path configuration option. The JMESPath is applied to the id_token first. If there is no match, then the UserInfo endpoint specified via the api_url configuration option is tried next. The result after evaluation of the role_attribute_path JMESPath expression should be a valid Grafana role, for example, Viewer, Editor or Admin\nFor example: contains(roles[\\*], 'grafana-admin') && 'Admin' || contains(roles[\\*], 'grafana-editor') && 'Editor' || contains(roles[\\*], 'grafana-viewer') && 'Viewer'",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update grafana config.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated grafana config"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["grafana configs"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/logs-alertgroups": {
      "get": {
        "operationId": "v1_projects_instances_logs-alertgroups_list",
        "description": "Get logs alert groups config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all alert groups",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong." }
            }
          }
        },
        "tags": ["logs"]
      },
      "post": {
        "operationId": "v1_projects_instances_logs-alertgroups_create",
        "description": "Create logs alert group config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["name", "rules"],
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the group. Must be unique.\n`Additional Validators:`\n* is the identifier and so unique\n* should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "success": true,
                "message": "Group successfully created",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Could not create alert group config",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": {
                "message": "Could not create alert group config"
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/logs-alertgroups/{groupName}": {
      "get": {
        "operationId": "v1_projects_instances_logs-alertgroups_read",
        "description": "Get logs alert group config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get alert group",
            "schema": { "$ref": "#/definitions/AlertGroupResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got alert groups",
                "data": {
                  "name": "test alert",
                  "interval": "5m",
                  "rules": [
                    {
                      "alert": "up test",
                      "expr": "up == 1",
                      "labels": { "test": "test" },
                      "for": "30s",
                      "annotations": { "test": "test" }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not read alert group config"
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          }
        },
        "tags": ["logs"]
      },
      "put": {
        "operationId": "v1_projects_instances_logs-alertgroups_update",
        "description": "Update logs alert group config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Alert group that should be created or updated\n`Additional Validators:`\n* total config should not be bigger than 500000 characters as string since this the limitation of prometheus.\n",
              "required": ["rules"],
              "type": "object",
              "properties": {
                "interval": {
                  "description": "How often rules in the group are evaluated.\n`Additional Validators:`\n* must be a valid time string\n* should be >=60s",
                  "type": "string",
                  "default": "60s",
                  "maxLength": 8,
                  "minLength": 2
                },
                "rules": {
                  "description": "rules for the alert group",
                  "type": "array",
                  "items": {
                    "description": "Alert rule.\n`Additional Validators:`\n* total config (all alert groups/rules) should not be bigger than 500000 characters as string since this the limitation of prometheus.",
                    "required": ["alert", "expr"],
                    "type": "object",
                    "properties": {
                      "alert": {
                        "description": "The name of the alert.\n`Additional Validators:`\n* is the identifier and so unique in the group\n* should only include the characters: a-zA-Z0-9-",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "expr": {
                        "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
                        "type": "string",
                        "maxLength": 600,
                        "minLength": 1
                      },
                      "for": {
                        "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.\n`Additional Validators:`\n* must be a valid time string",
                        "type": "string",
                        "default": "0s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "labels": {
                        "description": "map of key:value. Labels to add or overwrite for each alert.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      },
                      "annotations": {
                        "description": "map of key:value. Annotations to add to each alert.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group updated successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong updating the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not update alert group config"
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "delete": {
        "operationId": "v1_projects_instances_logs-alertgroups_delete",
        "description": "Delete logs alert group config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete alert group.",
            "schema": { "$ref": "#/definitions/AlertGroupsResponse" },
            "examples": {
              "application/json": {
                "message": "Alert group has been deleted successfully",
                "data": [
                  {
                    "name": "test alert",
                    "interval": "5m",
                    "rules": [
                      {
                        "alert": "up test",
                        "expr": "up == 1",
                        "labels": { "test": "test" },
                        "for": "30s",
                        "annotations": { "test": "test" }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Alert group not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Alert group not found." }
            }
          },
          "400": {
            "description": "Something went wrong deleting the alert group.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Could not delete alert group config"
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "parameters": [
        {
          "name": "groupName",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/logs-configs": {
      "get": {
        "operationId": "v1_projects_instances_logs-configs_list",
        "description": "Get logs configuration.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get logs config.",
            "schema": { "$ref": "#/definitions/LogsConfigResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got logs config",
                "config": { "retention": "14d" }
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["logs"]
      },
      "put": {
        "operationId": "v1_projects_instances_logs-configs_update",
        "description": "Update logs config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["retention"],
              "type": "object",
              "properties": {
                "retention": {
                  "description": "How long to keep the logs\n`Additional Validators:`\n* Should be a valid time string\n* Should not be longer than 30 days",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update logs config",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated logs configuration"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["logs"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/metrics-storage-retentions": {
      "get": {
        "operationId": "v1_projects_instances_metrics-storage-retentions_list",
        "description": "Get metric storage retention time.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get metric storage retention",
            "schema": { "$ref": "#/definitions/BucketRetentionTimeRespond" },
            "examples": {
              "application/json": {
                "message": "Successfully got metric storage retention",
                "metricsRetentionTimeRaw": "14d",
                "metricsRetentionTime5m": "0d",
                "metricsRetentionTime1h": "0d"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["metrics storage retention"]
      },
      "put": {
        "operationId": "v1_projects_instances_metrics-storage-retentions_update",
        "description": "Update metric update retention time.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "metricsRetentionTimeRaw",
                "metricsRetentionTime5m",
                "metricsRetentionTime1h"
              ],
              "type": "object",
              "properties": {
                "metricsRetentionTimeRaw": {
                  "description": "Retention time of longtime storage of raw sampled data. After that time the data will be down sampled to 5m.\nKeep in mind, that the initial goal of downsampling is not saving disk or object storage space. In fact, downsampling doesn't save you any space but instead, it adds 2 more blocks for each raw block which are only slightly smaller or relatively similar size to raw block. This is done by internal downsampling implementation which to be mathematically correct holds various aggregations. This means that downsampling can increase the size of your storage a bit (~3x), if you choose to store all resolutions (recommended). The goal of downsampling is to provide an opportunity to get fast results for range queries of big time intervals like months or years.\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than 13 months",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsRetentionTime5m": {
                  "description": "Retention time of longtime storage of 5m sampled data. After that time the data will be down sampled to 1h.\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than metricsRetentionTimeRaw",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsRetentionTime1h": {
                  "description": "Retention time of longtime storage of 1h sampled data. After that time the data will be deleted permanently.\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than metricsRetentionTime5m",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update metric storage retention",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated metric storage retention"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["metrics storage retention"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs": {
      "get": {
        "operationId": "v1_projects_instances_scrapeconfigs_list",
        "description": "Get scrape configs.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all scrape targets.",
            "schema": { "$ref": "#/definitions/GetAllJob" },
            "examples": {
              "application/json": {
                "message": "Successfully got scrape config",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "post": {
        "operationId": "v1_projects_instances_scrapeconfigs_create",
        "description": "Create scrape config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "jobName",
                "scheme",
                "scrapeInterval",
                "scrapeTimeout",
                "staticConfigs"
              ],
              "type": "object",
              "properties": {
                "staticConfigs": {
                  "description": "A list of scrape configurations.",
                  "type": "array",
                  "items": {
                    "required": ["targets"],
                    "type": "object",
                    "properties": {
                      "targets": {
                        "description": "The targets specified by the static config.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 500,
                          "minLength": 1
                        }
                      },
                      "labels": {
                        "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                },
                "jobName": {
                  "description": "The job name assigned to scraped metrics by default.\n`Additional Validators:`\n* must be unique\n* key and values should only include the characters: a-zA-Z0-9-",
                  "type": "string",
                  "maxLength": 200,
                  "minLength": 1
                },
                "scheme": {
                  "description": "Configures the protocol scheme used for requests. https or http",
                  "type": "string",
                  "enum": ["http", "https"]
                },
                "scrapeInterval": {
                  "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "scrapeTimeout": {
                  "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsPath": {
                  "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
                  "type": "string",
                  "default": "/metrics",
                  "maxLength": 200,
                  "minLength": 1
                },
                "sampleLimit": {
                  "description": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabeling the entire scrape will be treated as failed. The total limit depends on the service plan target limits * samples",
                  "type": "number",
                  "default": 5000,
                  "maxLength": 8,
                  "minLength": 1
                },
                "basicAuth": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                  "type": "object",
                  "properties": {
                    "username": {
                      "description": "username",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "password": {
                      "description": "password",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    }
                  }
                },
                "oauth2": {
                  "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                  "required": ["clientId", "clientSecret", "tokenUrl"],
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "description": "clientId",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "clientSecret": {
                      "description": "clientSecret",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "tokenUrl": {
                      "description": "The URL to fetch the token from.",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "scopes": {
                      "description": "The URL to fetch the token from.",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "maxLength": 10,
                      "minLength": 1
                    },
                    "tlsConfig": {
                      "description": "Configures the scrape request's TLS settings.",
                      "type": "object",
                      "properties": {
                        "insecureSkipVerify": {
                          "description": "Disable validation of the server certificate.",
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                },
                "tlsConfig": {
                  "description": "Configures the scrape request's TLS settings.",
                  "type": "object",
                  "properties": {
                    "insecureSkipVerify": {
                      "description": "Disable validation of the server certificate.",
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                "bearerToken": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
                  "type": "string"
                },
                "metricsRelabelConfigs": {
                  "description": "List of metric relabel configurations",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sourceLabels": {
                        "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "separator": {
                        "description": "Separator placed between concatenated source label values.",
                        "type": "string",
                        "default": ";",
                        "maxLength": 20,
                        "minLength": 1
                      },
                      "targetLabel": {
                        "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "regex": {
                        "description": "Regular expression against which the extracted value is matched.",
                        "type": "string",
                        "default": ".*",
                        "maxLength": 400,
                        "minLength": 1
                      },
                      "modulus": {
                        "description": "Modulus to take of the hash of the source label values.",
                        "type": "number",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "replacement": {
                        "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                        "type": "string",
                        "default": "$1",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "action": {
                        "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                        "type": "string",
                        "enum": [
                          "replace",
                          "keep",
                          "drop",
                          "hashmod",
                          "labelmap",
                          "labeldrop",
                          "labelkeep"
                        ],
                        "default": "replace"
                      }
                    }
                  }
                },
                "params": {
                  "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                  "type": "object"
                },
                "httpSDConfigs": {
                  "description": "HTTP-based service discovery provides a more generic way to configure static targets and serves as an interface to plug in custom service discovery mechanisms.",
                  "type": "array",
                  "items": {
                    "required": ["url"],
                    "type": "object",
                    "properties": {
                      "url": {
                        "description": "URL from which the targets are fetched.",
                        "type": "string",
                        "maxLength": 400
                      },
                      "refreshInterval": {
                        "description": "Refresh interval to re-query the endpoint. E.g. 60s\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                        "type": "string",
                        "default": "60s",
                        "maxLength": 8,
                        "minLength": 2
                      },
                      "basicAuth": {
                        "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                        "type": "object",
                        "properties": {
                          "username": {
                            "description": "username",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "password": {
                            "description": "password",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          }
                        }
                      },
                      "tlsConfig": {
                        "description": "Configures the scrape request's TLS settings.",
                        "type": "object",
                        "properties": {
                          "insecureSkipVerify": {
                            "description": "Disable validation of the server certificate.",
                            "type": "boolean",
                            "default": false
                          }
                        }
                      },
                      "oauth2": {
                        "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                        "required": ["clientId", "clientSecret", "tokenUrl"],
                        "type": "object",
                        "properties": {
                          "clientId": {
                            "description": "clientId",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "clientSecret": {
                            "description": "clientSecret",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "tokenUrl": {
                            "description": "The URL to fetch the token from.",
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "scopes": {
                            "description": "The URL to fetch the token from.",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "maxLength": 10,
                            "minLength": 1
                          },
                          "tlsConfig": {
                            "description": "Configures the scrape request's TLS settings.",
                            "type": "object",
                            "properties": {
                              "insecureSkipVerify": {
                                "description": "Disable validation of the server certificate.",
                                "type": "boolean",
                                "default": false
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "honorLabels": {
                  "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
                  "type": "boolean",
                  "default": "false"
                },
                "honorTimeStamps": {
                  "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
                  "type": "boolean",
                  "default": "false"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create scrape target.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Scrape target successfully created",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "patch": {
        "operationId": "v1_projects_instances_scrapeconfigs_partial_update",
        "description": "Update scrape configs.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Array of jobs that should be created or updated",
              "type": "array",
              "items": {
                "required": [
                  "jobName",
                  "scheme",
                  "scrapeInterval",
                  "scrapeTimeout",
                  "staticConfigs"
                ],
                "type": "object",
                "properties": {
                  "staticConfigs": {
                    "description": "A list of scrape configurations.",
                    "type": "array",
                    "items": {
                      "required": ["targets"],
                      "type": "object",
                      "properties": {
                        "targets": {
                          "description": "The targets specified by the static config.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "maxLength": 500,
                            "minLength": 1
                          }
                        },
                        "labels": {
                          "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 10 keys\n* each key and value should not be longer than 200 characters",
                          "type": "object"
                        }
                      }
                    }
                  },
                  "jobName": {
                    "description": "The job name assigned to scraped metrics by default.\n`Additional Validators:`\n* must be unique\n* key and values should only include the characters: a-zA-Z0-9-",
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "scheme": {
                    "description": "Configures the protocol scheme used for requests. https or http",
                    "type": "string",
                    "enum": ["http", "https"]
                  },
                  "scrapeInterval": {
                    "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "scrapeTimeout": {
                    "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 2
                  },
                  "metricsPath": {
                    "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
                    "type": "string",
                    "default": "/metrics",
                    "maxLength": 200,
                    "minLength": 1
                  },
                  "sampleLimit": {
                    "description": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabeling the entire scrape will be treated as failed. The total limit depends on the service plan target limits * samples",
                    "type": "number",
                    "default": 5000,
                    "maxLength": 8,
                    "minLength": 1
                  },
                  "basicAuth": {
                    "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                    "type": "object",
                    "properties": {
                      "username": {
                        "description": "username",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "password": {
                        "description": "password",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      }
                    }
                  },
                  "oauth2": {
                    "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                    "required": ["clientId", "clientSecret", "tokenUrl"],
                    "type": "object",
                    "properties": {
                      "clientId": {
                        "description": "clientId",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "clientSecret": {
                        "description": "clientSecret",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "tokenUrl": {
                        "description": "The URL to fetch the token from.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "scopes": {
                        "description": "The URL to fetch the token from.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 10,
                        "minLength": 1
                      },
                      "tlsConfig": {
                        "description": "Configures the scrape request's TLS settings.",
                        "type": "object",
                        "properties": {
                          "insecureSkipVerify": {
                            "description": "Disable validation of the server certificate.",
                            "type": "boolean",
                            "default": false
                          }
                        }
                      }
                    }
                  },
                  "tlsConfig": {
                    "description": "Configures the scrape request's TLS settings.",
                    "type": "object",
                    "properties": {
                      "insecureSkipVerify": {
                        "description": "Disable validation of the server certificate.",
                        "type": "boolean",
                        "default": false
                      }
                    }
                  },
                  "bearerToken": {
                    "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
                    "type": "string"
                  },
                  "metricsRelabelConfigs": {
                    "description": "List of metric relabel configurations",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "sourceLabels": {
                          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "maxLength": 200,
                            "minLength": 1
                          },
                          "maxLength": 5
                        },
                        "separator": {
                          "description": "Separator placed between concatenated source label values.",
                          "type": "string",
                          "default": ";",
                          "maxLength": 20,
                          "minLength": 1
                        },
                        "targetLabel": {
                          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "regex": {
                          "description": "Regular expression against which the extracted value is matched.",
                          "type": "string",
                          "default": ".*",
                          "maxLength": 400,
                          "minLength": 1
                        },
                        "modulus": {
                          "description": "Modulus to take of the hash of the source label values.",
                          "type": "number",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "replacement": {
                          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                          "type": "string",
                          "default": "$1",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "action": {
                          "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                          "type": "string",
                          "enum": [
                            "replace",
                            "keep",
                            "drop",
                            "hashmod",
                            "labelmap",
                            "labeldrop",
                            "labelkeep"
                          ],
                          "default": "replace"
                        }
                      }
                    }
                  },
                  "params": {
                    "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                    "type": "object"
                  },
                  "httpSDConfigs": {
                    "description": "HTTP-based service discovery provides a more generic way to configure static targets and serves as an interface to plug in custom service discovery mechanisms.",
                    "type": "array",
                    "items": {
                      "required": ["url"],
                      "type": "object",
                      "properties": {
                        "url": {
                          "description": "URL from which the targets are fetched.",
                          "type": "string",
                          "maxLength": 400
                        },
                        "refreshInterval": {
                          "description": "Refresh interval to re-query the endpoint. E.g. 60s\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                          "type": "string",
                          "default": "60s",
                          "maxLength": 8,
                          "minLength": 2
                        },
                        "basicAuth": {
                          "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                          "type": "object",
                          "properties": {
                            "username": {
                              "description": "username",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "password": {
                              "description": "password",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            }
                          }
                        },
                        "tlsConfig": {
                          "description": "Configures the scrape request's TLS settings.",
                          "type": "object",
                          "properties": {
                            "insecureSkipVerify": {
                              "description": "Disable validation of the server certificate.",
                              "type": "boolean",
                              "default": false
                            }
                          }
                        },
                        "oauth2": {
                          "description": "OAuth 2.0 authentication using the client credentials grant type. Prometheus fetches an access token from the specified endpoint with the given client access and secret keys.\n`Additional Validators:`\n* if oauth2 is in the body no other authentication method should be in the body",
                          "required": ["clientId", "clientSecret", "tokenUrl"],
                          "type": "object",
                          "properties": {
                            "clientId": {
                              "description": "clientId",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "clientSecret": {
                              "description": "clientSecret",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "tokenUrl": {
                              "description": "The URL to fetch the token from.",
                              "type": "string",
                              "maxLength": 200,
                              "minLength": 1
                            },
                            "scopes": {
                              "description": "The URL to fetch the token from.",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "maxLength": 200,
                                "minLength": 1
                              },
                              "maxLength": 10,
                              "minLength": 1
                            },
                            "tlsConfig": {
                              "description": "Configures the scrape request's TLS settings.",
                              "type": "object",
                              "properties": {
                                "insecureSkipVerify": {
                                  "description": "Disable validation of the server certificate.",
                                  "type": "boolean",
                                  "default": false
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "honorLabels": {
                    "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
                    "type": "boolean",
                    "default": "false"
                  },
                  "honorTimeStamps": {
                    "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
                    "type": "boolean",
                    "default": "false"
                  }
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Create scrape targets.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Scrape targets successfully created",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "delete": {
        "operationId": "v1_projects_instances_scrapeconfigs_delete",
        "description": "Delete scrape configs.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobName",
            "in": "query",
            "description": "Name of the jobs that should be deleted",
            "required": true,
            "type": "array",
            "items": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted scrape configs.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Scrape configs successfully deleted",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/scrapeconfigs/{jobName}": {
      "get": {
        "operationId": "v1_projects_instances_scrapeconfigs_read",
        "description": "Get scrape config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get scrape target.",
            "schema": { "$ref": "#/definitions/GetJob" },
            "examples": {
              "application/json": {
                "message": "Successfully got scrape target",
                "data": {
                  "jobName": "test",
                  "scheme": "https",
                  "scrapeInterval": "5m",
                  "scrapeTimeout": "1m",
                  "staticConfigs": [{ "targets": ["example.com"] }],
                  "metricsPath": "/metrics"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "put": {
        "operationId": "v1_projects_instances_scrapeconfigs_update",
        "description": "Update scrape config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": [
                "scheme",
                "scrapeInterval",
                "scrapeTimeout",
                "staticConfigs",
                "metricsPath"
              ],
              "type": "object",
              "properties": {
                "staticConfigs": {
                  "description": "A list of scrape configurations.",
                  "type": "array",
                  "items": {
                    "required": ["targets"],
                    "type": "object",
                    "properties": {
                      "targets": {
                        "description": "The targets specified by the static config.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 500,
                          "minLength": 1
                        }
                      },
                      "labels": {
                        "description": "Labels assigned to all metrics scraped from the targets.\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not be longer than 200 characters",
                        "type": "object"
                      }
                    }
                  }
                },
                "scheme": {
                  "description": "Configures the protocol scheme used for requests. https or http",
                  "type": "string",
                  "enum": ["http", "https"]
                },
                "scrapeInterval": {
                  "description": "How frequently to scrape targets from this job. E.g. 5m\n`Additional Validators:`\n* must be a valid time format* must be >= 60s",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "scrapeTimeout": {
                  "description": "Per-scrape timeout when scraping this job.\n`Additional Validators:`\n* must be a valid time format* must be smaller than scrapeInterval",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                },
                "metricsPath": {
                  "description": "The HTTP resource path on which to fetch metrics from targets. E.g. /metrics",
                  "type": "string",
                  "default": "/metrics",
                  "maxLength": 200,
                  "minLength": 1
                },
                "basicAuth": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured username and password.\n`Additional Validators:`\n* if basicAuth is in the body no other authentication method should be in the body",
                  "type": "object",
                  "properties": {
                    "username": {
                      "description": "username",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    },
                    "password": {
                      "description": "password",
                      "type": "string",
                      "maxLength": 200,
                      "minLength": 1
                    }
                  }
                },
                "tlsConfig": {
                  "description": "Configures the scrape request's TLS settings.",
                  "type": "object",
                  "properties": {
                    "insecureSkipVerify": {
                      "description": "Disable validation of the server certificate.",
                      "type": "boolean",
                      "default": false
                    }
                  }
                },
                "bearerToken": {
                  "description": "Sets the 'Authorization' header on every scrape request with the configured bearer token. It is mutually exclusive with 'bearer_token_file'.\n`Additional Validators:`\n* needs to be a valid bearer token\n* if bearerToken is in the body no other authentication method should be in the body",
                  "type": "string"
                },
                "metricsRelabelConfigs": {
                  "description": "List of metric relabel configurations",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sourceLabels": {
                        "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "maxLength": 200,
                          "minLength": 1
                        },
                        "maxLength": 5
                      },
                      "separator": {
                        "description": "Separator placed between concatenated source label values.",
                        "type": "string",
                        "default": ";",
                        "maxLength": 20,
                        "minLength": 1
                      },
                      "targetLabel": {
                        "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
                        "type": "string",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "regex": {
                        "description": "Regular expression against which the extracted value is matched.",
                        "type": "string",
                        "default": ".*",
                        "maxLength": 400,
                        "minLength": 1
                      },
                      "modulus": {
                        "description": "Modulus to take of the hash of the source label values.",
                        "type": "number",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "replacement": {
                        "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
                        "type": "string",
                        "default": "$1",
                        "maxLength": 200,
                        "minLength": 1
                      },
                      "action": {
                        "description": "Action to perform based on regex matching.\n`Additional Validators:`\n* if action is replace, targetLabel needs to be in body",
                        "type": "string",
                        "enum": [
                          "replace",
                          "keep",
                          "drop",
                          "hashmod",
                          "labelmap",
                          "labeldrop",
                          "labelkeep"
                        ],
                        "default": "replace"
                      }
                    }
                  }
                },
                "params": {
                  "description": "Optional http params\n`Additional Validators:`\n* should not contain more than 5 keys\n* each key and value should not have more than 200 characters",
                  "type": "object"
                },
                "honorLabels": {
                  "description": "Note that any globally configured 'external_labels' are unaffected by this setting. In communication with external systems, they are always applied only when a time series does not have a given label yet and are ignored otherwise.",
                  "type": "boolean",
                  "default": "false"
                },
                "honorTimeStamps": {
                  "description": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to 'true', the timestamps of the metrics exposed by the target will be used.",
                  "type": "boolean",
                  "default": "false"
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update scrape target.",
            "schema": { "$ref": "#/definitions/CreateJob" },
            "examples": {
              "application/json": {
                "message": "Successfully updated scrape target",
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Scrape target not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Scrape target not found." }
            }
          },
          "400": {
            "description": "Something went wrong.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "delete": {
        "operationId": "v1_projects_instances_scrapeconfigs_delete",
        "description": "Delete scrape config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete scrape target.",
            "schema": { "$ref": "#/definitions/DeleteJob" },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "jobName": "test",
                    "scheme": "https",
                    "scrapeInterval": "5m",
                    "scrapeTimeout": "1m",
                    "staticConfigs": [{ "targets": ["example.com"] }],
                    "metricsPath": "/metrics"
                  }
                ],
                "message": "Job has been deleted successfully"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Scrape target not found.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Scrape target not found." }
            }
          }
        },
        "tags": ["scrape config"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        { "name": "jobName", "in": "path", "required": true, "type": "string" },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/projects/{projectId}/instances/{instanceId}/traces-configs": {
      "get": {
        "operationId": "v1_projects_instances_traces-configs_list",
        "description": "Get traces config.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get traces config.",
            "schema": { "$ref": "#/definitions/TracesConfigResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got traces config",
                "config": { "retention": "14d" }
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["traces"]
      },
      "put": {
        "operationId": "v1_projects_instances_traces-configs_update",
        "description": "Update traces config.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "required": ["retention"],
              "type": "object",
              "properties": {
                "retention": {
                  "description": "How long to keep the traces\n`Additional Validators:`\n* Should be a valid time string\n* Should not be bigger than 30 days",
                  "type": "string",
                  "maxLength": 8,
                  "minLength": 2
                }
              }
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Update traces config.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Successfully updated traces configuration"
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "400": {
            "description": "Something went wrong",
            "schema": { "$ref": "#/definitions/Error" },
            "examples": {
              "application/json": { "message": "Something went wrong" }
            }
          }
        },
        "tags": ["traces"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/systems/projects/{projectId}/instances/{instanceId}": {
      "get": {
        "operationId": "v1_systems_projects_instances_read",
        "description": "Get instance information.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts technical credentials and api gateway access.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get instance information.",
            "schema": { "$ref": "#/definitions/SystemInstanceResponse" },
            "examples": {
              "application/json": {
                "message": "Successfully got instance",
                "instances": {
                  "instance": "597976c4-d4c1-44d6-9f43-213df3da1799",
                  "name": "test",
                  "metricsUrl": "https://storage.api.stackit.argus.eu01.cloud/instances/123456",
                  "pushMetricsUrl": "https://push.metrics.stackit.argus.eu01.cloud/instances/123456/api/v1/receive",
                  "targetsUrl": "https://metrics.stackit.argus.eu01.cloud/instances/123456",
                  "alertingUrl": "https://alerting.stackit.argus.eu01.cloud/instances/123456",
                  "logsUrl": "https://logs.stackit.argus.eu01.cloud/instances/123456",
                  "logsPushUrl": "https://logs.stackit.argus.eu01.cloud/instances/123456/loki/api/v1/push",
                  "jaegerTracesUrl": "123456-gj.traces.stackit.argus.eu01.cloud:443",
                  "otlpTracesUrl": "123456-op.traces.stackit.argus.eu01.cloud:443",
                  "zipkinSpansUrl": "https://123456-zk.traces.stackit.argus.eu01.cloud/instances/123456",
                  "jaegerUiUrl": "https://123456-jui.traces.stackit.argus.eu01.cloud/instances/123456"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to perform this action.",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Instance was not found",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": { "message": "Instance not found" }
            }
          }
        },
        "tags": ["instances"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/systems/projects/{projectId}/instances/{instanceId}/credentials": {
      "post": {
        "operationId": "v1_systems_projects_instances_credentials_create",
        "description": "Create technical user credentials.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts system permissions.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "The technical credentials were successfully created.",
            "schema": { "$ref": "#/definitions/ApiUserCreated" },
            "examples": {
              "application/json": {
                "message": "Successfully created api user",
                "username": "test",
                "password": "1fasAELDB234ddeDAfdasfel787oplpj",
                "apiUrl": "https://api.argus.eu01.stackit.cloud",
                "apiUrlSwagger": "https://api.argus.eu01.stackit.cloud/swagger",
                "instanceId": "69a9219e-6c42-4e12-9262-1c4d073674da"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          }
        },
        "tags": ["instances"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/systems/projects/{projectId}/instances/{instanceId}/credentials/{username}": {
      "delete": {
        "operationId": "v1_systems_projects_instances_credentials_delete",
        "description": "Delete technical credentials.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Accepts system permission.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The technical credentials were successfully deleted.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "The technical credentials were successfully deleted"
              }
            }
          },
          "403": {
            "description": "You are not authorized",
            "schema": { "$ref": "#/definitions/PermissionDenied" },
            "examples": {
              "application/json": {
                "detail": "You do not have permission to perform this action."
              }
            }
          },
          "404": {
            "description": "Technical credentials do not exists.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Technical credentials not found"
              }
            }
          },
          "500": {
            "description": "Something went wrong deleting the technical credentials.",
            "schema": { "$ref": "#/definitions/Message" },
            "examples": {
              "application/json": {
                "message": "Failed to delete technical credentials"
              }
            }
          }
        },
        "tags": ["instances"]
      },
      "parameters": [
        {
          "name": "instanceId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        {
          "name": "projectId",
          "in": "path",
          "required": true,
          "type": "string"
        },
        { "name": "username", "in": "path", "required": true, "type": "string" }
      ]
    }
  },
  "definitions": {
    "ClusterList": {
      "required": ["message", "clusters"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "clusters": {
          "type": "array",
          "items": { "type": "string", "minLength": 1 }
        }
      }
    },
    "Message": {
      "required": ["message"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 }
      }
    },
    "PermissionDenied": {
      "required": ["detail"],
      "type": "object",
      "properties": {
        "detail": { "title": "Detail", "type": "string", "minLength": 1 }
      }
    },
    "Status": {
      "required": [
        "state",
        "description",
        "instance_usable",
        "update_repeatable"
      ],
      "type": "object",
      "properties": {
        "state": { "title": "State", "type": "string", "minLength": 1 },
        "description": {
          "title": "Description",
          "type": "string",
          "minLength": 1
        },
        "instance_usable": {
          "title": "Instance usable",
          "type": "string",
          "minLength": 1
        },
        "update_repeatable": {
          "title": "Update repeatable",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "GrafanaPluginModel": {
      "required": ["name", "description"],
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 500,
          "minLength": 1
        }
      }
    },
    "GrafanaPlugin": {
      "required": ["message", "plugins"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "plugins": {
          "type": "array",
          "items": { "$ref": "#/definitions/GrafanaPluginModel" }
        }
      }
    },
    "GrafanaPluginSingle": {
      "required": ["message", "plugin"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "plugin": { "$ref": "#/definitions/GrafanaPluginModel" }
      }
    },
    "Error": {
      "required": ["message"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": { "type": "string", "x-nullable": true }
          }
        }
      }
    },
    "PlanModel": {
      "required": [
        "planId",
        "bucketSize",
        "grafanaGlobalUsers",
        "grafanaGlobalOrgs",
        "grafanaGlobalDashboards",
        "alertRules",
        "targetNumber",
        "samplesPerScrape",
        "grafanaGlobalSessions",
        "alertReceivers",
        "alertMatchers",
        "logsStorage",
        "tracesStorage",
        "logsAlert"
      ],
      "type": "object",
      "properties": {
        "planId": { "title": "Planid", "type": "string", "format": "uuid" },
        "description": {
          "title": "Description",
          "type": "string",
          "maxLength": 1000,
          "minLength": 1
        },
        "bucketSize": {
          "title": "Bucketsize",
          "type": "integer",
          "minimum": 20
        },
        "grafanaGlobalUsers": {
          "title": "Grafanaglobalusers",
          "type": "integer"
        },
        "grafanaGlobalOrgs": {
          "title": "Grafanaglobalorgs",
          "type": "integer"
        },
        "grafanaGlobalDashboards": {
          "title": "Grafanaglobaldashboards",
          "type": "integer"
        },
        "alertRules": { "title": "Alertrules", "type": "integer" },
        "targetNumber": { "title": "Targetnumber", "type": "integer" },
        "samplesPerScrape": { "title": "Samplesperscrape", "type": "integer" },
        "grafanaGlobalSessions": {
          "title": "Grafanaglobalsessions",
          "type": "integer"
        },
        "name": {
          "title": "Name",
          "type": "string",
          "default": "",
          "maxLength": 500,
          "minLength": 1
        },
        "amount": {
          "title": "Amount",
          "type": "number",
          "maximum": 10000000.0,
          "minimum": 0.0
        },
        "alertReceivers": { "title": "Alertreceivers", "type": "integer" },
        "alertMatchers": { "title": "Alertmatchers", "type": "integer" },
        "logsStorage": { "title": "Logsstorage", "type": "integer" },
        "tracesStorage": { "title": "Tracesstorage", "type": "integer" },
        "logsAlert": { "title": "Logsalert", "type": "integer" }
      }
    },
    "Instance": {
      "required": [
        "cluster",
        "instance",
        "plan",
        "metricsRetentionTimeRaw",
        "metricsRetentionTime5m",
        "metricsRetentionTime1h",
        "grafanaPublicReadAccess"
      ],
      "type": "object",
      "properties": {
        "cluster": {
          "title": "Cluster",
          "type": "string",
          "maxLength": 63,
          "minLength": 1
        },
        "instance": {
          "title": "Instance",
          "type": "string",
          "maxLength": 63,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "plan": { "$ref": "#/definitions/PlanModel" },
        "metricsRetentionTimeRaw": {
          "title": "Metricsretentiontimeraw",
          "type": "integer",
          "minimum": 0
        },
        "metricsRetentionTime5m": {
          "title": "Metricsretentiontime5m",
          "type": "integer",
          "minimum": 0
        },
        "metricsRetentionTime1h": {
          "title": "Metricsretentiontime1h",
          "type": "integer",
          "minimum": 0
        },
        "state": {
          "title": "State",
          "type": "string",
          "enum": [
            "Component creation started",
            "Component creation failed",
            "Component creation succeeded. Now need to check readiness",
            "Component creation succeeded",
            "Component deletion started",
            "Component deletion failed",
            "Component deletion succeeded",
            "Component deletion of routine succeeded. Now need to check if resources gone",
            "Component deletion buckets succeeded",
            "Component update failed",
            "Component update started",
            "Component update creation succeeded",
            "Component update downgrade deletion resources succeeded"
          ]
        },
        "grafanaPublicReadAccess": {
          "title": "Grafanapublicreadaccess",
          "type": "boolean"
        }
      }
    },
    "Services": {
      "required": ["message", "instances"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "instances": {
          "type": "array",
          "items": { "$ref": "#/definitions/Instance" }
        }
      }
    },
    "InstanceSensitiveData": {
      "required": [
        "cluster",
        "instance",
        "grafanaUrl",
        "dashboardUrl",
        "grafanaAdminPassword",
        "grafanaAdminUser",
        "plan",
        "metricsRetentionTimeRaw",
        "metricsRetentionTime5m",
        "metricsRetentionTime1h",
        "metricsUrl",
        "grafanaPublicReadAccess",
        "targetsUrl",
        "alertingUrl",
        "pushMetricsUrl",
        "logsUrl",
        "logsPushUrl",
        "jaegerTracesUrl",
        "otlpTracesUrl",
        "zipkinSpansUrl",
        "jaegerUiUrl"
      ],
      "type": "object",
      "properties": {
        "cluster": {
          "title": "Cluster",
          "type": "string",
          "maxLength": 63,
          "minLength": 1
        },
        "instance": {
          "title": "Instance",
          "type": "string",
          "maxLength": 63,
          "minLength": 1
        },
        "grafanaUrl": {
          "title": "Grafanaurl",
          "type": "string",
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "default": "",
          "maxLength": 300,
          "minLength": 1
        },
        "dashboardUrl": {
          "title": "Dashboardurl",
          "type": "string",
          "minLength": 1
        },
        "grafanaAdminPassword": {
          "title": "Grafanaadminpassword",
          "type": "string",
          "minLength": 32
        },
        "grafanaAdminUser": {
          "title": "Grafanaadminuser",
          "type": "string",
          "minLength": 1
        },
        "plan": { "$ref": "#/definitions/PlanModel" },
        "metricsRetentionTimeRaw": {
          "title": "Metricsretentiontimeraw",
          "type": "integer",
          "minimum": 0
        },
        "metricsRetentionTime5m": {
          "title": "Metricsretentiontime5m",
          "type": "integer",
          "minimum": 0
        },
        "metricsRetentionTime1h": {
          "title": "Metricsretentiontime1h",
          "type": "integer",
          "minimum": 0
        },
        "metricsUrl": {
          "title": "Metricsurl",
          "type": "string",
          "minLength": 1
        },
        "state": {
          "title": "State",
          "type": "string",
          "enum": [
            "Component creation started",
            "Component creation failed",
            "Component creation succeeded. Now need to check readiness",
            "Component creation succeeded",
            "Component deletion started",
            "Component deletion failed",
            "Component deletion succeeded",
            "Component deletion of routine succeeded. Now need to check if resources gone",
            "Component deletion buckets succeeded",
            "Component update failed",
            "Component update started",
            "Component update creation succeeded",
            "Component update downgrade deletion resources succeeded"
          ]
        },
        "grafanaPublicReadAccess": {
          "title": "Grafanapublicreadaccess",
          "type": "boolean"
        },
        "targetsUrl": {
          "title": "Targetsurl",
          "type": "string",
          "minLength": 1
        },
        "alertingUrl": {
          "title": "Alertingurl",
          "type": "string",
          "minLength": 1
        },
        "pushMetricsUrl": {
          "title": "Pushmetricsurl",
          "type": "string",
          "minLength": 1
        },
        "logsUrl": { "title": "Logsurl", "type": "string", "minLength": 1 },
        "logsPushUrl": {
          "title": "Logspushurl",
          "type": "string",
          "minLength": 1
        },
        "jaegerTracesUrl": {
          "title": "Jaegertracesurl",
          "type": "string",
          "minLength": 1
        },
        "otlpTracesUrl": {
          "title": "Otlptracesurl",
          "type": "string",
          "minLength": 1
        },
        "zipkinSpansUrl": {
          "title": "Zipkinspansurl",
          "type": "string",
          "minLength": 1
        },
        "jaegerUiUrl": {
          "title": "Jaegeruiurl",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Service": {
      "required": ["message", "instance"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "instance": { "$ref": "#/definitions/InstanceSensitiveData" }
      }
    },
    "RouteSerializer2": {
      "required": ["receiver"],
      "type": "object",
      "properties": {
        "receiver": {
          "title": "Receiver",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "groupBy": {
          "type": "array",
          "items": { "type": "string", "maxLength": 200, "minLength": 1 },
          "maxItems": 5
        },
        "groupWait": {
          "title": "Groupwait",
          "type": "string",
          "default": "30s",
          "maxLength": 8,
          "minLength": 2
        },
        "groupInterval": {
          "title": "Groupinterval",
          "type": "string",
          "default": "5m",
          "maxLength": 8,
          "minLength": 2
        },
        "repeatInterval": {
          "title": "Repeatinterval",
          "type": "string",
          "default": "4h",
          "maxLength": 8,
          "minLength": 2
        },
        "match": {
          "title": "Match",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "matchRe": {
          "title": "Matchre",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "matchers": {
          "type": "array",
          "items": { "type": "string", "maxLength": 200, "minLength": 1 },
          "maxItems": 5
        },
        "routes": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": { "type": "string", "x-nullable": true }
          }
        },
        "continue": { "title": "Continue", "type": "boolean", "default": false }
      }
    },
    "Route": {
      "required": ["receiver"],
      "type": "object",
      "properties": {
        "receiver": {
          "title": "Receiver",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "groupBy": {
          "type": "array",
          "items": { "type": "string", "maxLength": 200, "minLength": 1 },
          "maxItems": 5
        },
        "groupWait": {
          "title": "Groupwait",
          "type": "string",
          "default": "30s",
          "maxLength": 8,
          "minLength": 2
        },
        "groupInterval": {
          "title": "Groupinterval",
          "type": "string",
          "default": "5m",
          "maxLength": 8,
          "minLength": 2
        },
        "repeatInterval": {
          "title": "Repeatinterval",
          "type": "string",
          "default": "4h",
          "maxLength": 8,
          "minLength": 2
        },
        "match": {
          "title": "Match",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "matchRe": {
          "title": "Matchre",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "routes": {
          "type": "array",
          "items": { "$ref": "#/definitions/RouteSerializer2" }
        },
        "continue": { "title": "Continue", "type": "boolean", "default": false }
      }
    },
    "EmailConfig": {
      "required": ["to"],
      "type": "object",
      "properties": {
        "to": {
          "title": "To",
          "type": "string",
          "format": "email",
          "maxLength": 200,
          "minLength": 1
        },
        "smarthost": {
          "title": "Smarthost",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "authUsername": {
          "title": "Authusername",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "authPassword": {
          "title": "Authpassword",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "authIdentity": {
          "title": "Authidentity",
          "type": "string",
          "format": "email",
          "maxLength": 200,
          "minLength": 1
        },
        "sendResolved": {
          "title": "Sendresolved",
          "type": "boolean",
          "default": false
        },
        "from": {
          "title": "From",
          "type": "string",
          "format": "email",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "OpsgenieConfig": {
      "type": "object",
      "properties": {
        "apiKey": {
          "title": "Apikey",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "apiUrl": {
          "title": "Apiurl",
          "type": "string",
          "format": "uri",
          "maxLength": 400,
          "minLength": 1
        },
        "tags": {
          "title": "Tags",
          "type": "string",
          "maxLength": 400,
          "minLength": 1
        },
        "sendResolved": {
          "title": "Sendresolved",
          "type": "boolean",
          "default": true
        },
        "priority": {
          "title": "Priority",
          "type": "string",
          "maxLength": 2,
          "minLength": 2
        }
      }
    },
    "WebHook": {
      "required": ["url"],
      "type": "object",
      "properties": {
        "url": {
          "title": "Url",
          "type": "string",
          "maxLength": 500,
          "minLength": 1
        },
        "sendResolved": {
          "title": "Sendresolved",
          "type": "boolean",
          "default": true
        },
        "msTeams": { "title": "Msteams", "type": "boolean", "default": false }
      }
    },
    "Receivers": {
      "required": ["name"],
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "emailConfigs": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailConfig" }
        },
        "opsgenieConfigs": {
          "type": "array",
          "items": { "$ref": "#/definitions/OpsgenieConfig" }
        },
        "webHookConfigs": {
          "type": "array",
          "items": { "$ref": "#/definitions/WebHook" }
        }
      }
    },
    "InhibitRules": {
      "type": "object",
      "properties": {
        "sourceMatch": {
          "title": "Sourcematch",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "sourceMatchRe": {
          "title": "Sourcematchre",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "sourceMatchers": {
          "type": "array",
          "items": { "type": "string", "maxLength": 200, "minLength": 1 },
          "maxItems": 5
        },
        "targetMatch": {
          "title": "Targetmatch",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "targetMatchRe": {
          "title": "Targetmatchre",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          }
        },
        "targetMatchers": {
          "type": "array",
          "items": { "type": "string", "maxLength": 200, "minLength": 1 },
          "maxItems": 5
        },
        "equal": {
          "type": "array",
          "items": { "type": "string", "maxLength": 200, "minLength": 1 },
          "maxItems": 10
        }
      }
    },
    "Global": {
      "type": "object",
      "properties": {
        "resolveTimeout": {
          "title": "Resolvetimeout",
          "type": "string",
          "default": "5m",
          "maxLength": 8,
          "minLength": 2
        },
        "smtpFrom": {
          "title": "Smtpfrom",
          "type": "string",
          "format": "email",
          "maxLength": 200,
          "minLength": 1
        },
        "smtpSmarthost": {
          "title": "Smtpsmarthost",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "smtpAuthUsername": {
          "title": "Smtpauthusername",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "smtpAuthPassword": {
          "title": "Smtpauthpassword",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "smtpAuthIdentity": {
          "title": "Smtpauthidentity",
          "type": "string",
          "format": "email",
          "maxLength": 200,
          "minLength": 1
        },
        "opsgenieApiKey": {
          "title": "Opsgenieapikey",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "opsgenieApiUrl": {
          "title": "Opsgenieapiurl",
          "type": "string",
          "format": "uri",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "Alert": {
      "required": ["route", "receivers"],
      "type": "object",
      "properties": {
        "route": { "$ref": "#/definitions/Route" },
        "receivers": {
          "type": "array",
          "items": { "$ref": "#/definitions/Receivers" }
        },
        "inhibitRules": {
          "type": "array",
          "items": { "$ref": "#/definitions/InhibitRules" }
        },
        "global": { "$ref": "#/definitions/Global" }
      }
    },
    "GetAlert": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/Alert" }
      }
    },
    "PutAlert": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/Alert" }
      }
    },
    "ReceiversResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": {
          "type": "array",
          "items": { "$ref": "#/definitions/Receivers" }
        }
      }
    },
    "ReceiversResponseSerializerSingle": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/Receivers" }
      }
    },
    "RouteResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/Route" }
      }
    },
    "AlertRuleRecordJson": {
      "required": ["expr"],
      "type": "object",
      "properties": {
        "alert": {
          "title": "Alert",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "expr": {
          "title": "Expr",
          "type": "string",
          "maxLength": 600,
          "minLength": 1
        },
        "labels": {
          "title": "Labels",
          "type": "object",
          "additionalProperties": { "type": "string", "minLength": 1 }
        },
        "annotations": {
          "title": "Annotations",
          "type": "object",
          "additionalProperties": { "type": "string", "minLength": 1 }
        },
        "record": {
          "title": "Record",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "for": {
          "title": "For",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        }
      }
    },
    "AlertGroupJson": {
      "required": ["name", "rules"],
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "interval": {
          "title": "Interval",
          "type": "string",
          "default": "60s",
          "maxLength": 8,
          "minLength": 2
        },
        "rules": {
          "type": "array",
          "items": { "$ref": "#/definitions/AlertRuleRecordJson" }
        }
      }
    },
    "AlertGroupsResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": {
          "type": "array",
          "items": { "$ref": "#/definitions/AlertGroupJson" }
        }
      }
    },
    "AlertGroupResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/AlertGroupJson" }
      }
    },
    "AlertRule": {
      "required": ["alert", "expr"],
      "type": "object",
      "properties": {
        "alert": {
          "title": "Alert",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "expr": {
          "title": "Expr",
          "type": "string",
          "maxLength": 600,
          "minLength": 1
        },
        "labels": {
          "title": "Labels",
          "type": "object",
          "additionalProperties": { "type": "string", "minLength": 1 }
        },
        "annotations": {
          "title": "Annotations",
          "type": "object",
          "additionalProperties": { "type": "string", "minLength": 1 }
        },
        "for": {
          "title": "For",
          "type": "string",
          "default": "0s",
          "maxLength": 8,
          "minLength": 2
        }
      }
    },
    "AlertRulesResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": {
          "type": "array",
          "items": { "$ref": "#/definitions/AlertRule" }
        }
      }
    },
    "AlertRuleResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/AlertRule" }
      }
    },
    "AlertRecord": {
      "required": ["record", "expr"],
      "type": "object",
      "properties": {
        "record": {
          "title": "Record",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "expr": {
          "title": "Expr",
          "type": "string",
          "maxLength": 600,
          "minLength": 1
        },
        "labels": {
          "title": "Labels",
          "type": "object",
          "additionalProperties": { "type": "string", "minLength": 1 }
        }
      }
    },
    "AlertRecordsResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": {
          "type": "array",
          "items": { "$ref": "#/definitions/AlertRecord" }
        }
      }
    },
    "AlertRecordResponse": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/AlertRecord" }
      }
    },
    "BackupRetentionResponse": {
      "required": [
        "message",
        "alertConfigBackupRetention",
        "alertRulesBackupRetention",
        "scrapeConfigBackupRetention",
        "grafanaBackupRetention"
      ],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "alertConfigBackupRetention": {
          "title": "Alertconfigbackupretention",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "alertRulesBackupRetention": {
          "title": "Alertrulesbackupretention",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "scrapeConfigBackupRetention": {
          "title": "Scrapeconfigbackupretention",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "grafanaBackupRetention": {
          "title": "Grafanabackupretention",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        }
      }
    },
    "BackupScheduleModelJson": {
      "required": ["schedule", "scheduleId"],
      "type": "object",
      "properties": {
        "schedule": {
          "title": "Schedule",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "scheduleId": {
          "title": "Scheduleid",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "BackupScheduleResponse": {
      "required": ["message"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "alertConfigBackupSchedules": {
          "type": "array",
          "items": { "$ref": "#/definitions/BackupScheduleModelJson" }
        },
        "alertRulesBackupSchedules": {
          "type": "array",
          "items": { "$ref": "#/definitions/BackupScheduleModelJson" }
        },
        "scrapeConfigBackupSchedules": {
          "type": "array",
          "items": { "$ref": "#/definitions/BackupScheduleModelJson" }
        },
        "grafanaBackupSchedules": {
          "type": "array",
          "items": { "$ref": "#/definitions/BackupScheduleModelJson" }
        }
      }
    },
    "BackupSchedulePostResponse": {
      "required": ["message", "schedule"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "schedule": {
          "title": "Schedule",
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        }
      }
    },
    "BackupSchedulePutResponse": {
      "required": ["message", "schedule"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "schedule": { "$ref": "#/definitions/BackupScheduleModelJson" }
      }
    },
    "BackupResponse": {
      "required": [
        "message",
        "alertConfigBackups",
        "alertRulesBackups",
        "scrapeConfigBackups",
        "grafanaBackups"
      ],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "alertConfigBackups": {
          "type": "array",
          "items": { "type": "string", "format": "date" }
        },
        "alertRulesBackups": {
          "type": "array",
          "items": { "type": "string", "format": "date" }
        },
        "scrapeConfigBackups": {
          "type": "array",
          "items": { "type": "string", "format": "date" }
        },
        "grafanaBackups": {
          "type": "array",
          "items": { "type": "string", "format": "date" }
        }
      }
    },
    "GrafanaOauth": {
      "required": [
        "enabled",
        "apiUrl",
        "authUrl",
        "tokenUrl",
        "oauthClientId",
        "oauthClientSecret",
        "roleAttributePath"
      ],
      "type": "object",
      "properties": {
        "enabled": { "title": "Enabled", "type": "boolean" },
        "apiUrl": {
          "title": "Apiurl",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "authUrl": {
          "title": "Authurl",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "scopes": {
          "title": "Scopes",
          "type": "string",
          "default": "openid profile email",
          "maxLength": 300,
          "minLength": 1
        },
        "tokenUrl": {
          "title": "Tokenurl",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "oauthClientId": {
          "title": "Oauthclientid",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "oauthClientSecret": {
          "title": "Oauthclientsecret",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        },
        "roleAttributeStrict": {
          "title": "Roleattributestrict",
          "type": "boolean",
          "default": true
        },
        "roleAttributePath": {
          "title": "Roleattributepath",
          "type": "string",
          "maxLength": 500,
          "minLength": 1
        }
      }
    },
    "GrafanaConfigsSerializerRespond": {
      "required": ["message"],
      "type": "object",
      "properties": {
        "publicReadAccess": { "title": "Publicreadaccess", "type": "boolean" },
        "genericOauth": { "$ref": "#/definitions/GrafanaOauth" },
        "message": { "title": "Message", "type": "string", "minLength": 1 }
      }
    },
    "LogsConfig": {
      "required": ["retention"],
      "type": "object",
      "properties": {
        "retention": {
          "title": "Retention",
          "type": "string",
          "maxLength": 10,
          "minLength": 2
        }
      }
    },
    "LogsConfigResponse": {
      "required": ["message", "config"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "config": { "$ref": "#/definitions/LogsConfig" }
      }
    },
    "BucketRetentionTimeRespond": {
      "required": [
        "metricsRetentionTimeRaw",
        "metricsRetentionTime5m",
        "metricsRetentionTime1h",
        "message"
      ],
      "type": "object",
      "properties": {
        "metricsRetentionTimeRaw": {
          "title": "Metricsretentiontimeraw",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "metricsRetentionTime5m": {
          "title": "Metricsretentiontime5m",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "metricsRetentionTime1h": {
          "title": "Metricsretentiontime1h",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "message": { "title": "Message", "type": "string", "minLength": 1 }
      }
    },
    "StaticConfigs": {
      "required": ["targets"],
      "type": "object",
      "properties": {
        "targets": {
          "type": "array",
          "items": { "type": "string", "maxLength": 400, "minLength": 1 }
        },
        "labels": {
          "title": "Labels",
          "type": "object",
          "additionalProperties": { "type": "string", "minLength": 1 }
        }
      }
    },
    "BasicAuth": {
      "required": ["username", "password"],
      "type": "object",
      "properties": {
        "username": {
          "title": "Username",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "password": {
          "title": "Password",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "TLSConfig": {
      "type": "object",
      "properties": {
        "insecureSkipVerify": {
          "title": "Insecureskipverify",
          "type": "boolean",
          "default": false
        }
      }
    },
    "OAuth2": {
      "required": ["clientId", "clientSecret", "tokenUrl"],
      "type": "object",
      "properties": {
        "clientId": {
          "title": "Clientid",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "clientSecret": {
          "title": "Clientsecret",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "tokenUrl": {
          "title": "Tokenurl",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "scopes": {
          "type": "array",
          "items": { "type": "string", "maxLength": 100, "minLength": 1 },
          "maxItems": 10
        },
        "tlsConfig": { "$ref": "#/definitions/TLSConfig" }
      }
    },
    "MetricsRelabelConfig": {
      "required": ["sourceLabels"],
      "type": "object",
      "properties": {
        "sourceLabels": {
          "type": "array",
          "items": { "type": "string", "maxLength": 200, "minLength": 1 },
          "maxItems": 5
        },
        "separator": {
          "title": "Separator",
          "type": "string",
          "default": ";",
          "maxLength": 20,
          "minLength": 1
        },
        "targetLabel": {
          "title": "Targetlabel",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "regex": {
          "title": "Regex",
          "type": "string",
          "default": ".*",
          "maxLength": 400,
          "minLength": 1
        },
        "modulus": { "title": "Modulus", "type": "integer", "maximum": 200 },
        "replacement": {
          "title": "Replacement",
          "type": "string",
          "default": "$1",
          "maxLength": 200,
          "minLength": 1
        },
        "action": {
          "title": "Action",
          "type": "string",
          "enum": [
            "replace",
            "keep",
            "drop",
            "hashmod",
            "labelmap",
            "labeldrop",
            "labelkeep"
          ],
          "default": "replace"
        }
      }
    },
    "HTTPServiceSD": {
      "required": ["url"],
      "type": "object",
      "properties": {
        "url": {
          "title": "Url",
          "type": "string",
          "maxLength": 400,
          "minLength": 1
        },
        "refreshInterval": {
          "title": "Refreshinterval",
          "type": "string",
          "default": "60s",
          "maxLength": 8,
          "minLength": 2
        },
        "basicAuth": { "$ref": "#/definitions/BasicAuth" },
        "oauth2": { "$ref": "#/definitions/OAuth2" },
        "tlsConfig": { "$ref": "#/definitions/TLSConfig" }
      }
    },
    "Job": {
      "required": [
        "jobName",
        "scrapeInterval",
        "scrapeTimeout",
        "staticConfigs"
      ],
      "type": "object",
      "properties": {
        "jobName": {
          "title": "Jobname",
          "type": "string",
          "maxLength": 200,
          "minLength": 1
        },
        "scheme": {
          "title": "Scheme",
          "type": "string",
          "enum": ["http", "https"],
          "default": "http"
        },
        "scrapeInterval": {
          "title": "Scrapeinterval",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "scrapeTimeout": {
          "title": "Scrapetimeout",
          "type": "string",
          "maxLength": 8,
          "minLength": 2
        },
        "metricsPath": {
          "title": "Metricspath",
          "type": "string",
          "default": "/metrics",
          "maxLength": 200,
          "minLength": 1
        },
        "staticConfigs": {
          "type": "array",
          "items": { "$ref": "#/definitions/StaticConfigs" }
        },
        "sampleLimit": {
          "title": "Samplelimit",
          "type": "integer",
          "default": 5000,
          "maximum": 1000000000,
          "minimum": 1
        },
        "basicAuth": { "$ref": "#/definitions/BasicAuth" },
        "oauth2": { "$ref": "#/definitions/OAuth2" },
        "tlsConfig": { "$ref": "#/definitions/TLSConfig" },
        "bearerToken": {
          "title": "Bearertoken",
          "type": "string",
          "minLength": 1
        },
        "metricsRelabelConfigs": {
          "type": "array",
          "items": { "$ref": "#/definitions/MetricsRelabelConfig" }
        },
        "params": {
          "title": "Params",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": { "type": "string", "maxLength": 200, "minLength": 1 },
            "maxItems": 5
          }
        },
        "httpSDConfigs": {
          "type": "array",
          "items": { "$ref": "#/definitions/HTTPServiceSD" }
        },
        "honorLabels": {
          "title": "Honorlabels",
          "type": "boolean",
          "default": false
        },
        "honorTimeStamps": {
          "title": "Honortimestamps",
          "type": "boolean",
          "default": false
        }
      }
    },
    "GetAllJob": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "type": "array", "items": { "$ref": "#/definitions/Job" } }
      }
    },
    "CreateJob": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "type": "array", "items": { "$ref": "#/definitions/Job" } }
      }
    },
    "GetJob": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "$ref": "#/definitions/Job" }
      }
    },
    "DeleteJob": {
      "required": ["message", "data"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "data": { "type": "array", "items": { "$ref": "#/definitions/Job" } }
      }
    },
    "TraceConfig": {
      "required": ["retention"],
      "type": "object",
      "properties": {
        "retention": {
          "title": "Retention",
          "type": "string",
          "maxLength": 10,
          "minLength": 2
        }
      }
    },
    "TracesConfigResponse": {
      "required": ["message", "config"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "config": { "$ref": "#/definitions/TraceConfig" }
      }
    },
    "Dashboard": {
      "required": ["message", "dashboardUrl"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "dashboardUrl": {
          "title": "Dashboardurl",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ApiUser": {
      "required": ["message", "apiUsers"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "apiUsers": {
          "type": "array",
          "items": { "type": "string", "minLength": 1 }
        }
      }
    },
    "ApiUserCreated": {
      "required": [
        "message",
        "username",
        "password",
        "apiUrl",
        "apiUrlSwagger",
        "instanceId"
      ],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "username": { "title": "Username", "type": "string", "minLength": 1 },
        "password": { "title": "Password", "type": "string", "minLength": 1 },
        "apiUrl": { "title": "Apiurl", "type": "string", "minLength": 1 },
        "apiUrlSwagger": {
          "title": "Apiurlswagger",
          "type": "string",
          "minLength": 1
        },
        "instanceId": {
          "title": "Instanceid",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "Plan": {
      "required": ["message", "plans"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "plans": {
          "type": "array",
          "items": { "$ref": "#/definitions/PlanModel" }
        }
      }
    },
    "ProjectInstance": {
      "required": ["instance"],
      "type": "object",
      "properties": {
        "instance": {
          "title": "Instance",
          "type": "string",
          "maxLength": 63,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "maxLength": 300,
          "minLength": 1
        }
      }
    },
    "ProjectInstancesResponse": {
      "required": ["message", "instances"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "instances": {
          "type": "array",
          "items": { "$ref": "#/definitions/ProjectInstance" }
        }
      }
    },
    "SystemInstance": {
      "required": [
        "instance",
        "metricsUrl",
        "targetsUrl",
        "alertingUrl",
        "pushMetricsUrl",
        "logsUrl",
        "logsPushUrl",
        "jaegerTracesUrl",
        "otlpTracesUrl",
        "zipkinSpansUrl",
        "jaegerUiUrl"
      ],
      "type": "object",
      "properties": {
        "instance": {
          "title": "Instance",
          "type": "string",
          "maxLength": 63,
          "minLength": 1
        },
        "name": {
          "title": "Name",
          "type": "string",
          "default": "",
          "maxLength": 300,
          "minLength": 1
        },
        "metricsUrl": {
          "title": "Metricsurl",
          "type": "string",
          "minLength": 1
        },
        "targetsUrl": {
          "title": "Targetsurl",
          "type": "string",
          "minLength": 1
        },
        "alertingUrl": {
          "title": "Alertingurl",
          "type": "string",
          "minLength": 1
        },
        "pushMetricsUrl": {
          "title": "Pushmetricsurl",
          "type": "string",
          "minLength": 1
        },
        "logsUrl": { "title": "Logsurl", "type": "string", "minLength": 1 },
        "logsPushUrl": {
          "title": "Logspushurl",
          "type": "string",
          "minLength": 1
        },
        "jaegerTracesUrl": {
          "title": "Jaegertracesurl",
          "type": "string",
          "minLength": 1
        },
        "otlpTracesUrl": {
          "title": "Otlptracesurl",
          "type": "string",
          "minLength": 1
        },
        "zipkinSpansUrl": {
          "title": "Zipkinspansurl",
          "type": "string",
          "minLength": 1
        },
        "jaegerUiUrl": {
          "title": "Jaegeruiurl",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "SystemInstanceResponse": {
      "required": ["message", "instance"],
      "type": "object",
      "properties": {
        "message": { "title": "Message", "type": "string", "minLength": 1 },
        "instance": { "$ref": "#/definitions/SystemInstance" }
      }
    }
  }
}
